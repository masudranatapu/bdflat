/*
SQLyog Ultimate v13.1.1 (32 bit)
MySQL - 10.2.10-MariaDB : Database - AZURADB_BETA
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`AZURADB_BETA` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `AZURADB_BETA`;

/*Table structure for table `ACC_BANK_ACC` */

DROP TABLE IF EXISTS `ACC_BANK_ACC`;

CREATE TABLE `ACC_BANK_ACC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_ACCOUNT_SOURCE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_bank_acc` (`F_ACCOUNT_SOURCE_NO`,`NAME`),
  CONSTRAINT `fk_ACC_BANK_ACC_ACC_PAYMENT_SOURCE` FOREIGN KEY (`F_ACCOUNT_SOURCE_NO`) REFERENCES `ACC_PAYMENT_SOURCE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `ACC_BANK_LIST` */

DROP TABLE IF EXISTS `ACC_BANK_LIST`;

CREATE TABLE `ACC_BANK_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `BANK_NAME` varchar(40) DEFAULT NULL,
  `BANK_URL` varchar(40) DEFAULT NULL,
  `SERIAL_NO` int(5) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_RECONCILATION` */

DROP TABLE IF EXISTS `ACC_BANK_RECONCILATION`;

CREATE TABLE `ACC_BANK_RECONCILATION` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `TX_REF` varchar(200) DEFAULT NULL,
  `F_BANK_ACCOUNT_NO` int(11) DEFAULT NULL,
  `TX_AMOUNT` float DEFAULT 0,
  `TX_TYPE_IN_OUT` int(11) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  `TX_BY_USER_NO` int(11) DEFAULT NULL,
  `ATTACHEMENT_PATH` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_BANK_RECONCILATION_ACC_PAYMENT_BANK_ACC` (`F_BANK_ACCOUNT_NO`),
  CONSTRAINT `fk_ACC_BANK_RECONCILATION_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_BANK_ACCOUNT_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_TXN` */

DROP TABLE IF EXISTS `ACC_BANK_TXN`;

CREATE TABLE `ACC_BANK_TXN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `TXN_REF` varchar(200) DEFAULT NULL,
  `TXN_TYPE_IN_OUT` int(11) DEFAULT NULL,
  `TXN_DATE` date DEFAULT NULL,
  `AMOUNT_ACTUAL` float DEFAULT 0,
  `AMOUNT_BUFFER` float DEFAULT 0,
  `IS_CUS_RESELLER_BANK_RECONCILATION` int(11) DEFAULT NULL COMMENT '1=customer, 2=reseller,3=bankstatement',
  `F_ACC_PAYMENT_BANK_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `F_BANK_RECONCILATION_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_NO` int(11) DEFAULT NULL,
  `F_RESELLER_PAYMENT_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `IS_MATCHED` tinyint(4) DEFAULT 0,
  `MATCHED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `PAYMENT_TYPE` int(1) DEFAULT 1 COMMENT '1=payment,2=refund',
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_BANK_TXN_ACC_BANK_RECONCILATION` (`F_BANK_RECONCILATION_NO`),
  KEY `fk_ACC_BANK_TXN_ACC_CUSTOMER_PAYMENTS` (`F_CUSTOMER_PAYMENT_NO`),
  KEY `fk_ACC_BANK_TXN_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_BANK_TXN_ACC_PAYMENT_BANK_ACC` (`F_ACC_PAYMENT_BANK_NO`),
  KEY `fk_ACC_BANK_TXN_ACC_RESELLER_PAYMENTS` (`F_RESELLER_PAYMENT_NO`),
  KEY `fk_ACC_BANK_TXN_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_ACC_BANK_TXN_SLS_RESELLERS` (`F_RESELLER_NO`),
  CONSTRAINT `fk_ACC_BANK_TXN_ACC_BANK_RECONCILATION` FOREIGN KEY (`F_BANK_RECONCILATION_NO`) REFERENCES `ACC_BANK_RECONCILATION` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_ACC_CUSTOMER_PAYMENTS` FOREIGN KEY (`F_CUSTOMER_PAYMENT_NO`) REFERENCES `ACC_CUSTOMER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_ACC_PAYMENT_BANK_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_ACC_RESELLER_PAYMENTS` FOREIGN KEY (`F_RESELLER_PAYMENT_NO`) REFERENCES `ACC_RESELLER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_SLS_RESELLERS` FOREIGN KEY (`F_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3373 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_TXN_STATEMENT` */

DROP TABLE IF EXISTS `ACC_BANK_TXN_STATEMENT`;

CREATE TABLE `ACC_BANK_TXN_STATEMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ACC_BANK_PAYMENT_NO` int(11) DEFAULT NULL,
  `TXN_DATE` date DEFAULT NULL,
  `TXN_REF` varchar(40) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  `DR_AMOUNT` decimal(10,2) DEFAULT 0.00,
  `CR_AMOUNT` decimal(10,2) DEFAULT 0.00,
  `IS_MATCHED` int(11) DEFAULT NULL,
  `MATCHED_ON` datetime DEFAULT NULL,
  `F_ACC_BANK_TXN_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `USED_REASON` varchar(200) DEFAULT NULL,
  `IS_DRAFT` tinyint(1) DEFAULT 1,
  `IS_VARIFIED` tinyint(1) DEFAULT 0,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(3) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(3) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `MARK_AS_USED` tinyint(4) DEFAULT 0,
  `F_ACC_BANK_STMT_MASTER_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN` (`F_ACC_BANK_TXN_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_PAYMENT_BANK_ACC` (`F_ACC_BANK_PAYMENT_NO`),
  KEY `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN_STATEMENT_MASTER` (`F_ACC_BANK_STMT_MASTER_NO`),
  FULLTEXT KEY `NARRATION` (`NARRATION`),
  FULLTEXT KEY `NARRATION_2` (`NARRATION`),
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN` FOREIGN KEY (`F_ACC_BANK_TXN_NO`) REFERENCES `ACC_BANK_TXN` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_BANK_TXN_STATEMENT_MASTER` FOREIGN KEY (`F_ACC_BANK_STMT_MASTER_NO`) REFERENCES `ACC_BANK_TXN_STATEMENT_MASTER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_BANK_TXN_STATEMENT_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_ACC_BANK_PAYMENT_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=5750 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_BANK_TXN_STATEMENT_MASTER` */

DROP TABLE IF EXISTS `ACC_BANK_TXN_STATEMENT_MASTER`;

CREATE TABLE `ACC_BANK_TXN_STATEMENT_MASTER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `UPLOAD_DATE` datetime DEFAULT NULL,
  `UPLOAD_TXN_REF` varchar(40) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  `DR_AMOUNT` float DEFAULT 0,
  `CR_AMOUNT` float DEFAULT 0,
  `IS_MATCHED` int(11) DEFAULT NULL,
  `F_PAYMENT_ACC_BANK_NO` int(11) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(3) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(3) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_bank_txn_statement_master` (`UPLOAD_TXN_REF`),
  UNIQUE KEY `u_acc_bank_txn_statement_master_c` (`CODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_COURIER_BILL` */

DROP TABLE IF EXISTS `ACC_COURIER_BILL`;

CREATE TABLE `ACC_COURIER_BILL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_COURIER_NO` int(11) DEFAULT NULL,
  `TRACKING_NO` varchar(20) DEFAULT NULL,
  `AMOUNT` float DEFAULT NULL,
  `PARCEL_DATE` datetime DEFAULT NULL,
  `BATCH_NO` int(11) DEFAULT NULL,
  `DATE_FROM` date DEFAULT NULL,
  `DATE_TO` date DEFAULT NULL,
  `IS_USED` int(11) DEFAULT NULL,
  `F_SC_DISPATCH_DETAILS_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_COURIER_BILL_SC_COURIER` (`F_COURIER_NO`),
  CONSTRAINT `fk_ACC_COURIER_BILL_SC_COURIER` FOREIGN KEY (`F_COURIER_NO`) REFERENCES `SC_COURIER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_CUSTOMER_PAYMENTS` */

DROP TABLE IF EXISTS `ACC_CUSTOMER_PAYMENTS`;

CREATE TABLE `ACC_CUSTOMER_PAYMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `CUSTOMER_CELL` varchar(40) DEFAULT NULL,
  `F_PAYMENT_CURRENCY_NO` int(11) DEFAULT NULL,
  `CURRENCY_NAME` varchar(10) DEFAULT NULL,
  `CONVERSION_RATE_TO_MR` float DEFAULT 0,
  `MR_AMOUNT` float DEFAULT 0,
  `PAYMENT_REMAINING_MR` float DEFAULT 0,
  `REFUND_MR` float DEFAULT 0,
  `REFUND_MAPING` varchar(200) DEFAULT NULL COMMENT 'payment refunds',
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_BANK_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_ACCOUNT_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `PAYMENT_CONFIRMED_STATUS` int(11) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(200) DEFAULT NULL,
  `PAYMENT_NOTE` varchar(200) DEFAULT NULL,
  `PAID_BY` varchar(40) DEFAULT NULL,
  `SLIP_NUMBER` varchar(40) DEFAULT NULL,
  `PAYMENT_DATE` date DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `PAYMENT_TYPE` int(1) DEFAULT 1 COMMENT '1=payment,2=refund,3=fake payment by AM when item return',
  `F_ACC_CUST_RES_REFUND_REQUEST_NO` int(11) DEFAULT NULL,
  `F_BOOKING_NO_FOR_PAYMENT_TYPE3` int(11) DEFAULT NULL COMMENT 'returned payment for f_booking_no',
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_customer_payments` (`SLIP_NUMBER`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_ACC_PAYMENT_BANK_ACC` (`F_PAYMENT_ACC_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_ACC_CUSTOMER_PAYMENTS_SS_CURRENCY` (`F_PAYMENT_CURRENCY_NO`),
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_PAYMENT_ACC_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUSTOMER_PAYMENTS_SS_CURRENCY` FOREIGN KEY (`F_PAYMENT_CURRENCY_NO`) REFERENCES `SS_CURRENCY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3448 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_CUSTOMER_PAYMENT_METHOD` */

DROP TABLE IF EXISTS `ACC_CUSTOMER_PAYMENT_METHOD`;

CREATE TABLE `ACC_CUSTOMER_PAYMENT_METHOD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `METHOD_PREFIX` varchar(20) DEFAULT NULL,
  `METHOD_NAME` varchar(100) DEFAULT NULL,
  `METHOD_FEE` float DEFAULT NULL,
  `METHOD_FEE_PERCENTAGE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_customer_payment_method` (`METHOD_PREFIX`),
  UNIQUE KEY `u_acc_customer_payment_method_mn` (`METHOD_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_CUST_RES_REFUND_REQUEST` */

DROP TABLE IF EXISTS `ACC_CUST_RES_REFUND_REQUEST`;

CREATE TABLE `ACC_CUST_RES_REFUND_REQUEST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `MR_AMOUNT` float DEFAULT 0,
  `IS_CUSTOMER` int(1) DEFAULT 1,
  `REQUEST_NOTE` varchar(200) DEFAULT NULL,
  `REQUEST_BY` int(4) DEFAULT NULL,
  `REQUEST_BY_NAME` varchar(50) DEFAULT NULL,
  `REQUEST_DATE` date DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `STATUS` int(1) DEFAULT 0,
  `F_ACC_BANK_LIST_NO` int(2) DEFAULT NULL,
  `REQ_BANK_NAME` varchar(100) DEFAULT NULL,
  `REQ_BANK_ACC_NAME` varchar(100) DEFAULT NULL,
  `REQ_BANK_ACC_NO` varchar(100) DEFAULT NULL,
  `F_ACC_BANK_LIST_NO_REFUNDED` int(2) DEFAULT NULL,
  `REFUNDED_BANK_NAME` varchar(100) DEFAULT NULL,
  `REFUNDED_BANK_ACC_NAME` varchar(100) DEFAULT NULL,
  `REFUNDED_BANK_ACC_NO` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_CUST_RES_REFUND_REQUEST_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_ACC_CUST_RES_REFUND_REQUEST_S` (`F_RESELLER_NO`),
  CONSTRAINT `fk_ACC_CUST_RES_REFUND_REQUEST_S` FOREIGN KEY (`F_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_CUST_RES_REFUND_REQUEST_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_ORDER_PAYMENT` */

DROP TABLE IF EXISTS `ACC_ORDER_PAYMENT`;

CREATE TABLE `ACC_ORDER_PAYMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ORDER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NO` int(11) DEFAULT NULL,
  `RESELLER_NO` int(11) DEFAULT NULL,
  `IS_CUSTOMER` int(11) DEFAULT NULL,
  `F_ACC_CUSTOMER_PAYMENT_NO` int(11) DEFAULT NULL,
  `F_ACC_RESELLER_PAYMENT_NO` int(11) DEFAULT NULL,
  `PAYMENT_AMOUNT` float DEFAULT 0,
  `IS_PAYMENT_FROM_BALANCE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_ACC_CUSTOMER_PAYMENTS` (`F_ACC_CUSTOMER_PAYMENT_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_ACC_RESELLER_PAYMENTS` (`F_ACC_RESELLER_PAYMENT_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_SLS_CUSTOMERS` (`CUSTOMER_NO`),
  KEY `fk_ACC_ORDER_PAYMENT_SLS_RESELLERS` (`RESELLER_NO`),
  CONSTRAINT `fk_ACC_ORDER_PAYMENT_ACC_CUSTOMER_PAYMENTS` FOREIGN KEY (`F_ACC_CUSTOMER_PAYMENT_NO`) REFERENCES `ACC_CUSTOMER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_ORDER_PAYMENT_ACC_RESELLER_PAYMENTS` FOREIGN KEY (`F_ACC_RESELLER_PAYMENT_NO`) REFERENCES `ACC_RESELLER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_ORDER_PAYMENT_SLS_CUSTOMERS` FOREIGN KEY (`CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_ORDER_PAYMENT_SLS_RESELLERS` FOREIGN KEY (`RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3440 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PARTY_PAYMENT_METHOD` */

DROP TABLE IF EXISTS `ACC_PARTY_PAYMENT_METHOD`;

CREATE TABLE `ACC_PARTY_PAYMENT_METHOD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `METHOD_PREFIX` varchar(20) DEFAULT NULL,
  `METHOD_NAME` varchar(100) DEFAULT NULL,
  `METHOD_FEE` float DEFAULT NULL,
  `METHOD_FEE_PERCENTAGE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_party_payment_method` (`METHOD_PREFIX`),
  UNIQUE KEY `u_acc_party_payment_method_mn` (`METHOD_NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_ACC_HEAD` */

DROP TABLE IF EXISTS `ACC_PAYMENT_ACC_HEAD`;

CREATE TABLE `ACC_PAYMENT_ACC_HEAD` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ACC_HEAD` int(11) DEFAULT NULL,
  `ACC_HEAD_NAME` varchar(200) DEFAULT NULL,
  `F_PARENT_ACC_HEAD_NO` int(11) DEFAULT NULL,
  `NARRATION` varchar(255) NOT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_PAYMENT_ACC_HEAD_ACC_PAYMENT_ACC_HEAD` (`F_PARENT_ACC_HEAD_NO`),
  CONSTRAINT `fk_ACC_PAYMENT_ACC_HEAD_ACC_PAYMENT_ACC_HEAD` FOREIGN KEY (`F_PARENT_ACC_HEAD_NO`) REFERENCES `ACC_PAYMENT_ACC_HEAD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_BANK_ACC` */

DROP TABLE IF EXISTS `ACC_PAYMENT_BANK_ACC`;

CREATE TABLE `ACC_PAYMENT_BANK_ACC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `BANK_NAME` varchar(40) DEFAULT NULL,
  `BANK_ACC_NAME` varchar(40) DEFAULT NULL,
  `BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `BALANCE_ACTUAL` float DEFAULT 0,
  `BALACNE_BUFFER` float DEFAULT 0,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  `F_USER_NO` int(4) DEFAULT NULL,
  `F_INV_ZONE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_payment_bank_acc` (`BANK_NAME`,`BANK_ACC_NAME`,`BANK_ACC_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_BANK_ACC_EXFER` */

DROP TABLE IF EXISTS `ACC_PAYMENT_BANK_ACC_EXFER`;

CREATE TABLE `ACC_PAYMENT_BANK_ACC_EXFER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_I_ACC_PAYMENT_BANK_ACC_NO` int(11) NOT NULL,
  `F_ACC_BANK_TXN` int(11) DEFAULT NULL,
  `ENTERED_MR_AMOUNT` float NOT NULL,
  `IS_IN` int(1) DEFAULT NULL,
  `F_ACC_PARTY_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `ACC_PARTY_PAYMENT_METHOD` varchar(20) DEFAULT NULL,
  `F_ACC_PAYMENT_ACC_HEAD_NO` int(11) DEFAULT NULL,
  `ACK_MR_AMOUNT` float DEFAULT NULL,
  `IS_VERIFIED` int(1) DEFAULT 0,
  `F_VERIFIED_BY_SA_USER_NO` int(11) DEFAULT NULL,
  `NARRATION` varchar(255) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(255) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_BANK_ACC_IXFER` */

DROP TABLE IF EXISTS `ACC_PAYMENT_BANK_ACC_IXFER`;

CREATE TABLE `ACC_PAYMENT_BANK_ACC_IXFER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_FROM_ACC_PAYMENT_BANK_ACC_NO` int(11) NOT NULL,
  `F_TO_ACC_PAYMENT_BANK_ACC_NO` int(11) NOT NULL,
  `F_FROM_ACC_BANK_TXN` int(11) DEFAULT NULL,
  `F_TO_ACC_BANK_TXN` int(11) DEFAULT NULL,
  `ENTERED_MR_AMOUNT` float NOT NULL,
  `F_ACC_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `ACC_CUSTOMER_PAYMENT_METHOD` varchar(20) DEFAULT NULL,
  `ACK_MR_AMOUNT` float NOT NULL,
  `IS_VERIFIED` int(1) DEFAULT 0,
  `F_VERIFIED_BY_SA_USER_NO` int(11) DEFAULT NULL,
  `NARRATION` varchar(255) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(255) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `SS_CREATED_BY` int(11) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(11) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_PAYMENT_METHODS` */

DROP TABLE IF EXISTS `ACC_PAYMENT_METHODS`;

CREATE TABLE `ACC_PAYMENT_METHODS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_ACC_SOURCE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_payment_methods` (`F_ACC_SOURCE_NO`,`NAME`),
  CONSTRAINT `fk_ACC_PAYMENT_METHODS_ACC_PAYMENT_SOURCE` FOREIGN KEY (`F_ACC_SOURCE_NO`) REFERENCES `ACC_PAYMENT_SOURCE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `ACC_PAYMENT_SOURCE` */

DROP TABLE IF EXISTS `ACC_PAYMENT_SOURCE`;

CREATE TABLE `ACC_PAYMENT_SOURCE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(2) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_payment_source` (`CODE`),
  UNIQUE KEY `u_acc_payment_source_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `ACC_RESELLER_CUSTOMER_TX` */

DROP TABLE IF EXISTS `ACC_RESELLER_CUSTOMER_TX`;

CREATE TABLE `ACC_RESELLER_CUSTOMER_TX` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_FROM_RESELLER_NO` int(11) DEFAULT NULL,
  `F_FROM_RESELLER_PAYMENT_NO` int(10) DEFAULT NULL,
  `F_TO_RESELLER_NO` int(11) DEFAULT NULL,
  `F_FROM_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_FROM_CUSTOMER_PAYMENT_NO` int(10) DEFAULT NULL,
  `F_TO_CUSTOMER` int(11) DEFAULT NULL,
  `AMOUNT` float DEFAULT 0,
  `ORDER_TOPUP` float DEFAULT 0,
  `ORDER_TOPUP_SPENT` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_ACC_RESELLER_CUSTOMER_TX_ACC_CUSTOMER_PAYMENTS` (`F_FROM_CUSTOMER_PAYMENT_NO`),
  KEY `fk_ACC_RESELLER_CUSTOMER_TX_ACC_RESELLER_PAYMENTS` (`F_FROM_RESELLER_PAYMENT_NO`),
  KEY `fk_ACC_RESELLER_CUSTOMER_TX_SLS_CUSTOMERS` (`F_TO_CUSTOMER`),
  KEY `fk_ACC_RESELLER_CUSTOMER_TX_SLS_CUSTOMERS_t` (`F_FROM_CUSTOMER_NO`),
  KEY `fk_ACC_RESELLER_CUSTOMER_TX_SLS_RESELLERS` (`F_FROM_RESELLER_NO`),
  KEY `fk_ACC_RESELLER_CUSTOMER_TX_SLS_RESELLERS_t` (`F_TO_RESELLER_NO`),
  CONSTRAINT `fk_ACC_RESELLER_CUSTOMER_TX_ACC_CUSTOMER_PAYMENTS` FOREIGN KEY (`F_FROM_CUSTOMER_PAYMENT_NO`) REFERENCES `ACC_CUSTOMER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_CUSTOMER_TX_ACC_RESELLER_PAYMENTS` FOREIGN KEY (`F_FROM_RESELLER_PAYMENT_NO`) REFERENCES `ACC_RESELLER_PAYMENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_CUSTOMER_TX_SLS_CUSTOMERS` FOREIGN KEY (`F_TO_CUSTOMER`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_CUSTOMER_TX_SLS_CUSTOMERS_t` FOREIGN KEY (`F_FROM_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_CUSTOMER_TX_SLS_RESELLERS` FOREIGN KEY (`F_FROM_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_CUSTOMER_TX_SLS_RESELLERS_t` FOREIGN KEY (`F_TO_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_RESELLER_PAYMENTS` */

DROP TABLE IF EXISTS `ACC_RESELLER_PAYMENTS`;

CREATE TABLE `ACC_RESELLER_PAYMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `RESELLER_NO` int(11) DEFAULT NULL,
  `RESELLER_NAME` varchar(200) DEFAULT NULL,
  `RESELLER_CELL` varchar(40) DEFAULT NULL,
  `F_PAYMENT_CURRENCY_NO` int(11) DEFAULT NULL,
  `CURRENCY_NAME` varchar(10) DEFAULT NULL,
  `CONVERSION_RATE_TO_MR` float DEFAULT 0,
  `MR_AMOUNT` float DEFAULT 0,
  `PAYMENT_REMAINING_MR` float DEFAULT 0,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_BANK_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_ACCOUNT_NAME` varchar(40) DEFAULT NULL,
  `PAYMENT_BANK_ACC_NO` varchar(40) DEFAULT NULL,
  `PAYMENT_CONFIRMED_STATUS` int(11) DEFAULT NULL,
  `ATTACHMENT_PATH` varchar(200) DEFAULT NULL,
  `PAYMENT_NOTE` varchar(200) DEFAULT NULL,
  `PAID_BY` varchar(200) DEFAULT NULL,
  `SLIP_NUMBER` varchar(40) DEFAULT NULL,
  `PAYMENT_DATE` date DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(10) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(2) DEFAULT NULL,
  `F_CUSTOMER_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `IS_COD` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_acc_reseller_payments` (`SLIP_NUMBER`),
  KEY `fk_ACC_RESELLER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` (`F_CUSTOMER_PAYMENT_METHOD_NO`),
  KEY `fk_ACC_RESELLER_PAYMENTS_ACC_PAYMENT_BANK_ACC` (`F_PAYMENT_ACC_NO`),
  KEY `fk_ACC_RESELLER_PAYMENTS_SLS_RESELLERS` (`F_RESELLER_NO`),
  CONSTRAINT `fk_ACC_RESELLER_PAYMENTS_ACC_CUSTOMER_PAYMENT_METHOD` FOREIGN KEY (`F_CUSTOMER_PAYMENT_METHOD_NO`) REFERENCES `ACC_CUSTOMER_PAYMENT_METHOD` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_PAYMENTS_ACC_PAYMENT_BANK_ACC` FOREIGN KEY (`F_PAYMENT_ACC_NO`) REFERENCES `ACC_PAYMENT_BANK_ACC` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_ACC_RESELLER_PAYMENTS_SLS_RESELLERS` FOREIGN KEY (`F_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `ACC_VAT_CLASS` */

DROP TABLE IF EXISTS `ACC_VAT_CLASS`;

CREATE TABLE `ACC_VAT_CLASS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `RATE` float DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ACC_VAT_CLASS` (`CODE`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_STOCK` */

DROP TABLE IF EXISTS `INV_STOCK`;

CREATE TABLE `INV_STOCK` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_INV_STOCK_PRC_STOCK_IN_MAP_NO` int(11) DEFAULT NULL,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_PRC_STOCK_IN_DETAILS_NO` int(11) DEFAULT NULL,
  `IG_CODE` varchar(20) DEFAULT NULL,
  `SKUID` varchar(40) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARINAT_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_NAME` varchar(200) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `INV_WAREHOUSE_NAME` varchar(200) DEFAULT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_BOOKING_DETAILS_NO` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `F_ORDER_DETAILS_NO` int(11) DEFAULT NULL,
  `HS_CODE` varchar(20) DEFAULT NULL,
  `HS_CODE_NARRATION` varchar(200) DEFAULT NULL,
  `F_CATEGORY_NO` int(11) DEFAULT NULL,
  `CATEGORY_NAME` varchar(200) DEFAULT NULL,
  `F_SUB_CATEGORY_NO` int(11) DEFAULT NULL,
  `SUB_CATEGORY_NAME` varchar(200) DEFAULT NULL,
  `BARCODE` varchar(40) DEFAULT NULL,
  `F_BRAND_NO` int(11) DEFAULT NULL,
  `BRAND_NAME` varchar(40) DEFAULT NULL,
  `F_MODEL_NO` int(11) DEFAULT NULL,
  `MODEL_NAME` varchar(200) DEFAULT NULL,
  `PRODUCT_STATUS` int(11) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `PRODUCT_PURCHASE_PRICE_GBP` double DEFAULT NULL,
  `PRODUCT_PURCHASE_PRICE` double DEFAULT NULL,
  `REGULAR_PRICE` double DEFAULT NULL,
  `INSTALLMENT_PRICE` double DEFAULT NULL,
  `ORDER_PRICE` double DEFAULT NULL,
  `PREFERRED_SHIPPING_METHOD` varchar(40) DEFAULT NULL,
  `CUSTOMER_PREFFERED_SHIPPING_METHOD` varchar(100) DEFAULT NULL,
  `FINAL_PREFFERED_SHIPPING_METHOD` varchar(45) DEFAULT NULL,
  `SM_COST` double DEFAULT NULL,
  `SS_COST` double DEFAULT NULL,
  `AIR_FREIGHT_COST` double DEFAULT NULL,
  `SEA_FREIGHT_COST` double DEFAULT NULL,
  `F_SHIPPMENT_NO` int(11) DEFAULT NULL,
  `SHIPMENT_NAME` varchar(200) DEFAULT NULL,
  `SHIPMENT_TYPE` varchar(45) DEFAULT NULL,
  `BOX_BARCODE` varchar(200) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `BOX_TYPE` varchar(45) DEFAULT NULL,
  `PRC_IN_IMAGE_PATH` varchar(200) DEFAULT NULL,
  `PRD_VARIANT_IMAGE_PATH` varchar(200) DEFAULT NULL,
  `F_INV_ZONE_NO` int(11) DEFAULT NULL,
  `INV_ZONE_BARCODE` varchar(200) DEFAULT NULL,
  `ZONE_CHECK_IN_BY` int(11) DEFAULT NULL,
  `ZONE_CHECK_IN_BY_NAME` varchar(100) DEFAULT NULL,
  `ZONE_CHECK_OUT_BY` int(11) DEFAULT NULL,
  `ZONE_CHECK_OUT_BY_NAME` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=25016 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DROP TABLE IF EXISTS `INV_STOCK_PRC_STOCK_IN_MAP`;

CREATE TABLE `INV_STOCK_PRC_STOCK_IN_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `IS_PROCESS_COMPLETE` int(11) DEFAULT NULL,
  `PROCESS_START_TIME` datetime DEFAULT NULL,
  `PROCESS_COMPLETE_TIME` datetime DEFAULT NULL,
  `F_PROCESS_RUN_BY` int(11) DEFAULT NULL,
  `PROCESS_RUN_BY` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_stock_prc_stock_in_map` (`F_PRC_STOCK_IN_NO`),
  KEY `fk_INV_STOCK_PRC_STOCK_IN_MAP_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`),
  CONSTRAINT `fk_INV_STOCK_PRC_STOCK_IN_MAP_INV_WAREHOUSE` FOREIGN KEY (`F_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_INV_STOCK_PRC_STOCK_IN_MAP_PRC_STOCK_IN` FOREIGN KEY (`F_PRC_STOCK_IN_NO`) REFERENCES `PRC_STOCK_IN` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1007 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_WAREHOUSE` */

DROP TABLE IF EXISTS `INV_WAREHOUSE`;

CREATE TABLE `INV_WAREHOUSE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `LOCATION` varchar(200) DEFAULT NULL,
  `ADDRESS` varchar(200) DEFAULT NULL,
  `MANAGER` varchar(200) DEFAULT NULL,
  `CONTACT_PHONE` varchar(50) DEFAULT NULL,
  `COUNTRY_NAME` varchar(50) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_warehouse` (`CODE`),
  KEY `fk_INV_WAREHOUSE_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_INV_WAREHOUSE_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_WAREHOUSE_ZONES` */

DROP TABLE IF EXISTS `INV_WAREHOUSE_ZONES`;

CREATE TABLE `INV_WAREHOUSE_ZONES` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ZONE_BARCODE` varchar(20) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(200) DEFAULT NULL,
  `ITEM_COUNT` int(11) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_inv_warehouse_zones` (`CODE`),
  UNIQUE KEY `u_inv_warehouse_zones_bc` (`ZONE_BARCODE`),
  KEY `fk_INV_WAREHOUSE_ZONES_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`),
  CONSTRAINT `fk_INV_WAREHOUSE_ZONES_INV_WAREHOUSE` FOREIGN KEY (`F_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=265 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `INV_WAREHOUSE_ZONE_STOCK_ITEM` */

DROP TABLE IF EXISTS `INV_WAREHOUSE_ZONE_STOCK_ITEM`;

CREATE TABLE `INV_WAREHOUSE_ZONE_STOCK_ITEM` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `F_INV_WAREHOUSE_ZONE_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_STOCK` (`F_INV_STOCK_NO`),
  KEY `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_WAREHOUSE` (`F_INV_WAREHOUSE_ZONE_NO`),
  CONSTRAINT `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_STOCK` FOREIGN KEY (`F_INV_STOCK_NO`) REFERENCES `INV_STOCK` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_INV_WAREHOUSE_ZONE_STOCK_ITEM_INV_WAREHOUSE_ZONES` FOREIGN KEY (`F_INV_WAREHOUSE_ZONE_NO`) REFERENCES `INV_WAREHOUSE_ZONES` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1053 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_IMG_LIBRARY` */

DROP TABLE IF EXISTS `PRC_IMG_LIBRARY`;

CREATE TABLE `PRC_IMG_LIBRARY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN_NO` int(11) DEFAULT NULL,
  `F_FILE_TYPE_NO` int(11) DEFAULT NULL,
  `FILE_EXT` varchar(20) DEFAULT NULL,
  `RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `SERIAL_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_PRC_IMG_LIBRARY_SS_IMG_FILE_TYPE` (`F_FILE_TYPE_NO`),
  KEY `fk_PRC_IMG_LIBRARY_PRC_STOCK_IN` (`F_PRC_STOCK_IN_NO`),
  CONSTRAINT `fk_PRC_IMG_LIBRARY_PRC_STOCK_IN` FOREIGN KEY (`F_PRC_STOCK_IN_NO`) REFERENCES `PRC_STOCK_IN` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_PRC_IMG_LIBRARY_SS_IMG_FILE_TYPE` FOREIGN KEY (`F_FILE_TYPE_NO`) REFERENCES `SS_IMG_FILE_TYPE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=831 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_STOCK_IN` */

DROP TABLE IF EXISTS `PRC_STOCK_IN`;

CREATE TABLE `PRC_STOCK_IN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `INVOICE_NO` varchar(200) DEFAULT NULL,
  `INVOICE_DATE` date DEFAULT NULL,
  `INVOICE_CURRENCY` varchar(20) DEFAULT NULL,
  `F_SS_CURRENCY_NO` int(11) DEFAULT NULL,
  `TOTAL_QTY` int(11) DEFAULT NULL,
  `RECIEVED_QTY` int(11) DEFAULT NULL,
  `FAULTY_QTY` int(11) DEFAULT NULL,
  `DISCOUNT_PERCENTAGE` float DEFAULT 0,
  `DISCOUNT_AMOUNT` float DEFAULT 0,
  `F_VENDOR_NO` int(11) DEFAULT NULL,
  `VENDOR_NAME` varchar(200) DEFAULT NULL,
  `F_PURCHASER_USER_NO` int(11) DEFAULT NULL,
  `PURCHASER_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_EXACT_VALUE` double DEFAULT 0,
  `INVOICE_EXACT_POSTAGE` double DEFAULT 0,
  `INVOICE_EXACT_VAT` double DEFAULT 0,
  `INVOICE_TOTAL_EV_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_MR` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_GBP` double DEFAULT NULL,
  `INVOICE_TOTAL_EV_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_TOTAL_VAT_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_TOTAL_ACTUAL_AC` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT` double DEFAULT NULL,
  `INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT` double DEFAULT NULL,
  `INVOICE_POSTAGE_ACTUAL_AC` double DEFAULT NULL,
  `HAS_VAT_REFUND` int(11) DEFAULT NULL,
  `VAT_CLAIMED` int(11) DEFAULT 0,
  `GBP_TO_MR_RATE` float DEFAULT NULL,
  `GBP_TO_AC_RATE` float DEFAULT NULL,
  `HAS_LOYALTY` int(11) DEFAULT NULL,
  `LOYALTY_CLAIMED` int(11) DEFAULT NULL,
  `MASTER_INVOICE_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `INV_STOCK_RECORD_GENERATED` int(11) DEFAULT 0,
  `DISCOUNT2_PERCENTAGE` float DEFAULT 0,
  `DISCOUNT2_AMOUNT` float DEFAULT 0,
  `F_PAYMENT_SOURCE_NO` int(11) DEFAULT NULL,
  `PAYMENT_SOURCE_NAME` varchar(100) DEFAULT NULL,
  `F_PAYMENT_ACC_NO` int(11) DEFAULT NULL,
  `PAYMENT_ACC_NAME` varchar(100) DEFAULT NULL,
  `F_PAYMENT_METHOD_NO` int(11) DEFAULT NULL,
  `PAYMENT_METHOD_NAME` varchar(100) DEFAULT NULL,
  `IS_QUICK_BOOK_ENTERED` tinyint(4) DEFAULT NULL,
  `F_PARENT_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `F_CHILD_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(255) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SETTLEMENT_AMT` int(11) DEFAULT NULL,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_stock_in` (`CODE`),
  UNIQUE KEY `u_prc_stock_in_INV_UQ` (`INVOICE_NO`,`INVOICE_DATE`,`F_VENDOR_NO`),
  KEY `fk_PRC_STOCK_IN_PRC_VENDORS` (`F_VENDOR_NO`),
  KEY `fk_PRC_STOCK_IN_SS_CURRENCY` (`F_SS_CURRENCY_NO`),
  CONSTRAINT `fk_PRC_STOCK_IN_PRC_VENDORS` FOREIGN KEY (`F_VENDOR_NO`) REFERENCES `PRC_VENDORS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRC_STOCK_IN_SS_CURRENCY` FOREIGN KEY (`F_SS_CURRENCY_NO`) REFERENCES `SS_CURRENCY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=994 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_STOCK_IN_DETAILS` */

DROP TABLE IF EXISTS `PRC_STOCK_IN_DETAILS`;

CREATE TABLE `PRC_STOCK_IN_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRC_STOCK_IN` int(11) DEFAULT NULL,
  `CODE` int(10) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `INVOICE_NAME` varchar(200) DEFAULT NULL,
  `HS_CODE` varchar(20) DEFAULT NULL,
  `BAR_CODE` varchar(200) DEFAULT NULL,
  `UNIT_PRICE_MR_EV` double DEFAULT NULL,
  `UNIT_VAT_MR` double DEFAULT NULL,
  `LINE_TOTAL_VAT_MR` double DEFAULT NULL,
  `SUB_TOTAL_MR_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_MR_EV` double DEFAULT NULL,
  `REC_TOTAL_MR_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_MR_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_GBP_EV` double DEFAULT NULL,
  `UNIT_VAT_GBP` double DEFAULT NULL,
  `LINE_TOTAL_VAT_GBP` double DEFAULT NULL,
  `SUB_TOTAL_GBP_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_GBP_EV` double DEFAULT NULL,
  `REC_TOTAL_GBP_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_GBP_ONLY_VAT` double DEFAULT NULL,
  `UNIT_PRICE_AC_EV` double DEFAULT NULL,
  `UNIT_VAT_AC` double DEFAULT NULL,
  `LINE_TOTAL_VAT_AC` double DEFAULT NULL,
  `SUB_TOTAL_AC_RECEIPT` double DEFAULT NULL,
  `SUB_TOTAL_AC_EV` double DEFAULT NULL,
  `REC_TOTAL_AC_WITH_VAT` double DEFAULT NULL,
  `REC_TOTAL_AC_ONLY_VAT` double DEFAULT NULL,
  `QTY` int(11) NOT NULL,
  `RECIEVED_QTY` int(11) NOT NULL,
  `FAULTY_QTY` int(11) NOT NULL,
  `F_VAT_CLASS_NO` int(11) DEFAULT NULL,
  `VAT_RATE` int(11) DEFAULT NULL,
  `CURRENCY` varchar(20) DEFAULT NULL,
  `SERIAL_NO` varchar(2000) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_stock_in_details` (`CODE`),
  KEY `fk_PRC_STOCK_IN_DETAILS_ACC_VAT_CLASS` (`F_VAT_CLASS_NO`),
  KEY `fk_PRC_STOCK_IN_DETAILS_PRD_VARIANT_SETUP` (`F_PRD_VARIANT_NO`),
  KEY `fk_PRC_STOCK_IN_DETAILS_PRC_STOCK_IN` (`F_PRC_STOCK_IN`),
  CONSTRAINT `fk_PRC_STOCK_IN_DETAILS_ACC_VAT_CLASS` FOREIGN KEY (`F_VAT_CLASS_NO`) REFERENCES `ACC_VAT_CLASS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRC_STOCK_IN_DETAILS_PRC_STOCK_IN` FOREIGN KEY (`F_PRC_STOCK_IN`) REFERENCES `PRC_STOCK_IN` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_PRC_STOCK_IN_DETAILS_PRD_VARIANT_SETUP` FOREIGN KEY (`F_PRD_VARIANT_NO`) REFERENCES `PRD_VARIANT_SETUP` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4624 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRC_VENDORS` */

DROP TABLE IF EXISTS `PRC_VENDORS`;

CREATE TABLE `PRC_VENDORS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `ADDRESS` varchar(200) DEFAULT NULL,
  `PHONE` varchar(100) DEFAULT NULL,
  `F_COUNTRY` int(11) DEFAULT NULL,
  `COUNTRY` varchar(100) DEFAULT NULL,
  `F_ACC_CODE` varchar(100) DEFAULT NULL,
  `ACC_CODE` varchar(100) DEFAULT NULL,
  `HAS_LOYALITY` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prc_vendors` (`CODE`),
  KEY `fk_PRC_VENDORS_SS_COUNTRY` (`F_COUNTRY`),
  CONSTRAINT `fk_PRC_VENDORS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8mb4;

/*Table structure for table `PRD_BRAND` */

DROP TABLE IF EXISTS `PRD_BRAND`;

CREATE TABLE `PRD_BRAND` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(100) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_FEATURE` int(1) DEFAULT 0,
  `BRAND_LOGO` varchar(100) DEFAULT NULL,
  `SLUG` varchar(100) DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_brand_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=138 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='Brand Master Setup Table';

/*Table structure for table `PRD_CATEGORY` */

DROP TABLE IF EXISTS `PRD_CATEGORY`;

CREATE TABLE `PRD_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `HS_PREFIX` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `URL_SLUG` varchar(100) DEFAULT NULL,
  `THUMBNAIL_PATH` varchar(100) DEFAULT NULL,
  `BANNER_PATH` varchar(100) DEFAULT NULL,
  `ICON` varchar(100) DEFAULT NULL,
  `META_TITLE` varchar(100) DEFAULT NULL,
  `META_KEYWARDS` varchar(100) DEFAULT NULL,
  `META_DESCRIPTION` varchar(200) DEFAULT NULL,
  `IS_FEATURE` tinyint(4) DEFAULT 0,
  `ORDER_ID` int(3) DEFAULT NULL,
  `TOTAL_VARIANT` int(4) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `CODE` (`CODE`),
  UNIQUE KEY `u_prd_category_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='CATEGORY Master Setup Table';

/*Table structure for table `PRD_COLOR` */

DROP TABLE IF EXISTS `PRD_COLOR`;

CREATE TABLE `PRD_COLOR` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(3) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `F_BRAND` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_color` (`CODE`,`F_BRAND`),
  UNIQUE KEY `u_prd_color_uk` (`F_BRAND`,`NAME`),
  KEY `fk_PRD_COLOR_PRD_BRAND` (`F_BRAND`),
  CONSTRAINT `fk_PRD_COLOR_PRD_BRAND` FOREIGN KEY (`F_BRAND`) REFERENCES `PRD_BRAND` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1439 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='Size Master Setup Table';

/*Table structure for table `PRD_HS_CODE` */

DROP TABLE IF EXISTS `PRD_HS_CODE`;

CREATE TABLE `PRD_HS_CODE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_SUB_CATEGORY_NO` int(11) DEFAULT NULL,
  `CODE` varchar(80) DEFAULT NULL,
  `NARRATION` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_hs_code` (`F_PRD_SUB_CATEGORY_NO`,`CODE`),
  CONSTRAINT `fk_PRD_HS_CODE_password_resets` FOREIGN KEY (`F_PRD_SUB_CATEGORY_NO`) REFERENCES `PRD_SUB_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=83 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_IMG_LIBRARY` */

DROP TABLE IF EXISTS `PRD_IMG_LIBRARY`;

CREATE TABLE `PRD_IMG_LIBRARY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `IS_MASTER` int(11) DEFAULT NULL,
  `F_FILE_TYPE` int(11) DEFAULT NULL,
  `FILE_EXT` varchar(20) DEFAULT NULL,
  `THUMB_PATH` varchar(200) DEFAULT NULL,
  `RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `SERIAL_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_PRD_IMG_LIBRARY_PRD_MASTER_SETUP` (`F_PRD_MASTER_NO`),
  KEY `fk_PRD_IMG_LIBRARY_PRD_VARIANT_SETUP` (`F_PRD_VARIANT_NO`),
  KEY `fk_PRD_IMG_LIBRARY_SS_IMG_FILE_TYPE` (`F_FILE_TYPE`),
  CONSTRAINT `fk_PRD_IMG_LIBRARY_PRD_MASTER_SETUP` FOREIGN KEY (`F_PRD_MASTER_NO`) REFERENCES `PRD_MASTER_SETUP` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_IMG_LIBRARY_PRD_VARIANT_SETUP` FOREIGN KEY (`F_PRD_VARIANT_NO`) REFERENCES `PRD_VARIANT_SETUP` (`PK_NO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_IMG_LIBRARY_SS_IMG_FILE_TYPE` FOREIGN KEY (`F_FILE_TYPE`) REFERENCES `SS_IMG_FILE_TYPE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3958 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_MASTER_SETUP` */

DROP TABLE IF EXISTS `PRD_MASTER_SETUP`;

CREATE TABLE `PRD_MASTER_SETUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_SUB_CATEGORY_ID` int(11) DEFAULT NULL,
  `F_PRD_CATEGORY_ID` int(3) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `COMPOSITE_CODE` varchar(100) DEFAULT NULL,
  `DEFAULT_NAME` varchar(200) DEFAULT NULL,
  `DEFAULT_CUSTOMS_NAME` varchar(200) DEFAULT NULL,
  `DEFAULT_HS_CODE` varchar(20) DEFAULT NULL,
  `F_BRAND` int(11) DEFAULT NULL,
  `BRAND_NAME` varchar(100) DEFAULT NULL,
  `F_MODEL` int(11) DEFAULT NULL,
  `MODEL_NAME` varchar(100) DEFAULT NULL,
  `MKT_CODE` int(4) DEFAULT NULL,
  `MKT_ID_COMPOSITE_CODE_PREFIX` varchar(80) DEFAULT NULL,
  `DEFAULT_PRICE` float DEFAULT NULL,
  `DEFAULT_INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_BARCODE_BY_MFG` int(11) DEFAULT NULL,
  `PRIMARY_IMG_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `DEFAULT_NARRATION` varchar(2000) DEFAULT NULL,
  `F_DEFAULT_VAT_CLASS` int(11) DEFAULT NULL,
  `DEFAULT_VAT_AMOUNT_PERCENT` float DEFAULT NULL,
  `DEFAULT_SEA_FREIGHT_CHARGE` float DEFAULT NULL,
  `DEFAULT_AIR_FREIGHT_CHARGE` float DEFAULT NULL,
  `DEFAULT_PREFERRED_SHIPPING_METHOD` enum('AIR','SEA') DEFAULT NULL,
  `DEFAULT_LOCAL_POSTAGE` float DEFAULT NULL,
  `DEFAULT_INTERDISTRICT_POSTAGE` float DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `URL_SLUG` varchar(50) DEFAULT NULL,
  `IS_FEATURE` int(1) DEFAULT 0,
  `NEW_ARRIVAL` int(1) DEFAULT NULL,
  `META_TITLE` varchar(200) DEFAULT NULL,
  `META_KEYWARDS` varchar(200) DEFAULT NULL,
  `META_DESCRIPTION` varchar(200) DEFAULT NULL,
  `MAX_ORDER` int(3) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_PRD_MASTER_SETUP_cc` (`CODE`,`F_PRD_SUB_CATEGORY_ID`),
  UNIQUE KEY `u_PRD_MASTER_SETUP` (`COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_master_setup_mkt_id` (`MKT_ID_COMPOSITE_CODE_PREFIX`),
  UNIQUE KEY `u_prd_master_setup_brand_model_code` (`MKT_CODE`,`F_BRAND`,`F_MODEL`),
  UNIQUE KEY `u_prd_master_setup_brand_model` (`F_BRAND`,`F_MODEL`,`DEFAULT_NAME`),
  UNIQUE KEY `u_prd_master_setup_name` (`F_PRD_SUB_CATEGORY_ID`,`DEFAULT_NAME`,`F_BRAND`,`F_MODEL`),
  KEY `fk_PRD_MASTER_SETUP_PRD_SUB_CATEGORY` (`F_PRD_SUB_CATEGORY_ID`),
  KEY `fk_PRD_MASTER_SETUP_PRD_BRAND` (`F_BRAND`),
  KEY `fk_PRD_MASTER_SETUP_PRD_MODEL` (`F_MODEL`),
  KEY `fk_PRD_MASTER_SETUP_ACC_VAT_CLASS` (`F_DEFAULT_VAT_CLASS`),
  CONSTRAINT `fk_PRD_MASTER_SETUP_ACC_VAT_CLASS` FOREIGN KEY (`F_DEFAULT_VAT_CLASS`) REFERENCES `ACC_VAT_CLASS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_MASTER_SETUP_PRD_BRAND` FOREIGN KEY (`F_BRAND`) REFERENCES `PRD_BRAND` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_MASTER_SETUP_PRD_MODEL` FOREIGN KEY (`F_MODEL`) REFERENCES `PRD_MODEL` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_MASTER_SETUP_PRD_SUB_CATEGORY` FOREIGN KEY (`F_PRD_SUB_CATEGORY_ID`) REFERENCES `PRD_SUB_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=1033 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `PRD_MODEL` */

DROP TABLE IF EXISTS `PRD_MODEL`;

CREATE TABLE `PRD_MODEL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_BRAND_NO` int(11) DEFAULT NULL,
  `CODE` varchar(50) DEFAULT NULL,
  `COMPOSITE_CODE` varchar(50) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `PRD_MODELcol` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_model_uk` (`F_PRD_BRAND_NO`,`NAME`),
  KEY `fk_PRD_MODEL_PRD_BRAND` (`F_PRD_BRAND_NO`),
  CONSTRAINT `fk_PRD_MODEL_PRD_BRAND` FOREIGN KEY (`F_PRD_BRAND_NO`) REFERENCES `PRD_BRAND` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=858 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='Model Master Setup Table';

/*Table structure for table `PRD_SIZE` */

DROP TABLE IF EXISTS `PRD_SIZE`;

CREATE TABLE `PRD_SIZE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `F_BRAND_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_prd_size` (`CODE`,`F_BRAND_NO`),
  UNIQUE KEY `u_prd_size_uk` (`F_BRAND_NO`,`NAME`),
  KEY `fk_PRD_SIZE_PRD_BRAND` (`F_BRAND_NO`),
  CONSTRAINT `fk_PRD_SIZE_PRD_BRAND` FOREIGN KEY (`F_BRAND_NO`) REFERENCES `PRD_BRAND` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=874 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='Size Master Setup Table';

/*Table structure for table `PRD_SUB_CATEGORY` */

DROP TABLE IF EXISTS `PRD_SUB_CATEGORY`;

CREATE TABLE `PRD_SUB_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_CATEGORY_NO` int(11) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `COMPOSITE_CODE` varchar(80) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `HS_PREFIX` varchar(200) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `URL_SLUG` varchar(100) DEFAULT NULL,
  `ORDER_ID` int(3) DEFAULT NULL,
  `BANNER_PATH` varchar(100) DEFAULT NULL,
  `THUMBNAIL_PATH` varchar(100) DEFAULT NULL,
  `ICON` varchar(100) DEFAULT NULL,
  `META_TITLE` varchar(100) DEFAULT NULL,
  `META_KEYWARDS` varchar(100) DEFAULT NULL,
  `META_DESCRIPTION` varchar(200) DEFAULT NULL,
  `IS_FEATURE` tinyint(4) DEFAULT 0,
  `TOTAL_VARIANT` int(4) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_PRD_SUB_CATEGORY` (`CODE`,`F_PRD_CATEGORY_NO`),
  UNIQUE KEY `u_PRD_SUB_CATEGORY_cc` (`COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_sub_category_cat_name` (`F_PRD_CATEGORY_NO`,`NAME`),
  KEY `fk_PRD_SUB_CATEGORY_PRD_CATEGORY` (`F_PRD_CATEGORY_NO`),
  CONSTRAINT `fk_PRD_SUB_CATEGORY_PRD_CATEGORY` FOREIGN KEY (`F_PRD_CATEGORY_NO`) REFERENCES `PRD_CATEGORY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=71 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='SUB_CATEGORY Master Setup Table';

/*Table structure for table `PRD_VARIANT_SETUP` */

DROP TABLE IF EXISTS `PRD_VARIANT_SETUP`;

CREATE TABLE `PRD_VARIANT_SETUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_SETUP_NO` int(11) DEFAULT NULL,
  `CODE` int(4) DEFAULT NULL,
  `COMPOSITE_CODE` varchar(160) DEFAULT NULL,
  `VARIANT_NAME` varchar(200) DEFAULT NULL,
  `VARIANT_CUSTOMS_NAME` varchar(200) DEFAULT NULL,
  `F_SIZE_NO` int(16) DEFAULT NULL,
  `SIZE_NAME` varchar(100) DEFAULT NULL,
  `F_COLOR_NO` int(11) DEFAULT NULL,
  `COLOR` varchar(100) DEFAULT NULL,
  `MKT_CODE` int(4) DEFAULT NULL,
  `MRK_ID_COMPOSITE_CODE` varchar(124) DEFAULT NULL,
  `HS_CODE` varchar(100) DEFAULT NULL,
  `BARCODE` varchar(100) DEFAULT NULL,
  `IS_BARCODE_BY_MFG` int(11) DEFAULT NULL,
  `NARRATION` text DEFAULT NULL,
  `F_PRIMARY_IMG_VARIANT_ID` int(11) DEFAULT NULL,
  `PRIMARY_IMG_RELATIVE_PATH` varchar(200) DEFAULT NULL,
  `REGULAR_PRICE` float DEFAULT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `SEA_FREIGHT_CHARGE` float DEFAULT NULL,
  `AIR_FREIGHT_CHARGE` float DEFAULT NULL,
  `PREFERRED_SHIPPING_METHOD` enum('AIR','SEA') DEFAULT NULL,
  `LOCAL_POSTAGE` float DEFAULT NULL COMMENT 'sm price',
  `INTER_DISTRICT_POSTAGE` float DEFAULT NULL COMMENT 'ss price',
  `F_VAT_CLASS` int(11) DEFAULT NULL,
  `VAT_AMOUNT_PERCENT` float DEFAULT NULL,
  `IS_RESELLER_PROGRAM_ENABLED` int(11) DEFAULT NULL,
  `KEYWORD_SEARCH` varchar(4000) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `WEB_ARTICLE` varchar(255) DEFAULT NULL,
  `URL_SLUG` varchar(255) DEFAULT NULL,
  `SHORT_NARRATION` text DEFAULT NULL,
  `PROMOTIONAL_MESSAGE` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_PRD_VARIANT_SETUP` (`COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_variant_setup_01` (`F_PRD_MASTER_SETUP_NO`,`CODE`),
  UNIQUE KEY `u_prd_variant_setup_mkt_id` (`MRK_ID_COMPOSITE_CODE`),
  UNIQUE KEY `u_prd_variant_setup_mkt_code` (`MKT_CODE`,`F_PRD_MASTER_SETUP_NO`),
  UNIQUE KEY `u_prd_variant_setup_bc` (`BARCODE`),
  UNIQUE KEY `u_prd_variant_setup_color_size` (`F_PRD_MASTER_SETUP_NO`,`F_SIZE_NO`,`F_COLOR_NO`,`MRK_ID_COMPOSITE_CODE`),
  KEY `fk_PRD_VARIANT_SETUP_PRD_SIZE` (`F_SIZE_NO`),
  KEY `fk_PRD_VARIANT_SETUP_PRD_COLOR` (`F_COLOR_NO`),
  KEY `fk_PRD_VARIANT_SETUP_ACC_VAT_CLASS` (`F_VAT_CLASS`),
  KEY `fk_PRD_VARIANT_SETUP_PRD_MASTER_SETUP` (`F_PRD_MASTER_SETUP_NO`),
  CONSTRAINT `fk_PRD_VARIANT_SETUP_ACC_VAT_CLASS` FOREIGN KEY (`F_VAT_CLASS`) REFERENCES `ACC_VAT_CLASS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_VARIANT_SETUP_PRD_COLOR` FOREIGN KEY (`F_COLOR_NO`) REFERENCES `PRD_COLOR` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_VARIANT_SETUP_PRD_MASTER_SETUP` FOREIGN KEY (`F_PRD_MASTER_SETUP_NO`) REFERENCES `PRD_MASTER_SETUP` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_PRD_VARIANT_SETUP_PRD_SIZE` FOREIGN KEY (`F_SIZE_NO`) REFERENCES `PRD_SIZE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2895 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `R` */

DROP TABLE IF EXISTS `R`;

CREATE TABLE `R` (
  `R` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `S` */

DROP TABLE IF EXISTS `S`;

CREATE TABLE `S` (
  `S` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_PERMISSION_GROUP` */

DROP TABLE IF EXISTS `SA_PERMISSION_GROUP`;

CREATE TABLE `SA_PERMISSION_GROUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `STATUS` tinyint(4) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=82 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_PERMISSION_GROUP_DTL` */

DROP TABLE IF EXISTS `SA_PERMISSION_GROUP_DTL`;

CREATE TABLE `SA_PERMISSION_GROUP_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `DISPLAY_NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `F_PERMISSION_GROUP_NO` int(11) NOT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=212 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_ROLE` */

DROP TABLE IF EXISTS `SA_ROLE`;

CREATE TABLE `SA_ROLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_ROLE_DTL` */

DROP TABLE IF EXISTS `SA_ROLE_DTL`;

CREATE TABLE `SA_ROLE_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `PERMISSIONS` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `F_ROLE_NO` int(11) NOT NULL,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_TOKEN` */

DROP TABLE IF EXISTS `SA_TOKEN`;

CREATE TABLE `SA_TOKEN` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_USER_NO` int(11) NOT NULL,
  `TOKEN` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `CLIENT` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `IP_ADDRESS` varchar(20) DEFAULT NULL,
  `IS_EXPIRE` int(11) NOT NULL DEFAULT 0,
  `STARTED_AT` datetime NOT NULL,
  `EXPIRE_AT` datetime NOT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=124 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER` */

DROP TABLE IF EXISTS `SA_USER`;

CREATE TABLE `SA_USER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `USERNAME` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `FIRST_NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `LAST_NAME` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `DESIGNATION` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `EMAIL` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `MOBILE_NO` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `PASSWORD` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `GENDER` int(11) DEFAULT 1,
  `DOB` date DEFAULT NULL,
  `FACEBOOK_ID` int(20) DEFAULT NULL,
  `GOOGLE_ID` int(20) DEFAULT NULL,
  `PROFILE_PIC` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `PROFILE_PIC_URL` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `PIC_MIME_TYPE` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `ACTIVATION_CODE` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `ACTIVATION_CODE_EXPIRE` datetime DEFAULT NULL,
  `IS_FIRST_LOGIN` int(11) NOT NULL DEFAULT 1,
  `USER_TYPE` int(11) NOT NULL DEFAULT 0,
  `CAN_LOGIN` int(11) NOT NULL DEFAULT 1,
  `REMEMBER_TOKEN` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 1,
  `F_AGENT_NO` int(11) DEFAULT 0,
  `F_PARENT_USER_ID` int(11) DEFAULT 0,
  `F_USER_GROUP_NO` int(11) NOT NULL,
  `USR_CUSTOM_PERMISSION` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `IS_SECONDARY_USER` int(11) DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `IS_EMAIL_VERIFIED` int(11) DEFAULT 0,
  `IS_MOBILE_VERIFIED` int(11) DEFAULT 0,
  `EMAIL_VERIFY_CODE` varchar(50) DEFAULT NULL,
  `EMAIL_VERIFY_EXPIRE` datetime DEFAULT NULL,
  `MOBILE_VERITY_CODE` varchar(50) DEFAULT NULL,
  `MOBILE_VERIFY_EXPIRE` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=75 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_GROUP` */

DROP TABLE IF EXISTS `SA_USER_GROUP`;

CREATE TABLE `SA_USER_GROUP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `GROUP_NAME` varchar(255) CHARACTER SET utf8 NOT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_GROUP_ROLE` */

DROP TABLE IF EXISTS `SA_USER_GROUP_ROLE`;

CREATE TABLE `SA_USER_GROUP_ROLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_USER_GROUP_NO` int(11) NOT NULL,
  `F_ROLE_NO` int(11) NOT NULL,
  `GRP_CUSTOM_PERMISSION` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SA_USER_GROUP_USERS` */

DROP TABLE IF EXISTS `SA_USER_GROUP_USERS`;

CREATE TABLE `SA_USER_GROUP_USERS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_GROUP_NO` int(11) DEFAULT 0,
  `F_USER_NO` int(11) DEFAULT 0,
  `STATUS` int(11) NOT NULL DEFAULT 0,
  `CREATED_BY` int(11) NOT NULL DEFAULT 0,
  `UPDATED_BY` int(11) NOT NULL DEFAULT 0,
  `CREATED_AT` datetime DEFAULT NULL,
  `UPDATED_AT` datetime DEFAULT NULL,
  `DELETED_AT` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_BOX` */

DROP TABLE IF EXISTS `SC_BOX`;

CREATE TABLE `SC_BOX` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) NOT NULL,
  `BOX_NO` int(11) NOT NULL,
  `F_BOX_USER_NO` int(11) DEFAULT NULL,
  `USER_NAME` varchar(45) DEFAULT NULL,
  `BOX_STATUS` int(11) DEFAULT NULL,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `ITEM_COUNT` int(11) DEFAULT 0,
  `WIDTH_CM` int(11) DEFAULT NULL,
  `LENGTH_CM` int(11) DEFAULT NULL,
  `HEIGHT_CM` int(11) DEFAULT NULL,
  `WEIGHT_KG` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_box` (`CODE`),
  UNIQUE KEY `u_sc_box_no` (`BOX_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1240 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_BOX_INV_STOCK` */

DROP TABLE IF EXISTS `SC_BOX_INV_STOCK`;

CREATE TABLE `SC_BOX_INV_STOCK` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOX_NO` int(11) NOT NULL,
  `F_INV_STOCK_NO` int(11) NOT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_box_inv_stock` (`F_BOX_NO`,`F_INV_STOCK_NO`),
  KEY `fk_SC_BOX_INV_STOCK_INV_STOCK` (`F_INV_STOCK_NO`),
  CONSTRAINT `fk_SC_BOX_INV_STOCK_INV_STOCK` FOREIGN KEY (`F_INV_STOCK_NO`) REFERENCES `INV_STOCK` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_BOX_INV_STOCK_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=19572 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_BOX_TYPE` */

DROP TABLE IF EXISTS `SC_BOX_TYPE`;

CREATE TABLE `SC_BOX_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `TYPE` varchar(200) DEFAULT NULL,
  `WIDTH_CM` int(11) DEFAULT NULL,
  `LENGTH_CM` int(11) DEFAULT NULL,
  `HEIGHT_CM` int(11) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=4142 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_CARRIER` */

DROP TABLE IF EXISTS `SC_CARRIER`;

CREATE TABLE `SC_CARRIER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `URL` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_carrier` (`CODE`),
  UNIQUE KEY `u_sc_carrier_nm` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_COURIER` */

DROP TABLE IF EXISTS `SC_COURIER`;

CREATE TABLE `SC_COURIER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `COURIER_NAME` varchar(100) DEFAULT NULL,
  `COURIER_DUE` float DEFAULT NULL,
  `URLS` varchar(100) DEFAULT NULL,
  `ORDER_ID` int(2) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_courier` (`COURIER_NAME`),
  UNIQUE KEY `u_sc_courier_code` (`CODE`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_CONSIGNMENT` */

DROP TABLE IF EXISTS `SC_ORDER_CONSIGNMENT`;

CREATE TABLE `SC_ORDER_CONSIGNMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ORDER_DISPATCH_NO` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `COURIER_TRACKING_NO` varchar(30) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `POSTAGE_COST` float DEFAULT NULL,
  `IS_POSTAGE_USED` int(11) DEFAULT NULL,
  `F_COURIER_BILL_NO` int(11) DEFAULT NULL,
  `SHIPMENT_KEY` varchar(255) DEFAULT NULL,
  `CONSIGNMENT_LINK` varchar(255) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_COURIER_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `COURIER_TRACKING_NO` (`COURIER_TRACKING_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=1915 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_DISPATCH` */

DROP TABLE IF EXISTS `SC_ORDER_DISPATCH`;

CREATE TABLE `SC_ORDER_DISPATCH` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `DISPATCH_NO` varchar(40) DEFAULT NULL,
  `F_COURIER_NO` int(11) DEFAULT NULL,
  `COURIER_NAME` varchar(200) DEFAULT NULL,
  `F_DISPATCH_BY_USER_NO` int(11) DEFAULT NULL,
  `DISPATCH_USER_NAME` varchar(40) DEFAULT NULL,
  `DISPATCH_DATE` datetime DEFAULT NULL,
  `DISPATCH_ACK_STATUS` int(11) DEFAULT NULL,
  `ACK_TIME` datetime DEFAULT NULL,
  `POSTAGE_COST` float DEFAULT NULL,
  `FROM_ADDRESS_NO` int(11) DEFAULT NULL,
  `TO_ADDRESS_NO` int(11) DEFAULT NULL,
  `FROM_NAME` varchar(200) DEFAULT NULL,
  `FROM_TEL_NO` varchar(20) DEFAULT NULL,
  `FROM_ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `FROM_ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `FROM_ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `FROM_ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `FROM_STATE` varchar(50) DEFAULT NULL,
  `FROM_CITY` varchar(50) DEFAULT NULL,
  `FROM_POST_CODE` varchar(20) DEFAULT NULL,
  `FROM_F_COUNTRY_NO` int(11) DEFAULT NULL,
  `FROM_COUNTRY` varchar(50) DEFAULT NULL,
  `TO_NAME` varchar(200) DEFAULT NULL,
  `TO_TEL_NO` varchar(20) DEFAULT NULL,
  `TO_ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `TO_ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `TO_ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `TO_ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `TO_STATE` varchar(50) DEFAULT NULL,
  `TO_CITY` varchar(50) DEFAULT NULL,
  `TO_POST_CODE` varchar(20) DEFAULT NULL,
  `TO_F_COUNTRY_NO` int(11) DEFAULT NULL,
  `TO_COUNTRY` varchar(50) DEFAULT NULL,
  `COURIER_TRACKING_NO` varchar(50) DEFAULT NULL,
  `COLLECTED_BY` varchar(50) DEFAULT NULL,
  `CREATED_AT` datetime DEFAULT NULL,
  `IS_DISPATHED` int(2) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_order_dispatch` (`CODE`),
  UNIQUE KEY `u_sc_order_dispatch_dis` (`DISPATCH_NO`),
  UNIQUE KEY `u_sc_order_tracking_no` (`F_ORDER_NO`,`COURIER_TRACKING_NO`),
  KEY `fk_SC_ORDER_DISPATCH_SLS_ORDER` (`F_ORDER_NO`),
  KEY `fk_SC_ORDER_DISPATCH_SC_COURIER` (`F_COURIER_NO`),
  CONSTRAINT `fk_SC_ORDER_DISPATCH_SC_COURIER` FOREIGN KEY (`F_COURIER_NO`) REFERENCES `SC_COURIER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_ORDER_DISPATCH_SLS_ORDER` FOREIGN KEY (`F_ORDER_NO`) REFERENCES `SLS_ORDER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2027 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_ORDER_DISPATCH_DETAILS` */

DROP TABLE IF EXISTS `SC_ORDER_DISPATCH_DETAILS`;

CREATE TABLE `SC_ORDER_DISPATCH_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SC_ORDER_DISPATCH_NO` int(11) DEFAULT NULL,
  `F_BOOKING_DETAILS_NO` int(11) DEFAULT NULL,
  `COURIER_TRACKING_NO` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `POSTAGE_COST` float DEFAULT NULL,
  `IS_POSTAGE_USED` int(11) DEFAULT NULL,
  `F_AC_COURIER_BILL_NO` int(11) DEFAULT NULL,
  `SHIPMENT_KEY` varchar(255) DEFAULT NULL,
  `CONSIGNMENT_LINK` varchar(255) DEFAULT NULL,
  `SHIPMENT_CREATED_AT` datetime DEFAULT NULL,
  `F_ORDER_CONSIGNMENT_NO` int(11) DEFAULT NULL,
  `IS_DISPATHED` int(2) DEFAULT 1,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_order_dispatch_details` (`CODE`),
  UNIQUE KEY `u_f_booking_details_no_courier_track_no` (`F_BOOKING_DETAILS_NO`,`COURIER_TRACKING_NO`),
  KEY `fk_SC_ORDER_DISPATCH_DETAILS_SC_ORDER_DISPATCH` (`F_SC_ORDER_DISPATCH_NO`),
  CONSTRAINT `fk_SC_ORDER_DISPATCH_DETAILS_SC_ORDER_DISPATCH` FOREIGN KEY (`F_SC_ORDER_DISPATCH_NO`) REFERENCES `SC_ORDER_DISPATCH` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2593 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_PACKAGING_LIST` */

DROP TABLE IF EXISTS `SC_PACKAGING_LIST`;

CREATE TABLE `SC_PACKAGING_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SHIPMENT_NO` int(11) DEFAULT NULL,
  `SHIPMENT_NAME` varchar(200) DEFAULT NULL,
  `BOX_SERIAL_NO` int(11) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `WIDTH_CM` int(11) DEFAULT NULL,
  `LENGTH_CM` int(11) DEFAULT NULL,
  `HEIGHT_CM` int(11) DEFAULT NULL,
  `WEIGHT_KG` float DEFAULT NULL,
  `INVOICE_DETAILS` text DEFAULT NULL,
  `INVOICE_NO` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_packaging_list` (`F_SHIPMENT_NO`,`BOX_SERIAL_NO`),
  UNIQUE KEY `u_sc_packaging_list_b` (`F_BOX_NO`),
  CONSTRAINT `fk_SC_PACKAGING_LIST_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_PACKAGING_LIST_SC_SHIPMENT` FOREIGN KEY (`F_SHIPMENT_NO`) REFERENCES `SC_SHIPMENT` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4796 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_PACKING_LIST` */

DROP TABLE IF EXISTS `SC_PACKING_LIST`;

CREATE TABLE `SC_PACKING_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SHIPMENT_NO` int(11) DEFAULT NULL,
  `SHIPMENT_NAME` varchar(200) DEFAULT NULL,
  `BOX_SERIAL_NO` int(11) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `PRD_VARINAT_NO` int(11) DEFAULT NULL,
  `HS_CODE` varchar(40) DEFAULT NULL,
  `SKU_ID` varchar(20) DEFAULT NULL,
  `IG_CODE` varchar(20) DEFAULT NULL,
  `SUBCATEGORY_NAME` varchar(40) DEFAULT NULL,
  `PRC_INV_NAME` varchar(200) DEFAULT NULL,
  `QTY` int(11) DEFAULT NULL,
  `UNIT_PRICE` double DEFAULT NULL,
  `TOTAL_PRICE` double DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=13466 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPING_ADDRESS` */

DROP TABLE IF EXISTS `SC_SHIPING_ADDRESS`;

CREATE TABLE `SC_SHIPING_ADDRESS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ADDRESS_TYPE` varchar(20) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `TEL_NO` varchar(20) DEFAULT NULL,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `STATE` varchar(50) DEFAULT NULL,
  `CITY` varchar(50) DEFAULT NULL,
  `POST_CODE` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `LOCATION` varchar(500) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `ATTENTION` varchar(50) DEFAULT NULL,
  `VAT_EORI_NO` varchar(40) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shiping_address` (`CODE`),
  KEY `fk_SC_SHIPING_ADDRESS_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPING_ADDRESS_SET` */

DROP TABLE IF EXISTS `SC_SHIPING_ADDRESS_SET`;

CREATE TABLE `SC_SHIPING_ADDRESS_SET` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `ADDRESS_TYPE` varchar(20) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `TEL_NO` varchar(20) DEFAULT NULL,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `STATE` varchar(50) DEFAULT NULL,
  `CITY` varchar(50) DEFAULT NULL,
  `POST_CODE` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `LOCATION` varchar(500) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `ATTENTION` varchar(50) DEFAULT NULL,
  `VAT_EORI_NO` varchar(40) DEFAULT NULL,
  `F_SHIPPMENT_NO` int(10) DEFAULT NULL,
  `F_ADDRESS_NO` int(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shiping_address_set` (`CODE`),
  KEY `fk_SC_SHIPING_ADDRESS_SET_SS_COUNTRY` (`F_COUNTRY_NO`),
  KEY `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPMENT` (`F_SHIPPMENT_NO`),
  KEY `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPING_ADDRESS` (`F_ADDRESS_NO`),
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPING_ADDRESS` FOREIGN KEY (`F_ADDRESS_NO`) REFERENCES `SC_SHIPING_ADDRESS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SET_SC_SHIPMENT` FOREIGN KEY (`F_SHIPPMENT_NO`) REFERENCES `SC_SHIPMENT` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPING_ADDRESS_SET_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=115 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPMENT` */

DROP TABLE IF EXISTS `SC_SHIPMENT`;

CREATE TABLE `SC_SHIPMENT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `WAYBILL` varchar(200) DEFAULT NULL,
  `F_FROM_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `F_TO_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `FREIGHT_GBP` float DEFAULT NULL,
  `FREIGHT_RM` float DEFAULT NULL,
  `SCH_DEPARTING_DATE` date DEFAULT NULL,
  `ACT_DEPARTING_DATE` date DEFAULT NULL,
  `SCH_ARRIVAL_DATE` date DEFAULT NULL,
  `ACT_ARRIAVAL_DATE` date DEFAULT NULL,
  `PACKING_PROCESS_DATE` date DEFAULT NULL,
  `SENDER_BOX_COUNT` int(11) DEFAULT 0,
  `RECIVER_BOX_COUNT` int(11) DEFAULT NULL,
  `IS_AIR_SHIPMENT` int(11) DEFAULT NULL,
  `SHIPMENT_STATUS` int(11) DEFAULT NULL,
  `F_RECIEVING_AGENT` int(10) DEFAULT NULL,
  `F_SHIPPING_AGENT` int(2) DEFAULT NULL,
  `F_FROM_ADDRESS` int(2) DEFAULT NULL,
  `F_SHIP_TO_ADDRESS` int(2) DEFAULT NULL,
  `F_BILL_TO_ADDRESS` int(2) DEFAULT NULL,
  `F_SIGNATURE` int(2) DEFAULT NULL,
  `SIGNATURE_PATH` varchar(100) DEFAULT NULL,
  `LOGISTICS_CARRIER` varchar(20) DEFAULT NULL,
  `F_RECEVIED_BY` int(11) DEFAULT NULL,
  `F_SENT_BY` int(11) DEFAULT NULL,
  `F_LOGISTICS_CARRIER` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shipment` (`CODE`),
  KEY `fk_SC_SHIPMENT_INV_WAREHOUSE` (`F_FROM_INV_WAREHOUSE_NO`),
  KEY `fk_SC_SHIPMENT_INV_WAREHOUSE_T` (`F_TO_INV_WAREHOUSE_NO`),
  KEY `fk_SC_SHIPMENT_SC_SHIPING_ADDRESS` (`F_RECIEVING_AGENT`),
  KEY `fk_SC_SHIPMENT_SC_SHIPMENT` (`F_SHIPPING_AGENT`),
  KEY `fk_SC_SHIPMENT_SC_CARRIER` (`F_LOGISTICS_CARRIER`),
  KEY `fk_SC_SHIPMENT_SC_SIGNATURE` (`F_SIGNATURE`),
  CONSTRAINT `fk_SC_SHIPMENT_INV_WAREHOUSE` FOREIGN KEY (`F_FROM_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_INV_WAREHOUSE_T` FOREIGN KEY (`F_TO_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_SC_CARRIER` FOREIGN KEY (`F_LOGISTICS_CARRIER`) REFERENCES `SC_CARRIER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_SC_SHIPING_ADDRESS` FOREIGN KEY (`F_RECIEVING_AGENT`) REFERENCES `SC_SHIPING_ADDRESS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SC_SHIPMENT_SC_SIGNATURE` FOREIGN KEY (`F_SIGNATURE`) REFERENCES `SC_SIGNATURE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SHIPMENT_BOX` */

DROP TABLE IF EXISTS `SC_SHIPMENT_BOX`;

CREATE TABLE `SC_SHIPMENT_BOX` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `F_SHIPMENT_NO` int(11) DEFAULT NULL,
  `BOX_SERIAL` int(11) DEFAULT NULL,
  `F_BOX_NO` int(11) DEFAULT NULL,
  `PRODUCT_COUNT` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_shipment_box` (`CODE`),
  UNIQUE KEY `u_sc_shipment_box_b` (`F_SHIPMENT_NO`,`BOX_SERIAL`),
  UNIQUE KEY `u_sc_shipment_box_c` (`F_BOX_NO`),
  CONSTRAINT `fk_SC_SHIPMENT_BOX_SC_BOX` FOREIGN KEY (`F_BOX_NO`) REFERENCES `SC_BOX` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=941 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SC_SIGNATURE` */

DROP TABLE IF EXISTS `SC_SIGNATURE`;

CREATE TABLE `SC_SIGNATURE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) DEFAULT NULL,
  `IMG_PATH` varchar(50) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sc_signature` (`NAME`,`IS_ACTIVE`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_AGENTS` */

DROP TABLE IF EXISTS `SLS_AGENTS`;

CREATE TABLE `SLS_AGENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `FB_ID` varchar(200) DEFAULT NULL,
  `IG_ID` varchar(200) DEFAULT NULL,
  `UKSHOP_ID` varchar(50) DEFAULT NULL,
  `UKSHOP_PASS` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_BALANCE` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_agents` (`CODE`),
  UNIQUE KEY `u_sls_agents_id` (`UKSHOP_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BATCH_LIST` */

DROP TABLE IF EXISTS `SLS_BATCH_LIST`;

CREATE TABLE `SLS_BATCH_LIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `RTS_BATCH_NO` int(11) NOT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=99 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING` */

DROP TABLE IF EXISTS `SLS_BOOKING`;

CREATE TABLE `SLS_BOOKING` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `BOOKING_NO` int(11) DEFAULT NULL,
  `REBOOKING_TIME` datetime DEFAULT NULL,
  `BOOKING_TIME` datetime DEFAULT NULL,
  `EXPIERY_DATE_TIME` datetime DEFAULT NULL,
  `CONFIRM_TIME` datetime DEFAULT NULL,
  `RECONFIRM_TIME` datetime DEFAULT NULL,
  `F_BOOKING_SALES_AGENT_NO` int(11) DEFAULT NULL,
  `BOOKING_SALES_AGENT_NAME` varchar(200) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `BOOKING_NOTES` varchar(500) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_RESELLER` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `RESELLER_NAME` varchar(200) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `CANCEL_FEE` float DEFAULT 0,
  `PENALTY_FEE` float DEFAULT 0,
  `PENALTY_NOTE` varchar(200) DEFAULT NULL,
  `CUSTOMER_POSTAGE` float DEFAULT 0 COMMENT 'returned postage cost',
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime NOT NULL,
  `F_SS_COMPANY_NO` float DEFAULT NULL,
  `FREIGHT_COST` double DEFAULT NULL,
  `POSTAGE_COST` double DEFAULT NULL,
  `TOTAL_PRICE` double DEFAULT NULL,
  `TOTAL_PRICE_BEFORE_RETURN` float DEFAULT NULL,
  `DISCOUNT` double DEFAULT 0,
  `TOTAL_COMISSION` float DEFAULT 0,
  `TOTAL_ITEM_QTY` int(3) DEFAULT 0,
  `IS_BUNDLE_MATCHED` tinyint(4) DEFAULT 0,
  `IS_READ_BOOKING_NOTES` tinyint(4) DEFAULT 0,
  `READ_BY_BOOKING_NOTES` int(3) DEFAULT NULL,
  `CANCEL_REQUEST_BY` int(4) DEFAULT NULL,
  `CANCEL_REQUEST_AT` datetime DEFAULT NULL,
  `CANCEL_NOTE` varchar(200) DEFAULT NULL,
  `CANCELED_AT` datetime DEFAULT NULL,
  `IS_RETURN` int(1) NOT NULL DEFAULT 0 COMMENT '0= NOT RETURN,1 =PARTIAL RETURN,2=FULLY RETURN',
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_booking` (`BOOKING_NO`),
  KEY `fk_SLS_BOOKING_SLS_AGENTS` (`F_BOOKING_SALES_AGENT_NO`),
  KEY `fk_SLS_BOOKING_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_SLS_BOOKING_SLS_RESELLERS` (`F_RESELLER_NO`),
  CONSTRAINT `fk_SLS_BOOKING_SLS_AGENTS` FOREIGN KEY (`F_BOOKING_SALES_AGENT_NO`) REFERENCES `SLS_AGENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_BOOKING_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_BOOKING_SLS_RESELLERS` FOREIGN KEY (`F_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2467 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_DETAILS` */

DROP TABLE IF EXISTS `SLS_BOOKING_DETAILS`;

CREATE TABLE `SLS_BOOKING_DETAILS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `AIR_FREIGHT` float DEFAULT NULL,
  `SEA_FREIGHT` float DEFAULT NULL,
  `IS_FREIGHT` int(4) DEFAULT 0 COMMENT '0= NO, 1=AIR, 2= SEA',
  `SS_COST` float DEFAULT NULL,
  `SM_COST` float DEFAULT NULL,
  `IS_SM` int(4) DEFAULT 1 COMMENT '0=SS,1=SM',
  `REGULAR_PRICE` float NOT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_REGULAR` int(4) DEFAULT 1 COMMENT '1=Regular,0=inst',
  `CURRENT_AIR_FREIGHT` float DEFAULT NULL,
  `CURRENT_SEA_FREIGHT` float DEFAULT NULL,
  `CURRENT_IS_FREIGHT` int(4) DEFAULT 0 COMMENT '0= NO, 1=AIR, 2= SEA',
  `CURRENT_SS_COST` float DEFAULT NULL,
  `CURRENT_SM_COST` double DEFAULT NULL,
  `CURRENT_IS_SM` int(4) DEFAULT 1 COMMENT '0=SS,1=SM',
  `CURRENT_REGULAR_PRICE` double DEFAULT NULL,
  `CURRENT_INSTALLMENT_PRICE` double DEFAULT NULL,
  `CURRENT_IS_REGULAR` int(4) DEFAULT 1 COMMENT '1=Regular,1=inst',
  `CURRENT_F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `IS_SELF_PICKUP` int(4) DEFAULT 0,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `ARRIVAL_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 0 COMMENT '1=order from UK (Msg not generated),2 = Ready Stock (Arriaval Msg no need),0 = Msg generated',
  `DISPATCH_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 1,
  `IS_COD_SHELVE_TRANSFER` int(1) DEFAULT 0,
  `COMISSION` float DEFAULT NULL,
  `RTS_COLLECTION_USER_ID` int(11) DEFAULT 0,
  `IS_COLLECTED_FOR_RTS` int(1) DEFAULT 0,
  `F_BUNDLE_NO` int(2) DEFAULT NULL,
  `BUNDLE_SEQUENC` int(2) DEFAULT NULL,
  `COD_RTC_ACK` int(1) DEFAULT 0,
  `LINE_PRICE` double DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_BOOKING_DETAILS_SLS_BOOKING` (`F_BOOKING_NO`),
  KEY `fk_SLS_BOOKING_DETAILS_INV_STOCK` (`F_INV_STOCK_NO`),
  CONSTRAINT `fk_SLS_BOOKING_DETAILS_INV_STOCK` FOREIGN KEY (`F_INV_STOCK_NO`) REFERENCES `INV_STOCK` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_BOOKING_DETAILS_SLS_BOOKING` FOREIGN KEY (`F_BOOKING_NO`) REFERENCES `SLS_BOOKING` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=5387 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_DETAILS_AUD` */

DROP TABLE IF EXISTS `SLS_BOOKING_DETAILS_AUD`;

CREATE TABLE `SLS_BOOKING_DETAILS_AUD` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `PK_NO` int(11) NOT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `AIR_FREIGHT` float DEFAULT NULL,
  `SEA_FREIGHT` float DEFAULT NULL,
  `IS_FREIGHT` int(4) DEFAULT NULL,
  `SS_COST` float DEFAULT NULL,
  `SM_COST` float DEFAULT NULL,
  `IS_SM` int(4) DEFAULT NULL,
  `REGULAR_PRICE` float NOT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_AIR_FREIGHT` float DEFAULT NULL,
  `CURRENT_SEA_FREIGHT` float DEFAULT NULL,
  `CURRENT_IS_FREIGHT` int(4) DEFAULT NULL,
  `CURRENT_SS_COST` float DEFAULT NULL,
  `CURRENT_SM_COST` float DEFAULT NULL,
  `CURRENT_IS_SM` int(4) DEFAULT NULL,
  `CURRENT_REGULAR_PRICE` float DEFAULT NULL,
  `CURRENT_INSTALLMENT_PRICE` float DEFAULT NULL,
  `CURRENT_IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `IS_SELF_PICKUP` int(4) DEFAULT NULL,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `ARRIVAL_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 0,
  `DISPATCH_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 1,
  `IS_COD_SHELVE_TRANSFER` int(1) DEFAULT 0,
  `COMISSION` float DEFAULT NULL,
  `RTS_COLLECTION_USER_ID` int(11) DEFAULT 0,
  `IS_COLLECTED_FOR_RTS` int(1) DEFAULT 0,
  `F_BUNDLE_NO` int(2) DEFAULT NULL,
  `BUNDLE_SEQUENC` int(2) DEFAULT NULL,
  `COD_RTC_ACK` int(1) DEFAULT 0,
  `LINE_PRICE` float DEFAULT 0,
  `CHANGE_TYPE` varchar(100) DEFAULT NULL,
  `RETURN_TYPE` int(2) DEFAULT NULL COMMENT '1 = GOOD CONDITION,2=BAD CONDITION BUT STOCK TAKE OVER,3=BAD CONDITION BUT STOCK TAKE OVER',
  `RETURN_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=1046 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BOOKING_DETAILS_TEMP` */

DROP TABLE IF EXISTS `SLS_BOOKING_DETAILS_TEMP`;

CREATE TABLE `SLS_BOOKING_DETAILS_TEMP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `AIR_FREIGHT` float DEFAULT NULL,
  `SEA_FREIGHT` float DEFAULT NULL,
  `IS_FREIGHT` int(4) DEFAULT NULL,
  `SS_COST` float DEFAULT NULL,
  `SM_COST` float DEFAULT NULL,
  `IS_SM` int(4) DEFAULT NULL,
  `REGULAR_PRICE` float NOT NULL,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_AIR_FREIGHT` float DEFAULT NULL,
  `CURRENT_SEA_FREIGHT` float DEFAULT NULL,
  `CURRENT_IS_FREIGHT` int(4) DEFAULT NULL,
  `CURRENT_SS_COST` float DEFAULT NULL,
  `CURRENT_SM_COST` float DEFAULT NULL,
  `CURRENT_IS_SM` int(4) DEFAULT NULL,
  `CURRENT_REGULAR_PRICE` float DEFAULT NULL,
  `CURRENT_INSTALLMENT_PRICE` float DEFAULT NULL,
  `CURRENT_IS_REGULAR` int(4) DEFAULT NULL,
  `CURRENT_F_DELIVERY_ADDRESS` int(11) DEFAULT NULL,
  `ORDER_STATUS` int(11) DEFAULT NULL,
  `IS_SELF_PICKUP` int(4) DEFAULT NULL,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `ARRIVAL_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 0,
  `DISPATCH_NOTIFICATION_FLAG` int(1) NOT NULL DEFAULT 1,
  `IS_COD_SHELVE_TRANSFER` int(1) DEFAULT 0,
  `COMISSION` float DEFAULT NULL,
  `RTS_COLLECTION_USER_ID` int(11) DEFAULT 0,
  `IS_COLLECTED_FOR_RTS` int(1) DEFAULT 0,
  `F_BUNDLE_NO` int(2) DEFAULT NULL,
  `BUNDLE_SEQUENC` int(2) DEFAULT NULL,
  `COD_RTC_ACK` int(1) DEFAULT 0,
  `LINE_PRICE` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_BOOKING_TEMP_DETAILS_SLS_BOOKING_TEMP` (`F_BOOKING_NO`),
  CONSTRAINT `fk_SLS_BOOKING_TEMP_DETAILS_SLS_BOOKING_TEMP` FOREIGN KEY (`F_BOOKING_NO`) REFERENCES `SLS_BOOKING_TEMP` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4176 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='TEMPORARY TABLE';

/*Table structure for table `SLS_BOOKING_TEMP` */

DROP TABLE IF EXISTS `SLS_BOOKING_TEMP`;

CREATE TABLE `SLS_BOOKING_TEMP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `BOOKING_NO` int(11) DEFAULT NULL,
  `REBOOKING_TIME` datetime DEFAULT NULL,
  `BOOKING_TIME` datetime DEFAULT NULL,
  `EXPIERY_DATE_TIME` datetime DEFAULT NULL,
  `CONFIRM_TIME` datetime DEFAULT NULL,
  `RECONFIRM_TIME` datetime DEFAULT NULL,
  `F_BOOKING_SALES_AGENT_NO` int(11) DEFAULT NULL,
  `BOOKING_SALES_AGENT_NAME` varchar(200) DEFAULT NULL,
  `BOOKING_STATUS` int(11) DEFAULT NULL,
  `BOOKING_NOTES` varchar(500) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_RESELLER` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `RESELLER_NAME` varchar(200) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime NOT NULL,
  `F_SS_COMPANY_NO` float DEFAULT NULL,
  `FREIGHT_COST` double DEFAULT NULL,
  `POSTAGE_COST` double DEFAULT NULL,
  `TOTAL_PRICE` double DEFAULT NULL,
  `DISCOUNT` double DEFAULT 0,
  `TOTAL_COMISSION` float DEFAULT 0,
  `TOTAL_ITEM_QTY` int(3) DEFAULT 0,
  `IS_BUNDLE_MATCHED` tinyint(4) DEFAULT 0,
  `IS_READ_BOOKING_NOTES` tinyint(4) DEFAULT 0,
  `READ_BY_BOOKING_NOTES` int(3) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=347 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='TEMPORARY TABLE';

/*Table structure for table `SLS_BUNDLE` */

DROP TABLE IF EXISTS `SLS_BUNDLE`;

CREATE TABLE `SLS_BUNDLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `COUPON_CODE` varchar(20) DEFAULT NULL,
  `BUNDLE_NAME` varchar(200) DEFAULT NULL,
  `BUNDLE_NAME_PUBLIC` varchar(200) DEFAULT NULL,
  `VALIDITY_FROM` date DEFAULT NULL,
  `VALIDITY_TO` date DEFAULT NULL,
  `F_A_LIST_NO` int(11) DEFAULT NULL,
  `F_B_LIST_NO` int(11) DEFAULT NULL,
  `F_BUNDLE_TYPE` int(11) DEFAULT NULL,
  `P_AMOUNT` float DEFAULT 0,
  `P2_AMOUNT` float DEFAULT 0,
  `P_SS` float DEFAULT 0,
  `P_SM` float DEFAULT 0,
  `P_AIR` float DEFAULT 0,
  `P_SEA` float DEFAULT 0,
  `X1_QTY` int(11) DEFAULT 0,
  `X2_QTY` int(11) DEFAULT 0,
  `ZA1` float DEFAULT 0,
  `ZA2` float DEFAULT 0,
  `ZA3` float DEFAULT 0,
  `R_AMOUNT` float DEFAULT 0,
  `R2_AMOUNT` float DEFAULT 0,
  `R_SS` float DEFAULT 0,
  `R_SM` float DEFAULT 0,
  `R_AIR` float DEFAULT 0,
  `R_SEA` float DEFAULT 0,
  `Y1_QTY` int(11) DEFAULT 0,
  `Y2_QTY` int(11) DEFAULT 0,
  `ZB1` float DEFAULT NULL,
  `ZB2` float DEFAULT NULL,
  `ZB3` float DEFAULT NULL,
  `STATUS` int(2) DEFAULT 1,
  `IMAGE` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=57 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_PRIMARY_SET` */

DROP TABLE IF EXISTS `SLS_BUNDLE_PRIMARY_SET`;

CREATE TABLE `SLS_BUNDLE_PRIMARY_SET` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(50) DEFAULT NULL,
  `PRIMARY_SET_NAME` varchar(200) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_PRIMARY_SET_DTL` */

DROP TABLE IF EXISTS `SLS_BUNDLE_PRIMARY_SET_DTL`;

CREATE TABLE `SLS_BUNDLE_PRIMARY_SET_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SLS_BUNDLE_PRIMARY_SET_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `SKUID` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=228 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_SECONDARY_SET` */

DROP TABLE IF EXISTS `SLS_BUNDLE_SECONDARY_SET`;

CREATE TABLE `SLS_BUNDLE_SECONDARY_SET` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `SECONDARY_SET_NAME` varchar(125) DEFAULT NULL,
  `COMMENTS` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_SECONDARY_SET_DTL` */

DROP TABLE IF EXISTS `SLS_BUNDLE_SECONDARY_SET_DTL`;

CREATE TABLE `SLS_BUNDLE_SECONDARY_SET_DTL` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_SLS_BUNDLE_SECONDARY_SET_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `PRD_VARIANT_NAME` varchar(200) DEFAULT NULL,
  `SKUID` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_BUNDLE_TYPE` */

DROP TABLE IF EXISTS `SLS_BUNDLE_TYPE`;

CREATE TABLE `SLS_BUNDLE_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `PUBLIC_NAME` varchar(200) DEFAULT NULL,
  `P_AMOUNT` float DEFAULT 0,
  `P2_AMOUNT` float DEFAULT NULL,
  `P_SS` float DEFAULT NULL,
  `P_SM` float DEFAULT NULL,
  `P_SEA` float DEFAULT NULL,
  `P_AIR` float DEFAULT NULL,
  `X1_QTY` int(11) DEFAULT 0,
  `X2_QTY` int(11) DEFAULT 0,
  `ZA1` float DEFAULT 0,
  `ZA2` float DEFAULT 0,
  `ZA3` float DEFAULT 0,
  `R_AMOUNT` float DEFAULT 0,
  `R2_AMOUNT` float DEFAULT 0,
  `R_SS` float DEFAULT 0,
  `R_SM` float DEFAULT 0,
  `R_SEA` float DEFAULT 0,
  `R_AIR` float DEFAULT 0,
  `Y1_QTY` int(11) DEFAULT 0,
  `Y2_QTY` int(11) DEFAULT 0,
  `ZB1` float DEFAULT 0,
  `ZB2` float DEFAULT 0,
  `ZB3` float DEFAULT 0,
  `T_AMOUNT` float DEFAULT 0,
  `T2_AMOUNT` float DEFAULT 0,
  `Z1_QTY` int(11) DEFAULT 0,
  `Z2_QTY` int(11) DEFAULT 0,
  `ZC1` float DEFAULT 0,
  `ZC2` float DEFAULT 0,
  `ZC3` float DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CHECK_OFFER` */

DROP TABLE IF EXISTS `SLS_CHECK_OFFER`;

CREATE TABLE `SLS_CHECK_OFFER` (
  `PK_NO` bigint(20) NOT NULL AUTO_INCREMENT,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BUNDLE_NO` int(3) DEFAULT NULL,
  `F_LIST_NO` int(10) DEFAULT NULL,
  `F_LIST_CHILD_NO` int(11) DEFAULT NULL,
  `IS_A_LIST` tinyint(4) DEFAULT 0,
  `F_VARIANT_NO` int(10) DEFAULT NULL,
  `REGULAR_PRICE` double DEFAULT 0,
  `INSTALLMENT_PRICE` double DEFAULT NULL,
  `F_INV_STOCK_NO` int(11) DEFAULT NULL,
  `LIST_TYPE` varchar(20) DEFAULT NULL,
  `REGULAR_BUNDLE_PRICE` double DEFAULT NULL,
  `INSTALLMENT_BUNDLE_PRICE` double DEFAULT NULL,
  `IS_PROCESSED` int(11) DEFAULT 0,
  `SEQUENC` int(2) DEFAULT NULL,
  `CON` int(2) DEFAULT NULL,
  `IS_TEMP` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=5935 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_COMMISION` */

DROP TABLE IF EXISTS `SLS_COMMISION`;

CREATE TABLE `SLS_COMMISION` (
  `PK_NO` int(2) NOT NULL AUTO_INCREMENT,
  `FROM_PRICE` decimal(13,2) DEFAULT NULL,
  `TO_PRICE` decimal(13,2) DEFAULT NULL,
  `AMOUNT` decimal(13,2) DEFAULT NULL,
  `FROM_DATE` date DEFAULT NULL,
  `TO_DATE` date DEFAULT NULL,
  `STATUS` decimal(13,2) DEFAULT NULL,
  `PLAN_NO` int(2) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` decimal(13,2) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` decimal(13,2) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

/*Table structure for table `SLS_CUSTOMERS` */

DROP TABLE IF EXISTS `SLS_CUSTOMERS`;

CREATE TABLE `SLS_CUSTOMERS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CUSTOMER_NO` int(11) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `FB_ID` varchar(200) DEFAULT NULL,
  `IG_ID` varchar(200) DEFAULT NULL,
  `UKSHOP_ID` varchar(50) DEFAULT NULL,
  `UKSHOP_PASS` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_BALANCE` float DEFAULT 0,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_BALANCE_BUFFER` float DEFAULT 0,
  `CUSTOMER_BALANCE_ACTUAL` float DEFAULT 0,
  `F_COUNTRY_NO` int(3) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_customers` (`CODE`),
  UNIQUE KEY `u_sls_customers_cn` (`CUSTOMER_NO`),
  UNIQUE KEY `u_sls_customers_id` (`UKSHOP_ID`),
  UNIQUE KEY `u_sls_customers_mobile` (`MOBILE_NO`),
  KEY `fk_SLS_CUSTOMERS_SLS_RESELLERS` (`F_RESELLER_NO`),
  CONSTRAINT `fk_SLS_CUSTOMERS_SLS_RESELLERS` FOREIGN KEY (`F_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1929 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMERS_ADDRESS` */

DROP TABLE IF EXISTS `SLS_CUSTOMERS_ADDRESS`;

CREATE TABLE `SLS_CUSTOMERS_ADDRESS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `TEL_NO` varchar(20) DEFAULT NULL,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `STATE` varchar(50) DEFAULT NULL,
  `CITY` varchar(50) DEFAULT NULL,
  `POST_CODE` varchar(20) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  `COUNTRY` varchar(50) DEFAULT NULL,
  `LOCATION` varchar(500) DEFAULT NULL,
  `F_ADDRESS_TYPE_NO` int(11) DEFAULT NULL,
  `ADDRESS_TYPE` varchar(20) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT 0,
  `IS_DEFAULT` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_CUSTOMERS_ADDRESS_SLS_CUSTOMERS_ADDRESS` (`F_ADDRESS_TYPE_NO`),
  KEY `fk_SLS_CUSTOMERS_ADDRESS_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  KEY `fk_SLS_CUSTOMERS_ADDRESS_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_SLS_CUSTOMERS_ADDRESS_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_CUSTOMERS_ADDRESS_SLS_CUSTOMERS_ADDRESS` FOREIGN KEY (`F_ADDRESS_TYPE_NO`) REFERENCES `SLS_CUSTOMERS_ADDRESS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_CUSTOMERS_ADDRESS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3662 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_CUSTOMER_ADDRESS_TYPE` */

DROP TABLE IF EXISTS `SLS_CUSTOMER_ADDRESS_TYPE`;

CREATE TABLE `SLS_CUSTOMER_ADDRESS_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `ADD_COL_NUMBER_1` int(4) DEFAULT NULL,
  `ADD_COL_NUMBER_2` int(4) DEFAULT NULL,
  `ADD_COL_VARCHAR_1` varchar(10) DEFAULT NULL,
  `ADD_COL_VARCHAR_2` varchar(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_customer_address_type` (`CODE`),
  UNIQUE KEY `u_sls_customer_address_type_n` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_NOTIFICATION` */

DROP TABLE IF EXISTS `SLS_NOTIFICATION`;

CREATE TABLE `SLS_NOTIFICATION` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `TYPE` varchar(20) DEFAULT NULL,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BOOKING_DETAIL_NO` int(10) DEFAULT NULL,
  `SEND_AT` datetime DEFAULT NULL,
  `IS_SEND` int(1) DEFAULT 0,
  `BODY` text DEFAULT NULL,
  `MOBILE_NO` varchar(40) DEFAULT NULL,
  `CUSTOMER_NO` int(10) DEFAULT NULL,
  `RESELLER_NO` int(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_RESELLER` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2695 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_NOTIFICATION_EMAIL` */

DROP TABLE IF EXISTS `SLS_NOTIFICATION_EMAIL`;

CREATE TABLE `SLS_NOTIFICATION_EMAIL` (
  `PK_NO` int(10) NOT NULL AUTO_INCREMENT,
  `TYPE` varchar(20) DEFAULT NULL,
  `F_BOOKING_NO` int(10) DEFAULT NULL,
  `F_BOOKING_DETAIL_NO` int(10) DEFAULT NULL,
  `SEND_AT` datetime DEFAULT NULL,
  `IS_SEND` int(1) DEFAULT 0,
  `BODY` text DEFAULT NULL,
  `MOBILE_NO` varchar(40) DEFAULT NULL,
  `EMAIL` varchar(45) DEFAULT NULL,
  `CUSTOMER_NO` int(10) DEFAULT NULL,
  `RESELLER_NO` int(10) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_RESELLER` int(1) DEFAULT 0,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2270 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER` */

DROP TABLE IF EXISTS `SLS_ORDER`;

CREATE TABLE `SLS_ORDER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_BOOKING_NO` int(20) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(200) DEFAULT NULL,
  `IS_RESELLER` int(11) DEFAULT NULL,
  `F_RESELLER_NO` int(11) DEFAULT NULL,
  `RESELLER_NAME` varchar(200) DEFAULT NULL,
  `DISPATCH_STATUS` int(4) DEFAULT 0,
  `F_FROM_ADDRESS` int(11) DEFAULT 1,
  `F_TO_ADDRESS` int(11) DEFAULT NULL,
  `F_BILLING_ADDRESS` int(10) DEFAULT NULL,
  `F_ORDER_TYPE_NO` int(11) DEFAULT NULL,
  `ORDER_TYPE_NAME` varchar(20) DEFAULT NULL,
  `ORDER_ACTUAL_TOPUP` float DEFAULT 0,
  `ORDER_BUFFER_TOPUP` float DEFAULT 0,
  `ORDER_BALANCE_USED` float DEFAULT 0,
  `ORDER_BALANCE_RETURN` float DEFAULT 0,
  `IS_ADMIN_HOLD` int(4) DEFAULT 0,
  `IS_SYSTEM_HOLD` int(4) DEFAULT 1,
  `IS_CANCEL` int(2) DEFAULT 0,
  `IS_DEFAULT` int(1) DEFAULT 0,
  `IS_SELF_PICKUP` tinyint(4) DEFAULT 0,
  `IS_ADMIN_APPROVAL` int(4) DEFAULT 0,
  `FROM_NAME` varchar(100) DEFAULT NULL,
  `FROM_MOBILE` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `FROM_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `FROM_CITY` varchar(100) DEFAULT NULL,
  `FROM_POSTCODE` varchar(100) DEFAULT NULL,
  `FROM_STATE` varchar(100) DEFAULT NULL,
  `FROM_COUNTRY` varchar(100) DEFAULT NULL,
  `FROM_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DELIVERY_NAME` varchar(100) DEFAULT NULL,
  `DELIVERY_MOBILE` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `DELIVERY_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `DELIVERY_CITY` varchar(100) DEFAULT NULL,
  `DELIVERY_POSTCODE` varchar(100) DEFAULT NULL,
  `DELIVERY_STATE` varchar(100) DEFAULT NULL,
  `DELIVERY_COUNTRY` varchar(100) DEFAULT NULL,
  `DELIVERY_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DELIVERY_EMAIL` varchar(50) DEFAULT NULL,
  `IS_READY` int(1) NOT NULL DEFAULT 0,
  `COM_TEST` varchar(100) DEFAULT NULL,
  `PICKUP_ID` int(11) DEFAULT 0,
  `UPDATED_BY` int(4) DEFAULT 0,
  `PREV_DELIVERY_NAME` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_MOBILE` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_1` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_2` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_3` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_ADDRESS_LINE_4` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_CITY` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_POSTCODE` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_STATE` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_COUNTRY` varchar(100) DEFAULT NULL,
  `PREV_DELIVERY_F_COUNTRY_NO` int(4) DEFAULT NULL,
  `DEFAULT_AT` datetime DEFAULT NULL,
  `DEFAULT_TYPE` int(1) DEFAULT 0,
  `GRACE_TIME` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_order_sls_booking` (`F_BOOKING_NO`),
  KEY `fk_SLS_ORDER_failed_jobs` (`F_BOOKING_NO`),
  KEY `fk_SLS_ORDER_S` (`F_RESELLER_NO`),
  KEY `fk_SLS_ORDER_SLS_CUSTOMERS` (`F_CUSTOMER_NO`),
  CONSTRAINT `fk_SLS_ORDER_S` FOREIGN KEY (`F_RESELLER_NO`) REFERENCES `SLS_RESELLERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_ORDER_SLS_CUSTOMERS` FOREIGN KEY (`F_CUSTOMER_NO`) REFERENCES `SLS_CUSTOMERS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_ORDER_failed_jobs` FOREIGN KEY (`F_BOOKING_NO`) REFERENCES `SLS_BOOKING` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2380 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER_COMMENTS` */

DROP TABLE IF EXISTS `SLS_ORDER_COMMENTS`;

CREATE TABLE `SLS_ORDER_COMMENTS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(11) DEFAULT NULL,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `COMMENTS_TEXT` varchar(200) DEFAULT NULL,
  `COMMENTS_TIME` datetime DEFAULT NULL,
  `F_COMMENTS_BY_USER_NO` int(11) DEFAULT NULL,
  `COMMENTS_BY_USER_NAME` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_order_comments` (`CODE`),
  KEY `fk_SLS_ORDER_COMMENTS_SLS_ORDER` (`F_ORDER_NO`),
  CONSTRAINT `fk_SLS_ORDER_COMMENTS_SLS_ORDER` FOREIGN KEY (`F_ORDER_NO`) REFERENCES `SLS_ORDER` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_ORDER_RTC` */

DROP TABLE IF EXISTS `SLS_ORDER_RTC`;

CREATE TABLE `SLS_ORDER_RTC` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_ORDER_NO` int(11) DEFAULT NULL,
  `F_BOOKING_NO` int(11) DEFAULT NULL,
  `F_ACC_PAYMENT_BANK_NO` varchar(200) DEFAULT NULL,
  `BANK_NAME` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `BANK_ACC_NAME` varchar(50) DEFAULT NULL,
  `F_USER_NO` int(4) DEFAULT NULL,
  `IS_CONFIRM_HOLDER` int(11) DEFAULT NULL,
  `CONFIRM_TIME` datetime DEFAULT NULL,
  `ADMIN_COMMENT` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(10) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_REQUEST_PENDING` int(1) DEFAULT 1,
  `REQUEST_TIME` datetime DEFAULT NULL,
  `REQUEST_APPROVED_TIME` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  KEY `fk_SLS_ORDER_RTC_S` (`F_ORDER_NO`),
  CONSTRAINT `fk_SLS_ORDER_RTC_S` FOREIGN KEY (`F_ORDER_NO`) REFERENCES `SLS_ORDER` (`PK_NO`) ON DELETE CASCADE ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=92 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_RESELLERS` */

DROP TABLE IF EXISTS `SLS_RESELLERS`;

CREATE TABLE `SLS_RESELLERS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `RESELLER_NO` int(10) DEFAULT NULL,
  `CODE` int(11) DEFAULT NULL,
  `NAME` varchar(200) DEFAULT NULL,
  `MOBILE_NO` varchar(20) DEFAULT NULL,
  `ALTERNATE_NO` varchar(200) DEFAULT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `FB_ID` varchar(200) DEFAULT NULL,
  `IG_ID` varchar(200) DEFAULT NULL,
  `UKSHOP_ID` varchar(50) DEFAULT NULL,
  `UKSHOP_PASS` varchar(255) DEFAULT NULL,
  `CUM_ORDERS_QTY` int(50) DEFAULT NULL,
  `CUM_ORDERS_VAL` float DEFAULT NULL,
  `CUM_BALANCE_ACTUAL` float DEFAULT 0,
  `CUM_BALANCE_BUFFER` float DEFAULT 0,
  `CUM_BALANCE` float DEFAULT NULL,
  `DISCOUNT_PERCENTAGE` float DEFAULT 0,
  `ADDRESS_LINE_1` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_2` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_3` varchar(200) DEFAULT NULL,
  `ADDRESS_LINE_4` varchar(200) DEFAULT NULL,
  `CITY` varchar(50) DEFAULT NULL,
  `STATE` varchar(45) DEFAULT NULL,
  `POST_CODE` varchar(50) DEFAULT NULL,
  `F_COUNTRY_NO` int(100) DEFAULT NULL,
  `COMMENTS` varchar(200) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `F_SS_COMPANY_NO` int(4) DEFAULT NULL,
  `IS_ACTIVE` int(11) DEFAULT NULL,
  `COUNTRY` varchar(100) DEFAULT NULL,
  `F_PREFERRED_AGENT_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_sls_resellers` (`CODE`),
  UNIQUE KEY `u_sls_resellers_c` (`RESELLER_NO`),
  UNIQUE KEY `u_sls_resellers_id` (`UKSHOP_ID`),
  UNIQUE KEY `u_sls_resellers_mobile` (`MOBILE_NO`),
  KEY `fk_SLS_RESELLERS_SLS_AGENTS` (`F_PREFERRED_AGENT_NO`),
  KEY `fk_SLS_RESELLERS_SS_COUNTRY` (`F_COUNTRY_NO`),
  CONSTRAINT `fk_SLS_RESELLERS_SLS_AGENTS` FOREIGN KEY (`F_PREFERRED_AGENT_NO`) REFERENCES `SLS_AGENTS` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SLS_RESELLERS_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SLS_STOCK_OUT` */

DROP TABLE IF EXISTS `SLS_STOCK_OUT`;

CREATE TABLE `SLS_STOCK_OUT` (
  `PK_NO` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Table structure for table `SLS_STOCK_OUT_DETAILS` */

DROP TABLE IF EXISTS `SLS_STOCK_OUT_DETAILS`;

CREATE TABLE `SLS_STOCK_OUT_DETAILS` (
  `PK_NO` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Table structure for table `SS_CITY` */

DROP TABLE IF EXISTS `SS_CITY`;

CREATE TABLE `SS_CITY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `CITY_CODE` varchar(20) DEFAULT NULL,
  `CITY_NAME` varchar(200) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_city` (`CODE`),
  UNIQUE KEY `u_ss_city_code` (`F_STATE_NO`,`CITY_CODE`),
  UNIQUE KEY `u_ss_city_name` (`F_STATE_NO`,`CITY_NAME`),
  CONSTRAINT `fk_SS_CITY_SS_COUNTRY` FOREIGN KEY (`F_STATE_NO`) REFERENCES `SS_STATE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=473 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_COUNTRY` */

DROP TABLE IF EXISTS `SS_COUNTRY`;

CREATE TABLE `SS_COUNTRY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(3) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `DIAL_CODE` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_country` (`CODE`),
  UNIQUE KEY `u_ss_country_name` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_CURRENCY` */

DROP TABLE IF EXISTS `SS_CURRENCY`;

CREATE TABLE `SS_CURRENCY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` varchar(4) DEFAULT NULL,
  `NAME` varchar(10) DEFAULT NULL,
  `EXCHANGE_RATE_GB` float DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_currency` (`CODE`),
  UNIQUE KEY `u_ss_currency_n` (`NAME`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_IMG_FILE_TYPE` */

DROP TABLE IF EXISTS `SS_IMG_FILE_TYPE`;

CREATE TABLE `SS_IMG_FILE_TYPE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) DEFAULT NULL,
  `EXT` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_SS_IMG_FILE_TYPE` (`EXT`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_INV_USER_MAP` */

DROP TABLE IF EXISTS `SS_INV_USER_MAP`;

CREATE TABLE `SS_INV_USER_MAP` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_INV_WAREHOUSE_NO` int(11) DEFAULT NULL,
  `F_USER_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_inv_user_map` (`F_USER_NO`),
  KEY `fk_SS_INV_USER_MAP_INV_WAREHOUSE` (`F_INV_WAREHOUSE_NO`),
  CONSTRAINT `fk_SS_INV_USER_MAP_INV_WAREHOUSE` FOREIGN KEY (`F_INV_WAREHOUSE_NO`) REFERENCES `INV_WAREHOUSE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_PO_CODE` */

DROP TABLE IF EXISTS `SS_PO_CODE`;

CREATE TABLE `SS_PO_CODE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `PO_CODE` varchar(8) DEFAULT NULL,
  `F_CITY_NO` int(11) DEFAULT NULL,
  `CITY_NAME` varchar(200) DEFAULT NULL,
  `F_STATE_NO` int(11) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_po_code` (`CODE`),
  UNIQUE KEY `u_ss_po_code_cc` (`F_STATE_NO`,`F_CITY_NO`,`PO_CODE`),
  KEY `fk_SS_PO_CODE_SS_CITY` (`F_CITY_NO`),
  CONSTRAINT `fk_SS_PO_CODE_SS_CITY` FOREIGN KEY (`F_CITY_NO`) REFERENCES `SS_CITY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `fk_SS_PO_CODE_SS_STATE` FOREIGN KEY (`F_STATE_NO`) REFERENCES `SS_STATE` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2819 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_STATE` */

DROP TABLE IF EXISTS `SS_STATE`;

CREATE TABLE `SS_STATE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `CODE` int(12) DEFAULT NULL,
  `STATE_CODE` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `F_COUNTRY_NO` int(11) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`),
  UNIQUE KEY `u_ss_state` (`CODE`),
  UNIQUE KEY `u_ss_state_cc` (`F_COUNTRY_NO`,`STATE_NAME`),
  UNIQUE KEY `u_ss_state_sc` (`F_COUNTRY_NO`,`STATE_CODE`),
  CONSTRAINT `fk_SS_STATE_SS_COUNTRY` FOREIGN KEY (`F_COUNTRY_NO`) REFERENCES `SS_COUNTRY` (`PK_NO`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `SS_STICKY_NOTE` */

DROP TABLE IF EXISTS `SS_STICKY_NOTE`;

CREATE TABLE `SS_STICKY_NOTE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NOTE` mediumtext DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_ABOUT` */

DROP TABLE IF EXISTS `WEB_ABOUT`;

CREATE TABLE `WEB_ABOUT` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `SUB_TITLE` varchar(255) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  `VISION_TITLE` varchar(255) DEFAULT NULL,
  `VISION_DESCRIPTION` text DEFAULT NULL,
  `MISSION_TITLE` varchar(255) DEFAULT NULL,
  `MISSION_DESCRIPTION` text DEFAULT NULL,
  `INTRO_TITLE` varchar(255) DEFAULT NULL,
  `INTRO_SUBTITLE` varchar(255) DEFAULT NULL,
  `INTRO_DESCRIPTION` text DEFAULT NULL,
  `INTRO_IMG_1` varchar(255) DEFAULT NULL,
  `INTRO_IMG_2` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_ARTICLE` */

DROP TABLE IF EXISTS `WEB_ARTICLE`;

CREATE TABLE `WEB_ARTICLE` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(50) NOT NULL,
  `URL_SLUG` varchar(50) DEFAULT NULL,
  `FEATURE_IMAGE` varchar(255) DEFAULT NULL,
  `THUMBNAIL_IMAGE` varchar(255) DEFAULT NULL,
  `SUMMARY` text DEFAULT NULL,
  `BODY` longtext DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `TAGS` varchar(255) DEFAULT NULL,
  `META_KEYWARDS` text DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `IS_FEATURE` tinyint(1) DEFAULT 0,
  `ARTICLE_CATEGORY` int(5) DEFAULT NULL,
  `AUTHOR_NAME` varchar(100) DEFAULT NULL,
  `TOTAL_HIT` int(11) DEFAULT 1,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=73 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_ARTICLE_CATEGORY` */

DROP TABLE IF EXISTS `WEB_ARTICLE_CATEGORY`;

CREATE TABLE `WEB_ARTICLE_CATEGORY` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `URL_SLUG` varchar(50) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `META_KEYWARDS` text DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  `ORDER_ID` int(5) DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_CART` */

DROP TABLE IF EXISTS `WEB_CART`;

CREATE TABLE `WEB_CART` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `F_WAREHOUSE_NO` int(2) DEFAULT NULL,
  `F_SHIPPMENT_NO` int(11) DEFAULT NULL,
  `SESSION_ID` varchar(255) NOT NULL,
  `TOTAL_ITEM_QTY` int(5) DEFAULT 0,
  `REGULAR_PRICE` float DEFAULT 0,
  `INSTALLMENT_PRICE` float DEFAULT NULL,
  `IS_BOOKING` int(5) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `PAYMENT_PLAN` int(1) DEFAULT 1,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=274 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_FAQ` */

DROP TABLE IF EXISTS `WEB_FAQ`;

CREATE TABLE `WEB_FAQ` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `QUESTION` varchar(255) DEFAULT NULL,
  `ANSWER` text DEFAULT NULL,
  `ORDER_ID` tinyint(4) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_NEWS` */

DROP TABLE IF EXISTS `WEB_NEWS`;

CREATE TABLE `WEB_NEWS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `SUBTITLE` varchar(20) DEFAULT NULL,
  `SUMMERY` varchar(255) DEFAULT NULL,
  `DESCRIPTION` longtext DEFAULT NULL,
  `URL_SLUG` varchar(200) DEFAULT NULL,
  `FEATURE_IMAGE` varchar(200) DEFAULT NULL,
  `THUMB_IMAGE` varchar(200) DEFAULT NULL,
  `LANGUAGE_ID` int(1) DEFAULT 1,
  `NEWS_CATEGORY` int(11) DEFAULT NULL,
  `ORDER_BY` int(11) DEFAULT NULL,
  `IS_FEATURE` int(1) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `CREATED_BY` int(4) DEFAULT NULL,
  `CREATED_ON` datetime DEFAULT NULL,
  `MODIFIED_BY` int(4) DEFAULT NULL,
  `MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_PAGES` */

DROP TABLE IF EXISTS `WEB_PAGES`;

CREATE TABLE `WEB_PAGES` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(255) NOT NULL,
  `SUB_TITLE` varchar(255) DEFAULT NULL,
  `URL_SLUG` varchar(255) NOT NULL,
  `POSITION` varchar(10) DEFAULT NULL,
  `BODY` longtext DEFAULT NULL,
  `FEATURE_IMAGE` varchar(255) DEFAULT NULL,
  `BANNER` varchar(255) DEFAULT NULL,
  `ORDER_ID` tinyint(5) DEFAULT NULL,
  `IS_ACTIVE` tinyint(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `META_KEYWARDS` varchar(255) DEFAULT NULL,
  `META_DESCRIPTION` text DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_PRD_REVIEWS` */

DROP TABLE IF EXISTS `WEB_PRD_REVIEWS`;

CREATE TABLE `WEB_PRD_REVIEWS` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(255) DEFAULT NULL,
  `RATING` int(4) DEFAULT NULL,
  `REVIEW_TEXT` text DEFAULT NULL,
  `LANGUAGE_ID` int(1) DEFAULT 1,
  `IS_FEATURE` int(1) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `WEB_SLIDER` */

DROP TABLE IF EXISTS `WEB_SLIDER`;

CREATE TABLE `WEB_SLIDER` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(200) DEFAULT NULL,
  `SUBTITLE` varchar(20) DEFAULT NULL,
  `BANNER` varchar(200) DEFAULT NULL,
  `IMAGE_NAME` varchar(255) DEFAULT NULL,
  `URL_LINK` varchar(200) DEFAULT NULL,
  `ORDER_BY` int(11) DEFAULT NULL,
  `IS_FEATURE` int(1) DEFAULT 0,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `CREATED_BY` int(4) DEFAULT NULL,
  `CREATED_ON` datetime DEFAULT NULL,
  `MODIFIED_BY` int(4) DEFAULT NULL,
  `MODIFIED_ON` datetime DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='WEB_NEWS';

/*Table structure for table `WEB_WISHLIST` */

DROP TABLE IF EXISTS `WEB_WISHLIST`;

CREATE TABLE `WEB_WISHLIST` (
  `PK_NO` int(11) NOT NULL AUTO_INCREMENT,
  `F_PRD_MASTER_NO` int(11) DEFAULT NULL,
  `F_PRD_VARIANT_NO` int(11) DEFAULT NULL,
  `F_CUSTOMER_NO` int(11) DEFAULT NULL,
  `SESSION_ID` varchar(255) NOT NULL,
  `IS_ACTIVE` int(1) DEFAULT 1,
  `SS_MODIFIED_ON` datetime DEFAULT NULL,
  `SS_CREATED_ON` datetime DEFAULT NULL,
  `F_SS_CREATED_BY` int(4) DEFAULT NULL,
  `F_SS_MODIFIED_BY` int(4) DEFAULT NULL,
  PRIMARY KEY (`PK_NO`)
) ENGINE=InnoDB AUTO_INCREMENT=162 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

/*Table structure for table `admin_users` */

DROP TABLE IF EXISTS `admin_users`;

CREATE TABLE `admin_users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `first_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `last_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `designation` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `auth_id` bigint(20) unsigned NOT NULL,
  `profile_pic` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `profile_pic_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `pic_mime_type` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `status` tinyint(4) NOT NULL DEFAULT 1,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `admin_users_auth_id_foreign` (`auth_id`),
  CONSTRAINT `admin_users_auth_id_foreign` FOREIGN KEY (`auth_id`) REFERENCES `auths` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `auth_role` */

DROP TABLE IF EXISTS `auth_role`;

CREATE TABLE `auth_role` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `auth_id` bigint(20) unsigned NOT NULL,
  `role_id` bigint(20) unsigned NOT NULL,
  `USER_GROUP_ID` int(11) DEFAULT NULL,
  `CUSTOM_PERMISSION` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `auths` */

DROP TABLE IF EXISTS `auths`;

CREATE TABLE `auths` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email` varchar(150) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `mobile_no` varchar(14) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `salt` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `model_id` bigint(20) unsigned NOT NULL COMMENT '1 = Admin',
  `gender` tinyint(4) NOT NULL DEFAULT 1,
  `dob` date DEFAULT NULL,
  `facebook_id` bigint(20) DEFAULT NULL,
  `google_id` bigint(20) DEFAULT NULL,
  `activation_code` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `activation_code_expire` datetime DEFAULT NULL,
  `is_first_login` tinyint(4) NOT NULL DEFAULT 1,
  `user_type` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0 = Admin',
  `can_login` tinyint(4) NOT NULL DEFAULT 1 COMMENT '1 = Can login, 0 = Can not login',
  `status` tinyint(4) NOT NULL DEFAULT 1 COMMENT '1 = Active, 0 = Inactive',
  `F_AGENT_NO` int(10) DEFAULT 0,
  `f_parent_user_id` int(11) DEFAULT 0,
  `is_secondary_user` int(1) DEFAULT 0,
  `created_by` int(10) unsigned NOT NULL DEFAULT 0,
  `updated_by` int(10) unsigned NOT NULL DEFAULT 0,
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auths_mobile_no_unique` (`mobile_no`),
  UNIQUE KEY `auths_username_unique` (`username`),
  UNIQUE KEY `auths_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=69 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `migrations` */

DROP TABLE IF EXISTS `migrations`;

CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `models` */

DROP TABLE IF EXISTS `models`;

CREATE TABLE `models` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `display_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `model_key` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL,
  `model_class_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT 1,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `password_resets` */

DROP TABLE IF EXISTS `password_resets`;

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `permission_groups` */

DROP TABLE IF EXISTS `permission_groups`;

CREATE TABLE `permission_groups` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `group_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT 0,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `permissions` */

DROP TABLE IF EXISTS `permissions`;

CREATE TABLE `permissions` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `permission_group_id` bigint(20) unsigned NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT 0,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `permissions_permission_group_id_foreign` (`permission_group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=204 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `role_permission` */

DROP TABLE IF EXISTS `role_permission`;

CREATE TABLE `role_permission` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `permissions` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `role_id` bigint(20) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `role_permission_role_id_foreign` (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `roles` */

DROP TABLE IF EXISTS `roles`;

CREATE TABLE `roles` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `role_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT 0,
  `created_by` int(11) NOT NULL,
  `edited_by` int(11) NOT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `t` */

DROP TABLE IF EXISTS `t`;

CREATE TABLE `t` (
  `t` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

/*Table structure for table `tokens` */

DROP TABLE IF EXISTS `tokens`;

CREATE TABLE `tokens` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `auth_id` bigint(20) unsigned NOT NULL,
  `user_type` tinyint(4) NOT NULL DEFAULT 0,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `client` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `is_expire` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0 = Alive, 0 = Expire',
  `started_at` datetime NOT NULL,
  `expire_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `tokens_auth_id_foreign` (`auth_id`),
  CONSTRAINT `tokens_auth_id_foreign` FOREIGN KEY (`auth_id`) REFERENCES `auths` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=733 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Table structure for table `user_groups` */

DROP TABLE IF EXISTS `user_groups`;

CREATE TABLE `user_groups` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `group_name` varchar(255) NOT NULL,
  `ROLE_ID` int(11) DEFAULT NULL,
  `status` tinyint(4) NOT NULL DEFAULT 0,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

/*Table structure for table `verify_mobile_no` */

DROP TABLE IF EXISTS `verify_mobile_no`;

CREATE TABLE `verify_mobile_no` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `mobile_no` varchar(14) COLLATE utf8mb4_unicode_ci NOT NULL,
  `code` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_type` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0 = Admin, 1 = User',
  `purpose` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0 = Verify-mobile,  1 = Reset-password 2= Forgot-password',
  `status` tinyint(4) NOT NULL DEFAULT 1 COMMENT '1 = Last-one, 0 = Used, 2 = Unused',
  `expire_at` datetime NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/* Trigger structure for table `ACC_BANK_ACC` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_BANK_ACC_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_BANK_ACC_INSERT` BEFORE INSERT ON `ACC_BANK_ACC` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_BANK_ACC
				where F_ACCOUNT_SOURCE_NO = NEW.F_ACCOUNT_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END */$$


DELIMITER ;

/* Trigger structure for table `ACC_BANK_TXN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_BANK_TXN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_BANK_TXN_INSERT` BEFORE INSERT ON `ACC_BANK_TXN` FOR EACH ROW BEGIN
declare VAR_CODE int(20) default 0;
select IFNULL(max(CODE),20000) into VAR_CODE
        from ACC_BANK_TXN;
        SET NEW.CODE = VAR_CODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_BANK_TXN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_BANK_TXN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_BANK_TXN_INSERT` AFTER INSERT ON `ACC_BANK_TXN` FOR EACH ROW 
BEGIN

IF NEW.IS_COD = 1 THEN

    UPDATE ACC_PAYMENT_BANK_ACC SET
        BALACNE_BUFFER = BALACNE_BUFFER + NEW.AMOUNT_BUFFER
        ,BALANCE_ACTUAL = BALANCE_ACTUAL + NEW.AMOUNT_ACTUAL
        WHERE PK_NO = NEW.F_ACC_PAYMENT_BANK_NO;

END IF;


END */$$


DELIMITER ;

/* Trigger structure for table `ACC_CUSTOMER_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_CUSTOMER_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_CUSTOMER_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_CUSTOMER_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_CUSTOMER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        CUSTOMER_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_CUSTOMER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_CUSTOMERS
    WHERE SLS_CUSTOMERS.PK_NO = NEW.F_CUSTOMER_NO
    ;

    SET NEW.CUSTOMER_NO = VAR_CUSTOMER_NO;
    SET NEW.CUSTOMER_NAME = VAR_NAME;
    SET NEW.CUSTOMER_CELL = VAR_MOBILE_NO;

    SELECT
        NAME
        ,EXCHANGE_RATE_GB
        INTO
        VAR_CNAME
        ,VAR_EXCHANGE_RATE_GB
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;
    SET NEW.CONVERSION_RATE_TO_MR = VAR_EXCHANGE_RATE_GB;


    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `ACC_ORDER_PAYMENT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_ORDER_PAYMENT_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_ORDER_PAYMENT_INSERT` AFTER INSERT ON `ACC_ORDER_PAYMENT` FOR EACH ROW BEGIN

declare VAR_PAYMENT_CONFIRMED_STATUS INT(11) DEFAULT 0;
declare VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;

    IF NEW.IS_CUSTOMER = 1 THEN

        SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_CUSTOMER_PAYMENTS
            WHERE PK_NO = NEW.F_ACC_CUSTOMER_PAYMENT_NO ;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP+NEW.PAYMENT_AMOUNT
            WHERE PK_NO = NEW.ORDER_NO;
        END IF;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP  = IFNULL(ORDER_BUFFER_TOPUP,0)+NEW.PAYMENT_AMOUNT,
                ORDER_ACTUAL_TOPUP = IFNULL(ORDER_ACTUAL_TOPUP,0) + NEW.PAYMENT_AMOUNT
                WHERE PK_NO = NEW.ORDER_NO;

            SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = NEW.CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            UPDATE SLS_CUSTOMERS
                SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                WHERE PK_NO = NEW.CUSTOMER_NO;

        END IF;

    END IF;


    IF NEW.IS_CUSTOMER = 0 THEN

        SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_RESELLER_PAYMENTS
            WHERE PK_NO = NEW.F_ACC_RESELLER_PAYMENT_NO ;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP+NEW.PAYMENT_AMOUNT
            WHERE PK_NO = NEW.ORDER_NO;
        END IF;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP  = IFNULL(ORDER_BUFFER_TOPUP,0)+NEW.PAYMENT_AMOUNT,
                ORDER_ACTUAL_TOPUP = IFNULL(ORDER_ACTUAL_TOPUP,0) + NEW.PAYMENT_AMOUNT
                WHERE PK_NO = NEW.ORDER_NO;

            SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                FROM ACC_RESELLER_PAYMENTS WHERE F_RESELLER_NO = NEW.RESELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            UPDATE SLS_RESELLERS
                SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                WHERE PK_NO = NEW.RESELLER_NO;

        END IF;



    END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_ORDER_PAYMENT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_ORDER_PAYMENT_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_ORDER_PAYMENT_DELETE` AFTER DELETE ON `ACC_ORDER_PAYMENT` FOR EACH ROW BEGIN

declare VAR_F_BOOKING_NO INT(11) DEFAULT 0;
declare VAR_PAYMENT_CONFIRMED_STATUS INT(11) DEFAULT 0;
declare VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
declare VAR_PAYMENT_AMOUNT FLOAT DEFAULT 0;

    IF OLD.IS_CUSTOMER = 1 THEN
        -- CUSTPMER

            SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_CUSTOMER_PAYMENTS
            WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO ;

            IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
                    UPDATE SLS_ORDER
                    SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT
                    WHERE PK_NO = OLD.ORDER_NO;

                    UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + VAR_PAYMENT_AMOUNT
                    WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;
            ELSE
                    UPDATE SLS_ORDER
                        SET ORDER_BUFFER_TOPUP  = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT,
                        ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.ORDER_NO;

                    UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;

                    SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                        FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = OLD.CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

                    UPDATE SLS_CUSTOMERS
                        SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                        WHERE PK_NO = OLD.CUSTOMER_NO;


            END IF;

    ELSE

            SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
                FROM ACC_RESELLER_PAYMENTS
                WHERE PK_NO = OLD.F_ACC_RESELLER_PAYMENT_NO ;


                IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
                        UPDATE SLS_ORDER
                        SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.ORDER_NO;

                         UPDATE ACC_RESELLER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.F_ACC_RESELLER_PAYMENT_NO;

                ELSE
                        UPDATE SLS_ORDER
                            SET ORDER_BUFFER_TOPUP  = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT,
                            ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - OLD.PAYMENT_AMOUNT
                            WHERE PK_NO = OLD.ORDER_NO;

                        UPDATE ACC_RESELLER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.F_ACC_RESELLER_PAYMENT_NO;

                        SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                            FROM ACC_RESELLER_PAYMENTS WHERE F_RESELLER_NO = OLD.RESELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

                        UPDATE SLS_RESELLERS
                            SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                            WHERE PK_NO = OLD.RESELLER_NO;

                END IF;
    END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_METHODS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_PAYMENT_METHODS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_PAYMENT_METHODS_INSERT` BEFORE INSERT ON `ACC_PAYMENT_METHODS` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_PAYMENT_METHODS
				where F_ACC_SOURCE_NO = NEW.F_ACC_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END */$$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_SOURCE` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_PAYMENT_SOURCE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_PAYMENT_SOURCE` BEFORE INSERT ON `ACC_PAYMENT_SOURCE` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;


select auto_increment into PKCODE
from information_schema.tables
where table_name = 'ACC_PAYMENT_SOURCE'
and table_schema = database();
	SET NEW.CODE = PKCODE+10 ;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_RESELLER_CUSTOMER_TX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_ACC_RESELLER_CUSTOMER_TX_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_ACC_RESELLER_CUSTOMER_TX_INSERT` AFTER INSERT ON `ACC_RESELLER_CUSTOMER_TX` FOR EACH ROW BEGIN


IF NEW.F_FROM_CUSTOMER_NO IS NOT NULL AND NEW.F_TO_CUSTOMER IS NOT NULL THEN

    UPDATE SLS_CUSTOMERS
    SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0) - NEW.AMOUNT,
     CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0) -  NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_NO;

    UPDATE ACC_CUSTOMER_PAYMENTS
    SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR - NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_PAYMENT_NO ;

    UPDATE SLS_CUSTOMERS
    SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0) + NEW.AMOUNT,
     CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0) +  NEW.AMOUNT
    WHERE PK_NO = NEW.F_TO_CUSTOMER;

END IF;


  IF NEW.F_FROM_RESELLER_NO IS NOT NULL AND NEW.F_TO_RESELLER_NO IS NOT NULL THEN

    UPDATE SLS_RESELLERS
    SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0) - NEW.AMOUNT,
     CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0) -  NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_NO;

    UPDATE ACC_CUSTOMER_PAYMENTS
    SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR - NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_RESELLER_PAYMENT_NO ;

    UPDATE SLS_RESELLERS
    SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0) + NEW.AMOUNT,
     CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0) +  NEW.AMOUNT
    WHERE PK_NO = NEW.F_TO_CUSTOMER;

END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `ACC_RESELLER_PAYMENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_ACC_RESELLER_PAYMENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_ACC_RESELLER_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_RESELLER_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_RESELLER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        RESELLER_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_RESELLER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_RESELLERS
    WHERE SLS_RESELLERS.PK_NO = NEW.F_RESELLER_NO
    ;

    SET NEW.RESELLER_NO = VAR_RESELLER_NO;
    SET NEW.RESELLER_NAME = VAR_NAME;
    SET NEW.RESELLER_CELL = VAR_MOBILE_NO;

    SELECT
        NAME
        ,EXCHANGE_RATE_GB
        INTO
        VAR_CNAME
        ,VAR_EXCHANGE_RATE_GB
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;
    SET NEW.CONVERSION_RATE_TO_MR = VAR_EXCHANGE_RATE_GB;


    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` BEFORE INSERT ON `INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN



                SET NEW.IS_PROCESS_COMPLETE = 0 ;
                SET NEW.PROCESS_START_TIME = NOW() ;

                     


END */$$


DELIMITER ;

/* Trigger structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` AFTER INSERT ON `INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN



               

                CALL  PROC_INV_STOCK_PRC_STOCK_IN_MAP(NEW.PK_NO); 
                
                /*UPDATE INV_STOCK_PRC_STOCK_IN_MAP
                SET PROCESS_COMPLETE_TIME = NOW()
                WHERE PK_NO=NEW.PK_NO;  */
                
                UPDATE PRC_STOCK_IN 
                SET INV_STOCK_RECORD_GENERATED = 1 
                WHERE PK_NO = NEW.F_PRC_STOCK_IN_NO;    


END */$$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRC_STOCK_IN_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRC_STOCK_IN_INSERT` BEFORE INSERT ON `PRC_STOCK_IN` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from PRC_STOCK_IN;
SET NEW.CODE = PKCODE+1 ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRC_STOCK_IN_DETAILS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRC_STOCK_IN_DETAILS_INSERT` BEFORE INSERT ON `PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN
	declare PARENT_CODE int(11) default 0;
	declare PKCODE varchar(20) default 0;
	declare VAR_RECIEVED_QTY int(11) default 0;
	declare VAR_TOTAL_QTY int(11) default 0;
	declare VAR_FAULTY_QTY int(11) default 0;
	declare VAR_LINE_TOTAL_VAT_MR FLOAT default 0;
	declare VAR_SUB_TOTAL_MR_EV FLOAT default 0;
	declare VAR_REC_TOTAL_MR_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_MR_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_GBP FLOAT default 0;
	declare VAR_SUB_TOTAL_GBP_EV FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_AC FLOAT default 0;
	declare VAR_SUB_TOTAL_AC_EV FLOAT default 0;
	declare VAR_REC_TOTAL_AC_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_AC_ONLY_VAT FLOAT default 0;

	/*-----------FOR CODE---------------*/
	select CODE into PARENT_CODE
	from PRC_STOCK_IN
	where PK_NO = NEW.F_PRC_STOCK_IN ;

	select IFNULL(max(CODE),0) into PKCODE
	from PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	IF PKCODE = 0 THEN
		SET NEW.CODE = CONCAT(PARENT_CODE*100,PKCODE+1) ;
	ELSE
		SET NEW.CODE = PKCODE+1 ;
	END IF;
	/*-----------END CODE---------------*/

	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	select 
		IFNULL(SUM(RECIEVED_QTY),0) 
		,IFNULL(SUM(QTY),0) 
		,IFNULL(SUM(FAULTY_QTY),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_MR),0) 
		,IFNULL(SUM(SUB_TOTAL_MR_EV),0) 
		,IFNULL(SUM(REC_TOTAL_MR_WITH_VAT),0) 
		,IFNULL(SUM(REC_TOTAL_MR_ONLY_VAT),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_GBP),0) 
		,IFNULL(SUM(SUB_TOTAL_GBP_EV),0) 
		,IFNULL(SUM(REC_TOTAL_GBP_WITH_VAT),0) 
		,IFNULL(SUM(REC_TOTAL_GBP_ONLY_VAT),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_AC),0) 
		,IFNULL(SUM(SUB_TOTAL_AC_EV),0) 
		,IFNULL(SUM(REC_TOTAL_AC_WITH_VAT),0) 
		,IFNULL(SUM(REC_TOTAL_AC_ONLY_VAT),0) 
	INTO 
		VAR_RECIEVED_QTY 
		,VAR_TOTAL_QTY
		,VAR_FAULTY_QTY
		,VAR_LINE_TOTAL_VAT_MR
		,VAR_SUB_TOTAL_MR_EV
		,VAR_REC_TOTAL_MR_WITH_VAT
		,VAR_REC_TOTAL_MR_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_GBP
		,VAR_SUB_TOTAL_GBP_EV
		,VAR_REC_TOTAL_GBP_WITH_VAT
		,VAR_REC_TOTAL_GBP_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_AC
		,VAR_SUB_TOTAL_AC_EV
		,VAR_REC_TOTAL_AC_WITH_VAT
		,VAR_REC_TOTAL_AC_ONLY_VAT
	from PRC_STOCK_IN_DETAILS 
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	UPDATE PRC_STOCK_IN
		SET 
			RECIEVED_QTY 					= VAR_RECIEVED_QTY+NEW.RECIEVED_QTY 
			,TOTAL_QTY 						= VAR_TOTAL_QTY+NEW.QTY
			,FAULTY_QTY 					= VAR_FAULTY_QTY+NEW.FAULTY_QTY
			
			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR+VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT 	= VAR_REC_TOTAL_MR_WITH_VAT+NEW.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT 	= VAR_REC_TOTAL_MR_ONLY_VAT+NEW.REC_TOTAL_MR_ONLY_VAT
			
			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP+VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT 		= VAR_REC_TOTAL_GBP_WITH_VAT+NEW.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT 		= VAR_REC_TOTAL_GBP_ONLY_VAT+NEW.REC_TOTAL_GBP_ONLY_VAT
	
			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC+VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT 		= VAR_REC_TOTAL_AC_WITH_VAT+NEW.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT 		= VAR_REC_TOTAL_AC_ONLY_VAT+NEW.REC_TOTAL_AC_ONLY_VAT
	
	
	WHERE PK_NO = NEW.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END */$$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRC_STOCK_IN_DETAILS_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRC_STOCK_IN_DETAILS_DELETE` AFTER DELETE ON `PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN

	
	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	
	UPDATE PRC_STOCK_IN
		SET 
			RECIEVED_QTY 					= RECIEVED_QTY-OLD.RECIEVED_QTY 
			,TOTAL_QTY 						= TOTAL_QTY-OLD.QTY
			,FAULTY_QTY 					= FAULTY_QTY-OLD.FAULTY_QTY
			
			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= INVOICE_TOTAL_VAT_ACTUAL_MR-OLD.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= INVOICE_TOTAL_EV_ACTUAL_MR-OLD.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= INVOICE_TOTAL_ACTUAL_MR-(OLD.LINE_TOTAL_VAT_MR+OLD.SUB_TOTAL_MR_EV)
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT - OLD.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT - OLD.REC_TOTAL_MR_ONLY_VAT 
			
			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= INVOICE_TOTAL_VAT_ACTUAL_GBP-OLD.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= INVOICE_TOTAL_EV_ACTUAL_GBP-OLD.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= INVOICE_TOTAL_ACTUAL_GBP-(OLD.LINE_TOTAL_VAT_GBP+OLD.SUB_TOTAL_GBP_EV)
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT - OLD.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT - OLD.REC_TOTAL_GBP_ONLY_VAT
	
			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= INVOICE_TOTAL_VAT_ACTUAL_AC-OLD.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= INVOICE_TOTAL_EV_ACTUAL_AC-OLD.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= INVOICE_TOTAL_ACTUAL_AC-(OLD.LINE_TOTAL_VAT_AC+OLD.SUB_TOTAL_AC_EV)
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT - OLD.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT - OLD.REC_TOTAL_AC_ONLY_VAT
	
	
	WHERE PK_NO = OLD.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END */$$


DELIMITER ;

/* Trigger structure for table `PRC_VENDORS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRC_VENDORS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRC_VENDORS_INSERT` BEFORE INSERT ON `PRC_VENDORS` FOR EACH ROW BEGIN
declare PKCODE varchar(20) default 0;

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRC_VENDORS'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_BRAND` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_BRAND_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_BRAND_INSERT` BEFORE INSERT ON `PRD_BRAND` FOR EACH ROW BEGIN
declare PKCODE varchar(20) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_BRAND'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END IF;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_CATEGORY` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_CATEGORY_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_CATEGORY_INSERT` BEFORE INSERT ON `PRD_CATEGORY` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_CATEGORY'
and table_schema = database();
	SET NEW.CODE = PKCODE+100 ;
END IF;
END */$$


DELIMITER ;

/* Trigger structure for table `PRD_COLOR` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_COLOR_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_COLOR_INSERT` BEFORE INSERT ON `PRD_COLOR` FOR EACH ROW BEGIN
	declare PKCODE int(3) default 0;

	select IFNULL(max(CODE),0) into PKCODE
		from PRD_COLOR
		where F_BRAND = NEW.F_BRAND;
		SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MASTER_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MASTER_SETUP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MASTER_SETUP_INSERT` BEFORE INSERT ON `PRD_MASTER_SETUP` FOR EACH ROW BEGIN
			declare PKCODE int(5) default 0 ;
			declare COMPOSITE_CODE varchar(80) default null ;
			declare V_MKT_PREFIX varchar(50) default null;
			declare V_MKT_CODE int(6) default 0;

			select PRD_MODEL.COMPOSITE_CODE into V_MKT_PREFIX
				from PRD_MODEL 
				where PRD_MODEL.PK_NO = NEW.F_MODEL ;

			select IFNULL(max(MKT_CODE),1000) into  V_MKT_CODE 
				from PRD_MASTER_SETUP ;
			SET NEW.MKT_CODE = V_MKT_CODE+1 ;
			SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT(V_MKT_PREFIX,V_MKT_CODE+1) ;

			select PRD_SUB_CATEGORY.COMPOSITE_CODE into COMPOSITE_CODE
				from PRD_SUB_CATEGORY
				where PRD_SUB_CATEGORY.PK_NO = NEW.F_PRD_SUB_CATEGORY_ID ;

			select IFNULL(max(CODE),100) as counter into PKCODE
				from PRD_MASTER_SETUP
				where F_PRD_SUB_CATEGORY_ID = NEW.F_PRD_SUB_CATEGORY_ID ;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MASTER_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MASTER_SETUP_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MASTER_SETUP_UPDATE` BEFORE UPDATE ON `PRD_MASTER_SETUP` FOR EACH ROW BEGIN
			declare PKCODE int(5) default 0 ;
			declare COMPOSITE_CODE varchar(80) default null ;
			declare V_MKT_PREFIX varchar(50) default null;
			declare V_MKT_CODE int(4) default 0;

			select PRD_MODEL.COMPOSITE_CODE into V_MKT_PREFIX
				from PRD_MODEL 
				where PRD_MODEL.PK_NO = NEW.F_MODEL ;

			-- select IFNULL(max(MKT_CODE),100) into  V_MKT_CODE 
				-- from PRD_MASTER_SETUP 
				-- where F_MODEL = NEW.F_MODEL and PK_NO <> NEW.PK_NO ;
			-- SET NEW.MKT_CODE = V_MKT_CODE+1 ;
			  SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT(V_MKT_PREFIX,NEW.MKT_CODE) ;

			select PRD_SUB_CATEGORY.COMPOSITE_CODE into COMPOSITE_CODE
				from PRD_SUB_CATEGORY
				where PRD_SUB_CATEGORY.PK_NO = NEW.F_PRD_SUB_CATEGORY_ID ;

			select IFNULL(max(CODE),100) as counter into PKCODE
				from PRD_MASTER_SETUP
				where F_PRD_SUB_CATEGORY_ID = NEW.F_PRD_SUB_CATEGORY_ID and PK_NO <> NEW.PK_NO ;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MODEL_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MODEL_INSERT` BEFORE INSERT ON `PRD_MODEL` FOR EACH ROW BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO ;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_MODEL_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_MODEL_UPDATE` BEFORE UPDATE ON `PRD_MODEL` FOR EACH ROW BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


		END */$$


DELIMITER ;

/* Trigger structure for table `PRD_SIZE` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_SIZE_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_SIZE_INSERT` BEFORE INSERT ON `PRD_SIZE` FOR EACH ROW BEGIN
	declare PKCODE varchar(20) default 0;

	select IFNULL(max(CODE),0) into PKCODE
		from PRD_SIZE
		where PRD_SIZE.F_BRAND_NO = NEW.F_BRAND_NO;
		SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `PRD_SUB_CATEGORY` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_SUB_CATEGORY_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_SUB_CATEGORY_INSERT` BEFORE INSERT ON `PRD_SUB_CATEGORY` FOR EACH ROW BEGIN
			declare PKCODE int default 0 ;
			declare CATEGORY_CODE int default 0 ;

			select CODE into CATEGORY_CODE
				from PRD_CATEGORY
				where PK_NO = NEW.F_PRD_CATEGORY_NO ;

			select IFNULL(MAX(CODE),100) as counter into PKCODE
				from PRD_SUB_CATEGORY
				where F_PRD_CATEGORY_NO = NEW.F_PRD_CATEGORY_NO;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(CATEGORY_CODE,PKCODE+1) ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_VARIANT_SETUP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_VARIANT_SETUP_INSERT` BEFORE INSERT ON `PRD_VARIANT_SETUP` FOR EACH ROW 
    
     BEGIN
        DECLARE PKCODE INT(4) DEFAULT 0 ;
        DECLARE VAR_COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
        DECLARE VAR_KEYWORD_SEARCH VARCHAR(4000) DEFAULT NULL ;
        DECLARE VAR_NARRATION VARCHAR(4000) DEFAULT NULL ;
        DECLARE VAR_IG_CODE INT(4) DEFAULT 0 ;
        DECLARE VAR_IG_COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;             
        DECLARE VAR_F_BRAND INT DEFAULT 0 ;
        DECLARE VAR_BRAND_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_MODEL INT DEFAULT 0 ;
        DECLARE VAR_MODEL_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_PRD_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_PRD_SUB_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_SUB_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;

 SELECT 
PRD_MASTER_SETUP.COMPOSITE_CODE
, PRD_MASTER_SETUP.MKT_ID_COMPOSITE_CODE_PREFIX
, PRD_MASTER_SETUP.F_BRAND
, PRD_MASTER_SETUP.BRAND_NAME
, PRD_MASTER_SETUP.F_MODEL
, PRD_MASTER_SETUP.MODEL_NAME
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
, PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
, PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
INTO
  VAR_COMPOSITE_CODE 
, VAR_IG_COMPOSITE_CODE
, VAR_F_BRAND
, VAR_BRAND_NAME 
, VAR_F_MODEL 
, VAR_MODEL_NAME 
, VAR_F_PRD_CATEGORY_ID 
, VAR_PRD_CATEGORY_NAME 
, VAR_F_PRD_SUB_CATEGORY_ID 
, VAR_PRD_SUB_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 LEFT JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID   
 LEFT JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID 
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;  
 

            SELECT IFNULL(MAX(MKT_CODE),100) INTO VAR_IG_CODE
                FROM PRD_VARIANT_SETUP
                WHERE F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO ;

            SELECT IFNULL(MAX(CODE),100) INTO PKCODE
                FROM PRD_VARIANT_SETUP
                WHERE F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO;
            

            SET NEW.CODE = PKCODE+1 ;
            SET NEW.COMPOSITE_CODE = CONCAT(VAR_COMPOSITE_CODE,PKCODE+1) ;

            SET NEW.MKT_CODE = VAR_IG_CODE+1 ;
            SET NEW.MRK_ID_COMPOSITE_CODE = CONCAT(VAR_IG_COMPOSITE_CODE, VAR_IG_CODE+1) ;

            IF NEW.IS_BARCODE_BY_MFG = 0 THEN
                SET NEW.BARCODE = CONCAT(VAR_COMPOSITE_CODE,PKCODE+1) ;
            END IF;
            INSERT INTO S VALUES(VAR_IG_COMPOSITE_CODE);
            INSERT INTO S VALUES(VAR_COMPOSITE_CODE);




            SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
            SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR, ''), ' ', IFNULL(VAR_BRAND_NAME, ''),' ', IFNULL(VAR_MODEL_NAME, ''),' ', IFNULL(VAR_PRD_CATEGORY_NAME, ''),' ', IFNULL(VAR_PRD_SUB_CATEGORY_NAME, ''),' ' , IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(NEW.PREFERRED_SHIPPING_METHOD,''), ' ', IFNULL(VAR_NARRATION,''));
            SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

            SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;


END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_PRD_VARIANT_SETUP_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_PRD_VARIANT_SETUP_UPDATE` BEFORE UPDATE ON `PRD_VARIANT_SETUP` FOR EACH ROW BEGIN
			DECLARE VAR_KEYWORD_SEARCH TEXT DEFAULT NULL ;
			DECLARE VAR_NARRATION TEXT DEFAULT NULL ; 
            DECLARE VAR_F_BRAND INT DEFAULT 0 ;
        DECLARE VAR_BRAND_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_MODEL INT DEFAULT 0 ;
        DECLARE VAR_MODEL_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_PRD_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_PRD_SUB_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_SUB_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;   
        DECLARE VAR_IG_COMPOSITE_CODE VARCHAR(50) DEFAULT NULL ; 

SELECT 
PRD_MASTER_SETUP.MKT_ID_COMPOSITE_CODE_PREFIX
, PRD_MASTER_SETUP.F_BRAND
, PRD_MASTER_SETUP.BRAND_NAME
, PRD_MASTER_SETUP.F_MODEL
, PRD_MASTER_SETUP.MODEL_NAME
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
, PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
, PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
INTO
VAR_IG_COMPOSITE_CODE
,VAR_F_BRAND
, VAR_BRAND_NAME 
, VAR_F_MODEL 
, VAR_MODEL_NAME 
, VAR_F_PRD_CATEGORY_ID 
, VAR_PRD_CATEGORY_NAME 
, VAR_F_PRD_SUB_CATEGORY_ID 
, VAR_PRD_SUB_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID   
 JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID 
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;  

			 SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
			SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR, ''), ' ', IFNULL(VAR_BRAND_NAME, ''),' ', IFNULL(VAR_MODEL_NAME, ''),' ', IFNULL(VAR_PRD_CATEGORY_NAME, ''),' ', IFNULL(VAR_PRD_SUB_CATEGORY_NAME, ''),' ', IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(NEW.PREFERRED_SHIPPING_METHOD,''), ' ', IFNULL(VAR_NARRATION,''));
			SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

			SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ; 
            
            SET NEW.MRK_ID_COMPOSITE_CODE = CONCAT(VAR_IG_COMPOSITE_CODE, NEW.MKT_CODE) ;
		 


		END */$$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_PRD_VARIANT_SETUP_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_PRD_VARIANT_SETUP_UPDATE` AFTER UPDATE ON `PRD_VARIANT_SETUP` FOR EACH ROW 
		BEGIN
declare VAR_F_BRAND INT default 0 ;
declare VAR_BRAND_NAME varchar(50) default null ;
declare VAR_F_MODEL INT default 0 ;
declare VAR_MODEL_NAME varchar(50) default NULL ;
declare VAR_F_PRD_CATEGORY_ID INT default 0 ;
declare VAR_PRD_CATEGORY_NAME varchar(50) default NULL ;
declare VAR_F_PRD_SUB_CATEGORY_ID INT default 0 ;
declare VAR_PRD_SUB_CATEGORY_NAME varchar(50) default null ;


IF NEW.BARCODE IS NOT NULL THEN 
UPDATE INV_STOCK 
SET BARCODE = NEW.BARCODE 
WHERE F_PRD_VARIANT_NO = NEW.PK_NO;
END IF;  

SELECT PRD_MASTER_SETUP.F_BRAND
, PRD_MASTER_SETUP.BRAND_NAME
, PRD_MASTER_SETUP.F_MODEL
, PRD_MASTER_SETUP.MODEL_NAME
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
, PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
, PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
INTO VAR_F_BRAND
, VAR_BRAND_NAME 
, VAR_F_MODEL 
, VAR_MODEL_NAME 
, VAR_F_PRD_CATEGORY_ID 
, VAR_PRD_CATEGORY_NAME 
, VAR_F_PRD_SUB_CATEGORY_ID 
, VAR_PRD_SUB_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID   
 JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID 
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;        
         
UPDATE INV_STOCK
            SET AIR_FREIGHT_COST = NEW.AIR_FREIGHT_CHARGE 
            , SEA_FREIGHT_COST = NEW.SEA_FREIGHT_CHARGE 
            , INSTALLMENT_PRICE = NEW.INSTALLMENT_PRICE 
            , REGULAR_PRICE = NEW.REGULAR_PRICE 
            , SM_COST = NEW.LOCAL_POSTAGE
            , SS_COST = NEW.INTER_DISTRICT_POSTAGE 
            , PREFERRED_SHIPPING_METHOD = NEW.PREFERRED_SHIPPING_METHOD
            , FINAL_PREFFERED_SHIPPING_METHOD = NEW.PREFERRED_SHIPPING_METHOD 
            , PRD_VARINAT_NAME = NEW.VARIANT_NAME 
            , PRD_VARIANT_IMAGE_PATH = NEW.PRIMARY_IMG_RELATIVE_PATH 
            , F_BRAND_NO = VAR_F_BRAND 
            , BRAND_NAME = VAR_BRAND_NAME 
            , F_MODEL_NO = VAR_F_MODEL  
            , MODEL_NAME = VAR_MODEL_NAME 
            , F_CATEGORY_NO = VAR_F_PRD_CATEGORY_ID 
            , CATEGORY_NAME =  VAR_PRD_CATEGORY_NAME 
            , F_SUB_CATEGORY_NO = VAR_F_PRD_SUB_CATEGORY_ID 
            , SUB_CATEGORY_NAME = VAR_PRD_SUB_CATEGORY_NAME
          
WHERE INV_STOCK.ORDER_STATUS IS NULL AND INV_STOCK.F_PRD_VARIANT_NO = NEW.PK_NO  ;



		END */$$


DELIMITER ;

/* Trigger structure for table `SC_BOX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SC_BOX_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SC_BOX_INSERT` BEFORE INSERT ON `SC_BOX` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;



select IFNULL(max(CODE),100000) into PKCODE
from SC_BOX;
	SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_BOX_INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_BOX_INV_STOCK_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_BOX_INV_STOCK_INSERT` AFTER INSERT ON `SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

		UPDATE SC_BOX 
		SET ITEM_COUNT = ITEM_COUNT+1 
		WHERE PK_NO = NEW.F_BOX_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_BOX_INV_STOCK` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_BOX_INV_STOCK_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_BOX_INV_STOCK_DELETE` AFTER DELETE ON `SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

		UPDATE SC_BOX 
		SET ITEM_COUNT = ITEM_COUNT-1 
		WHERE PK_NO = OLD.F_BOX_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SC_SHIPMENT_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SC_SHIPMENT_INSERT` BEFORE INSERT ON `SC_SHIPMENT` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
select IFNULL(max(CODE),100000) into PKCODE
		from SC_SHIPMENT;
		SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT_BOX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_SHIPMENT_BOX_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_SHIPMENT_BOX_INSERT` AFTER INSERT ON `SC_SHIPMENT_BOX` FOR EACH ROW BEGIN

		UPDATE SC_SHIPMENT 
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT+1 
		WHERE PK_NO = NEW.F_SHIPMENT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT_BOX` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SC_SHIPMENT_BOX_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SC_SHIPMENT_BOX_DELETE` AFTER DELETE ON `SC_SHIPMENT_BOX` FOR EACH ROW BEGIN

		UPDATE SC_SHIPMENT 
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT-1 
		WHERE PK_NO = OLD.F_SHIPMENT_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_AGENTS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_AGENTS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_AGENTS_INSERT` BEFORE INSERT ON `SLS_AGENTS` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;



select auto_increment into PKCODE
from information_schema.tables
where table_name = 'SLS_AGENTS'
and table_schema = database();
    SET NEW.CODE = PKCODE+10 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_BOOKING_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_BOOKING_INSERT` BEFORE INSERT ON `SLS_BOOKING` FOR EACH ROW BEGIN
declare VAR_BOOKING_NO int(11) default 0;
select IFNULL(max(BOOKING_NO),60000) into VAR_BOOKING_NO
        from SLS_BOOKING;
        SET NEW.BOOKING_NO = VAR_BOOKING_NO+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_BOOKING_DETAILS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_BOOKING_DETAILS_INSERT` BEFORE INSERT ON `SLS_BOOKING_DETAILS` FOR EACH ROW 
BEGIN
    declare VAR_SS_COST FLOAT default 0;
    declare VAR_SM_COST FLOAT default 0;
    declare VAR_AIR_FREIGHT FLOAT default 0;
    declare VAR_SEA_FREIGHT FLOAT default 0;
    declare VAR_REGULAR FLOAT default 0;
    declare VAR_INSTALLMENT FLOAT default 0;
    declare VAR_IS_REGULAR INT default 0;
    declare VAR_UNIT_PRICE FLOAT default 0;
    declare VAR_SINGLE_COMISSION FLOAT default 0;
    declare VAR_TOTAL_COMISSION FLOAT default 0;
    DECLARE VAR_TOTAL_LINE_VALUE FLOAT default 0;

    SELECT
        SS_COST,SM_COST
        ,AIR_FREIGHT_COST
        ,SEA_FREIGHT_COST
        ,REGULAR_PRICE
        ,INSTALLMENT_PRICE
        INTO
        VAR_SS_COST
        ,VAR_SM_COST
        ,VAR_AIR_FREIGHT
        ,VAR_SEA_FREIGHT
        ,VAR_REGULAR
        ,VAR_INSTALLMENT
    FROM INV_STOCK
    WHERE INV_STOCK.PK_NO = NEW.F_INV_STOCK_NO;

    SET NEW.SS_COST                     = VAR_SS_COST;
    SET NEW.SM_COST                     = VAR_SM_COST;
    SET NEW.AIR_FREIGHT                 = VAR_AIR_FREIGHT;
    SET NEW.SEA_FREIGHT                 = VAR_SEA_FREIGHT;
    SET NEW.REGULAR_PRICE               = VAR_REGULAR;
    SET NEW.INSTALLMENT_PRICE           = VAR_INSTALLMENT;

    SET NEW.CURRENT_SS_COST             = VAR_SS_COST;
    SET NEW.CURRENT_SM_COST             = VAR_SM_COST;
    SET NEW.CURRENT_AIR_FREIGHT         = VAR_AIR_FREIGHT;
    SET NEW.CURRENT_SEA_FREIGHT         = VAR_SEA_FREIGHT;
    SET NEW.CURRENT_REGULAR_PRICE       = VAR_REGULAR;
    SET NEW.CURRENT_INSTALLMENT_PRICE   = VAR_INSTALLMENT;
    SET NEW.ORDER_STATUS                = 10;
    SET VAR_IS_REGULAR                  = NEW.CURRENT_IS_REGULAR;

    IF VAR_IS_REGULAR = 0 THEN
        SET VAR_UNIT_PRICE = VAR_INSTALLMENT;
    ELSE
        SET VAR_UNIT_PRICE = VAR_REGULAR;
    END IF;

    SELECT AMOUNT INTO VAR_SINGLE_COMISSION FROM SLS_COMMISION WHERE VAR_UNIT_PRICE BETWEEN FROM_PRICE AND TO_PRICE;
    SET NEW.COMISSION = VAR_SINGLE_COMISSION;

    SELECT TOTAL_COMISSION INTO VAR_TOTAL_COMISSION FROM SLS_BOOKING WHERE PK_NO = NEW.F_BOOKING_NO;
    SET VAR_TOTAL_COMISSION = VAR_TOTAL_COMISSION + VAR_SINGLE_COMISSION;
    UPDATE SLS_BOOKING SET TOTAL_COMISSION = VAR_TOTAL_COMISSION WHERE PK_NO = NEW.F_BOOKING_NO;

    -- UPDATE LINE_PRICE
    IF NEW.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_AIR_FREIGHT;
        ELSEIF NEW.CURRENT_IS_FREIGHT = 2 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SEA_FREIGHT;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE + 0;
        END IF;

        IF NEW.IS_SELF_PICKUP = 0 THEN
           IF NEW.CURRENT_IS_SM = 1 THEN
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SM_COST;
           ELSE
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SS_COST;
           END IF;  
        END IF;

        IF NEW.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_REGULAR_PRICE;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_INSTALLMENT_PRICE;
        END IF;

        SET NEW.LINE_PRICE = VAR_TOTAL_LINE_VALUE;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SLS_BOOKING_DETAILS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SLS_BOOKING_DETAILS_INSERT` AFTER INSERT ON `SLS_BOOKING_DETAILS` FOR EACH ROW 
BEGIN

    declare VAR_TOTAL_ITEM_QTY int default 0; 
    declare VAR_TOTAL_PRICE float default 0;

    SELECT COUNT(*) AS TOTAL_QTY,SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY,VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;
                                        
    UPDATE SLS_BOOKING SET TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY,TOTAL_PRICE = VAR_TOTAL_PRICE WHERE PK_NO = NEW.F_BOOKING_NO;
    


END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_BOOKING_DETAILS_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_BOOKING_DETAILS_UPDATE` BEFORE UPDATE ON `SLS_BOOKING_DETAILS` FOR EACH ROW 
BEGIN
 DECLARE VAR_TOTAL_LINE_VALUE FLOAT default 0; 
    DECLARE VAR_LINE_PRICE FLOAT DEFAULT 0;
  



        IF NEW.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_AIR_FREIGHT;
        ELSEIF NEW.CURRENT_IS_FREIGHT = 2 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SEA_FREIGHT;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE + 0;
        END IF;

       IF NEW.IS_SELF_PICKUP = 0 THEN
        IF NEW.CURRENT_IS_SM = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SM_COST;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SS_COST;
        END IF;
       END IF;

        IF NEW.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_REGULAR_PRICE;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_INSTALLMENT_PRICE;
        END IF;

        SET NEW.LINE_PRICE = VAR_TOTAL_LINE_VALUE; 
         
        SELECT PK_NO, F_BOOKING_NO, F_INV_STOCK_NO, COMMENTS, IS_ACTIVE, F_SS_CREATED_BY, SS_CREATED_ON, F_SS_MODIFIED_BY, SS_MODIFIED_ON, F_DELIVERY_ADDRESS, F_SS_COMPANY_NO, IS_SYSTEM_HOLD, IS_ADMIN_HOLD, DISPATCH_STATUS, AIR_FREIGHT, SEA_FREIGHT, IS_FREIGHT, SS_COST, SM_COST, IS_SM, REGULAR_PRICE, INSTALLMENT_PRICE, IS_REGULAR, CURRENT_AIR_FREIGHT, CURRENT_SEA_FREIGHT, CURRENT_IS_FREIGHT, CURRENT_SS_COST, CURRENT_SM_COST, CURRENT_IS_SM, CURRENT_REGULAR_PRICE, CURRENT_INSTALLMENT_PRICE, CURRENT_IS_REGULAR, CURRENT_F_DELIVERY_ADDRESS, ORDER_STATUS, IS_SELF_PICKUP, IS_ADMIN_APPROVAL, IS_READY, ARRIVAL_NOTIFICATION_FLAG, DISPATCH_NOTIFICATION_FLAG, IS_COD_SHELVE_TRANSFER, COMISSION, RTS_COLLECTION_USER_ID, IS_COLLECTED_FOR_RTS, F_BUNDLE_NO, BUNDLE_SEQUENC, COD_RTC_ACK, LINE_PRICE
            INTO  @VAR_PK_NO, @VAR_F_BOOKING_NO, @VAR_F_INV_STOCK_NO, @VAR_COMMENTS, @VAR_IS_ACTIVE, @VAR_F_SS_CREATED_BY, @VAR_SS_CREATED_ON, @VAR_F_SS_MODIFIED_BY, @VAR_SS_MODIFIED_ON, @VAR_F_DELIVERY_ADDRESS, @VAR_F_SS_COMPANY_NO, @VAR_IS_SYSTEM_HOLD, @VAR_IS_ADMIN_HOLD, @VAR_DISPATCH_STATUS, @VAR_AIR_FREIGHT, @VAR_SEA_FREIGHT, @VAR_IS_FREIGHT, @VAR_SS_COST, @VAR_SM_COST, @VAR_IS_SM, @VAR_REGULAR_PRICE, @VAR_INSTALLMENT_PRICE, @VAR_IS_REGULAR, @VAR_CURRENT_AIR_FREIGHT, @VAR_CURRENT_SEA_FREIGHT, @VAR_CURRENT_IS_FREIGHT, @VAR_CURRENT_SS_COST, @VAR_CURRENT_SM_COST, @VAR_CURRENT_IS_SM, @VAR_CURRENT_REGULAR_PRICE, @VAR_CURRENT_INSTALLMENT_PRICE, @VAR_CURRENT_IS_REGULAR, @VAR_CURRENT_F_DELIVERY_ADDRESS, @VAR_ORDER_STATUS, @VAR_IS_SELF_PICKUP, @VAR_IS_ADMIN_APPROVAL, @VAR_IS_READY, @VAR_ARRIVAL_NOTIFICATION_FLAG, @VAR_DISPATCH_NOTIFICATION_FLAG, @VAR_IS_COD_SHELVE_TRANSFER, @VAR_COMISSION, @VAR_RTS_COLLECTION_USER_ID, @VAR_IS_COLLECTED_FOR_RTS, @VAR_F_BUNDLE_NO, @VAR_BUNDLE_SEQUENC, @VAR_COD_RTC_ACK, @VAR_LINE_PRICE
            FROM SLS_BOOKING_DETAILS WHERE PK_NO = NEW.PK_NO;
            IF @VAR_SS_COST <> NEW.SS_COST OR
                @VAR_CURRENT_SS_COST <> NEW.CURRENT_SS_COST OR
                @VAR_SM_COST <> NEW.SM_COST OR
                @VAR_CURRENT_SM_COST <> NEW.CURRENT_SM_COST OR
                @VAR_AIR_FREIGHT <> NEW.AIR_FREIGHT OR
                @VAR_CURRENT_AIR_FREIGHT <> NEW.CURRENT_AIR_FREIGHT OR
                @VAR_SEA_FREIGHT <> NEW.SEA_FREIGHT OR
                @VAR_CURRENT_SEA_FREIGHT <> NEW.CURRENT_SEA_FREIGHT OR
                @VAR_REGULAR_PRICE <> NEW.REGULAR_PRICE OR
                @VAR_CURRENT_REGULAR_PRICE <> NEW.CURRENT_REGULAR_PRICE OR
                @VAR_INSTALLMENT_PRICE <> NEW.INSTALLMENT_PRICE OR
                @VAR_CURRENT_INSTALLMENT_PRICE <> NEW.CURRENT_INSTALLMENT_PRICE THEN



                INSERT INTO SLS_BOOKING_DETAILS_AUD (PK_NO, F_BOOKING_NO, F_INV_STOCK_NO, COMMENTS, IS_ACTIVE, F_SS_CREATED_BY, SS_CREATED_ON, F_SS_MODIFIED_BY, SS_MODIFIED_ON, F_DELIVERY_ADDRESS, F_SS_COMPANY_NO, IS_SYSTEM_HOLD, IS_ADMIN_HOLD, DISPATCH_STATUS, AIR_FREIGHT, SEA_FREIGHT, IS_FREIGHT, SS_COST, SM_COST, IS_SM, REGULAR_PRICE, INSTALLMENT_PRICE, IS_REGULAR, CURRENT_AIR_FREIGHT, CURRENT_SEA_FREIGHT, CURRENT_IS_FREIGHT, CURRENT_SS_COST, CURRENT_SM_COST, CURRENT_IS_SM, CURRENT_REGULAR_PRICE, CURRENT_INSTALLMENT_PRICE, CURRENT_IS_REGULAR, CURRENT_F_DELIVERY_ADDRESS, ORDER_STATUS, IS_SELF_PICKUP, IS_ADMIN_APPROVAL, IS_READY, ARRIVAL_NOTIFICATION_FLAG, DISPATCH_NOTIFICATION_FLAG, IS_COD_SHELVE_TRANSFER, COMISSION, RTS_COLLECTION_USER_ID, IS_COLLECTED_FOR_RTS, F_BUNDLE_NO, BUNDLE_SEQUENC, COD_RTC_ACK, LINE_PRICE) VALUES (@VAR_PK_NO, @VAR_F_BOOKING_NO, @VAR_F_INV_STOCK_NO, @VAR_COMMENTS, @VAR_IS_ACTIVE, @VAR_F_SS_CREATED_BY, @VAR_SS_CREATED_ON, NEW.F_SS_MODIFIED_BY, NEW.SS_MODIFIED_ON, @VAR_F_DELIVERY_ADDRESS, @VAR_F_SS_COMPANY_NO, @VAR_IS_SYSTEM_HOLD, @VAR_IS_ADMIN_HOLD, @VAR_DISPATCH_STATUS, @VAR_AIR_FREIGHT, @VAR_SEA_FREIGHT, @VAR_IS_FREIGHT, @VAR_SS_COST, @VAR_SM_COST, @VAR_IS_SM, @VAR_REGULAR_PRICE, @VAR_INSTALLMENT_PRICE, @VAR_IS_REGULAR, @VAR_CURRENT_AIR_FREIGHT, @VAR_CURRENT_SEA_FREIGHT, @VAR_CURRENT_IS_FREIGHT, @VAR_CURRENT_SS_COST, @VAR_CURRENT_SM_COST, @VAR_CURRENT_IS_SM, @VAR_CURRENT_REGULAR_PRICE, @VAR_CURRENT_INSTALLMENT_PRICE, @VAR_CURRENT_IS_REGULAR, @VAR_CURRENT_F_DELIVERY_ADDRESS, @VAR_ORDER_STATUS, @VAR_IS_SELF_PICKUP, @VAR_IS_ADMIN_APPROVAL, @VAR_IS_READY, @VAR_ARRIVAL_NOTIFICATION_FLAG, @VAR_DISPATCH_NOTIFICATION_FLAG, @VAR_IS_COD_SHELVE_TRANSFER, @VAR_COMISSION, @VAR_RTS_COLLECTION_USER_ID, @VAR_IS_COLLECTED_FOR_RTS, @VAR_F_BUNDLE_NO, @VAR_BUNDLE_SEQUENC, @VAR_COD_RTC_ACK, @VAR_LINE_PRICE);


                END IF;
END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SLS_BOOKING_DETAILS_UPDATE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SLS_BOOKING_DETAILS_UPDATE` AFTER UPDATE ON `SLS_BOOKING_DETAILS` FOR EACH ROW 
BEGIN

    DECLARE VAR_ORDER_BALANCE_USED FLOAT default 0;
    declare VAR_TOTAL_PRICE float default 0;
    DECLARE VAR_PENALTY_FEE FLOAT default 0;

    SELECT SUM(LINE_PRICE) INTO VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;
    
    SELECT PENALTY_FEE INTO VAR_PENALTY_FEE
    FROM SLS_BOOKING
    WHERE PK_NO = NEW.F_BOOKING_NO;
    
    SET VAR_TOTAL_PRICE = VAR_TOTAL_PRICE + VAR_PENALTY_FEE;
     
        SELECT SUM(LINE_PRICE) AS TOTAL_LINE_PRICE INTO VAR_ORDER_BALANCE_USED FROM SLS_BOOKING_DETAILS
        WHERE F_BOOKING_NO =  NEW.F_BOOKING_NO AND ORDER_STATUS = '60';

        UPDATE SLS_ORDER SET ORDER_BALANCE_USED = VAR_ORDER_BALANCE_USED WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;
        UPDATE SLS_BOOKING SET TOTAL_PRICE = VAR_TOTAL_PRICE WHERE PK_NO = NEW.F_BOOKING_NO;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SLS_BOOKING_DETAILS_DELETE` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SLS_BOOKING_DETAILS_DELETE` AFTER DELETE ON `SLS_BOOKING_DETAILS` FOR EACH ROW 
BEGIN
        declare VAR_FREIGHT_COST FLOAT default 0;
    declare VAR_POSTAGE_COST FLOAT default 0;
    declare VAR_PRICE FLOAT default 0;
    declare VAR_TOTAL_FREIGHT_POSTAGE FLOAT default 0;
    declare VAR_TOTAL_ITEM_QTY INT default 0;
    declare VAR_TOTAL_PRICE float default 0;

    SELECT COUNT(*) AS TOTAL_QTY, SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY, VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = OLD.F_BOOKING_NO;


    IF OLD.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_FREIGHT_COST = OLD.CURRENT_AIR_FREIGHT;
    ELSE
        SET VAR_FREIGHT_COST = OLD.CURRENT_SEA_FREIGHT;
    END IF;

    IF OLD.CURRENT_IS_SM = 1 THEN
        SET VAR_POSTAGE_COST = OLD.CURRENT_SM_COST;
    ELSE
        SET VAR_POSTAGE_COST = OLD.CURRENT_SS_COST;
    END IF;

    IF OLD.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_PRICE = OLD.CURRENT_REGULAR_PRICE;
    ELSE
        SET VAR_PRICE = OLD.CURRENT_INSTALLMENT_PRICE;
    END IF;

    SET VAR_TOTAL_FREIGHT_POSTAGE = VAR_FREIGHT_COST + VAR_POSTAGE_COST + VAR_PRICE;


    UPDATE SLS_BOOKING
    SET
    FREIGHT_COST = FREIGHT_COST - VAR_FREIGHT_COST
    ,POSTAGE_COST = POSTAGE_COST - VAR_POSTAGE_COST
    ,TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY 
    ,TOTAL_PRICE = VAR_TOTAL_PRICE
    WHERE PK_NO = OLD.F_BOOKING_NO; 
END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS_TEMP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_BOOKING_DETAILS_TEMP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_BOOKING_DETAILS_TEMP_INSERT` BEFORE INSERT ON `SLS_BOOKING_DETAILS_TEMP` FOR EACH ROW 
BEGIN
    declare VAR_SS_COST FLOAT default 0;
    declare VAR_SM_COST FLOAT default 0;
    declare VAR_AIR_FREIGHT FLOAT default 0;
    declare VAR_SEA_FREIGHT FLOAT default 0;
    declare VAR_REGULAR FLOAT default 0;
    declare VAR_INSTALLMENT FLOAT default 0;
    declare VAR_IS_REGULAR INT default 0;
    declare VAR_UNIT_PRICE FLOAT default 0;
    declare VAR_SINGLE_COMISSION FLOAT default 0;
    declare VAR_TOTAL_COMISSION FLOAT default 0;
    DECLARE VAR_TOTAL_LINE_VALUE FLOAT default 0;

    SELECT
        SS_COST,SM_COST
        ,AIR_FREIGHT_COST
        ,SEA_FREIGHT_COST
        ,REGULAR_PRICE
        ,INSTALLMENT_PRICE
        INTO
        VAR_SS_COST
        ,VAR_SM_COST
        ,VAR_AIR_FREIGHT
        ,VAR_SEA_FREIGHT
        ,VAR_REGULAR
        ,VAR_INSTALLMENT
    FROM INV_STOCK
    WHERE INV_STOCK.PK_NO = NEW.F_INV_STOCK_NO;

    SET NEW.SS_COST                     = VAR_SS_COST;
    SET NEW.SM_COST                     = VAR_SM_COST;
    SET NEW.AIR_FREIGHT                 = VAR_AIR_FREIGHT;
    SET NEW.SEA_FREIGHT                 = VAR_SEA_FREIGHT;
    SET NEW.REGULAR_PRICE               = VAR_REGULAR;
    SET NEW.INSTALLMENT_PRICE           = VAR_INSTALLMENT;

    SET NEW.CURRENT_SS_COST             = VAR_SS_COST;
    SET NEW.CURRENT_SM_COST             = VAR_SM_COST;
    SET NEW.CURRENT_AIR_FREIGHT         = VAR_AIR_FREIGHT;
    SET NEW.CURRENT_SEA_FREIGHT         = VAR_SEA_FREIGHT;
    SET NEW.CURRENT_REGULAR_PRICE       = VAR_REGULAR;
    SET NEW.CURRENT_INSTALLMENT_PRICE   = VAR_INSTALLMENT;
    SET NEW.ORDER_STATUS                = 10;
    SET VAR_IS_REGULAR                  = NEW.CURRENT_IS_REGULAR;

    IF VAR_IS_REGULAR = 0 THEN
        SET VAR_UNIT_PRICE = VAR_INSTALLMENT;
    ELSE
        SET VAR_UNIT_PRICE = VAR_REGULAR;
    END IF;

   

    -- UPDATE LINE_PRICE
    IF NEW.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_AIR_FREIGHT;
        ELSEIF NEW.CURRENT_IS_FREIGHT = 2 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SEA_FREIGHT;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE + 0;
        END IF;

        IF NEW.IS_SELF_PICKUP = 0 THEN
           IF NEW.CURRENT_IS_SM = 1 THEN
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SM_COST;
           ELSE
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SS_COST;
           END IF;  
        END IF;

        IF NEW.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_REGULAR_PRICE;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_INSTALLMENT_PRICE;
        END IF;

        SET NEW.LINE_PRICE = VAR_TOTAL_LINE_VALUE;


END */$$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS_TEMP` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `AFTER_SLS_BOOKING_DETAILS_TEMP_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `AFTER_SLS_BOOKING_DETAILS_TEMP_INSERT` AFTER INSERT ON `SLS_BOOKING_DETAILS_TEMP` FOR EACH ROW 
BEGIN

    declare VAR_TOTAL_ITEM_QTY int default 0; 
    declare VAR_TOTAL_PRICE float default 0;

    SELECT COUNT(*) AS TOTAL_QTY,SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY,VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS_TEMP
    WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;
                                        
    UPDATE SLS_BOOKING_TEMP SET TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY,TOTAL_PRICE = VAR_TOTAL_PRICE WHERE PK_NO = NEW.F_BOOKING_NO;
    
    

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CHECK_OFFER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CHECK_OFFER_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CHECK_OFFER_INSERT` BEFORE INSERT ON `SLS_CHECK_OFFER` FOR EACH ROW BEGIN

        IF NEW.IS_PROCESSED = 0 THEN
        SET NEW.REGULAR_BUNDLE_PRICE = NEW.REGULAR_PRICE;
        SET NEW.INSTALLMENT_BUNDLE_PRICE = NEW.INSTALLMENT_PRICE;
        END IF;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMERS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CUSTOMERS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CUSTOMERS_INSERT` BEFORE INSERT ON `SLS_CUSTOMERS` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;
declare VAR_CUSTOMER_NO int(11) default 0;

SELECT
    IFNULL(max(CODE),100) AS SCODE,
    IFNULL(MAX(CUSTOMER_NO),10000) AS SCUSTOMER_NO
    INTO  VAR_CODE, VAR_CUSTOMER_NO
FROM SLS_CUSTOMERS;

	SET NEW.CODE = VAR_CODE+1 ;


   SET NEW.CUSTOMER_NO = VAR_CUSTOMER_NO+1;


END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMERS_ADDRESS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT` BEFORE INSERT ON `SLS_CUSTOMERS_ADDRESS` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
declare CUST_CODE int(11) default 0;


select IFNULL(max(CODE),1) into CUST_CODE
from SLS_CUSTOMERS 
where PK_NO = NEW.F_CUSTOMER_NO;

select IFNULL(max(CODE),1) into PKCODE
from SLS_CUSTOMERS_ADDRESS 
where F_CUSTOMER_NO = NEW.F_CUSTOMER_NO;

	SET NEW.CODE = CONCAT(CUST_CODE,PKCODE+1) ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMER_ADDRESS_TYPE` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_CUSTOMER_ADDRESS_TYPE_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_CUSTOMER_ADDRESS_TYPE_INSERT` BEFORE INSERT ON `SLS_CUSTOMER_ADDRESS_TYPE` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;
select IFNULL(max(CODE),10) into PKCODE
		from SLS_CUSTOMER_ADDRESS_TYPE;
		SET NEW.CODE = PKCODE+1 ;

END */$$


DELIMITER ;

/* Trigger structure for table `SLS_NOTIFICATION` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_NOTIFICATION_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_NOTIFICATION_INSERT` BEFORE INSERT ON `SLS_NOTIFICATION` FOR EACH ROW BEGIN
    DECLARE VAR_MOBILE_NO VARCHAR(40) DEFAULT NULL;

    IF NEW.IS_RESELLER = 1 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_RESELLERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_RESELLERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_RESELLERS.F_COUNTRY_NO
        WHERE SLS_RESELLERS.PK_NO = NEW.RESELLER_NO;

    END IF;

    IF NEW.IS_RESELLER = 0 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_CUSTOMERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_CUSTOMERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_CUSTOMERS.F_COUNTRY_NO
        WHERE SLS_CUSTOMERS.PK_NO = NEW.CUSTOMER_NO;


    END IF;

    SET NEW.MOBILE_NO = VAR_MOBILE_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `SLS_NOTIFICATION_EMAIL` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_NOTIFICATION_EMAIL_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_NOTIFICATION_EMAIL_INSERT` BEFORE INSERT ON `SLS_NOTIFICATION_EMAIL` FOR EACH ROW 
BEGIN
    DECLARE VAR_MOBILE_NO VARCHAR(40) DEFAULT NULL;

    IF NEW.IS_RESELLER = 1 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_RESELLERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_RESELLERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_RESELLERS.F_COUNTRY_NO
        WHERE SLS_RESELLERS.PK_NO = NEW.RESELLER_NO;

    END IF;

    IF NEW.IS_RESELLER = 0 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_CUSTOMERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_CUSTOMERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_CUSTOMERS.F_COUNTRY_NO
        WHERE SLS_CUSTOMERS.PK_NO = NEW.CUSTOMER_NO;


    END IF;

    SET NEW.MOBILE_NO = VAR_MOBILE_NO;



END */$$


DELIMITER ;

/* Trigger structure for table `SLS_RESELLERS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `BEFORE_SLS_RESELLERS_INSERT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'root'@'localhost' */ /*!50003 TRIGGER `BEFORE_SLS_RESELLERS_INSERT` BEFORE INSERT ON `SLS_RESELLERS` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;
declare VAR_RESELLER_NO int(11) default 0;

SELECT
    IFNULL(max(CODE),100) AS SCODE,
    IFNULL(MAX(RESELLER_NO),2000) AS SRESELLER_NO
    INTO  VAR_CODE, VAR_RESELLER_NO
FROM SLS_RESELLERS;

    SET NEW.CODE = VAR_CODE+1 ;


    SET NEW.RESELLER_NO = VAR_RESELLER_NO+1;


END */$$


DELIMITER ;

/* Function  structure for function  `fnStripTags` */

/*!50003 DROP FUNCTION IF EXISTS `fnStripTags` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` FUNCTION `fnStripTags`(Dirty varchar(4000) ) RETURNS varchar(4000) CHARSET latin1
    DETERMINISTIC
BEGIN
  DECLARE iStart, iEnd, iLength int;
    WHILE Locate( '<', Dirty ) > 0 And Locate( '>', Dirty, Locate( '<', Dirty )) > 0 DO
      BEGIN
        SET iStart = Locate( '<', Dirty ), iEnd = Locate( '>', Dirty, Locate('<', Dirty ));
        SET iLength = ( iEnd - iStart) + 1;
        IF iLength > 0 THEN
          BEGIN
            SET Dirty = Insert( Dirty, iStart, iLength, ' ');
          END;
        END IF;
      END;
    END WHILE;
    RETURN Dirty;
END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT`(IN_PK_NO Integer(11), IN_TYPE VarChar(20))
    NO SQL
BEGIN

    -- INSET A NEW ENTRY IN ACC_BANK_TXN
    -- UPDATE ACC_PAYMENT_BANK_ACC BALACNE_BUFFER (INCREMENT)
    -- UPDATE SLS_CUSTOMERS CUSTOMER_BALANCE_BUFFER (INCREMENT)

        DECLARE VAR_ACC_CUSTOMER_PAYMENTS_PK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_PAYMENT_ACC_NO INT DEFAULT 0;
        DECLARE VAR_F_SS_CREATED_BY INT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0; 
         DECLARE VAR_IS_MATCHED INT DEFAULT 0;
        DECLARE VAR_PAYMENT_TYPE FLOAT DEFAULT 1;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_DATE DATE DEFAULT NULL;
        DECLARE VAR_AMOUNT_ACTUAL FLOAT DEFAULT 0;

    IF IN_TYPE = 'customer' THEN


             SELECT PK_NO, F_CUSTOMER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_DATE,F_SS_CREATED_BY,PAYMENT_TYPE INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_DATE,VAR_F_SS_CREATED_BY,VAR_PAYMENT_TYPE FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;

            -- SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
            --        FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;
             IF VAR_PAYMENT_TYPE = 3 THEN
               SET VAR_IS_MATCHED = 1;
             END IF;

            INSERT INTO ACC_BANK_TXN(TXN_REF, TXN_TYPE_IN_OUT, TXN_DATE,AMOUNT_ACTUAL, AMOUNT_BUFFER, IS_CUS_RESELLER_BANK_RECONCILATION, F_ACC_PAYMENT_BANK_NO, F_CUSTOMER_NO, F_CUSTOMER_PAYMENT_NO,F_SS_CREATED_BY,SS_CREATED_ON,PAYMENT_TYPE,IS_MATCHED)
                VALUES(NULL, 1, VAR_PAYMENT_DATE,VAR_AMOUNT_ACTUAL, VAR_MR_AMOUNT, 1, VAR_F_PAYMENT_ACC_NO, VAR_F_CUSTOMER_NO,VAR_ACC_CUSTOMER_PAYMENTS_PK_NO,VAR_F_SS_CREATED_BY,NOW(),VAR_PAYMENT_TYPE,VAR_IS_MATCHED);

            IF VAR_PAYMENT_TYPE = 3 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                ,BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                ,CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            ELSEIF VAR_PAYMENT_TYPE = 2 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                ,BALANCE_ACTUAL = IFNULL(BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                ,CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0)  + VAR_MR_AMOUNT
                ,CUM_BALANCE = IFNULL(CUM_BALANCE,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            ELSEIF VAR_PAYMENT_TYPE = 1 THEN
                UPDATE ACC_PAYMENT_BANK_ACC
                SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                UPDATE SLS_CUSTOMERS
                SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT
                WHERE PK_NO = VAR_F_CUSTOMER_NO;

            END IF;
            


    ELSEIF IN_TYPE = 'reseller' THEN

            SELECT PK_NO, F_RESELLER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_DATE,F_SS_CREATED_BY INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_DATE,VAR_F_SS_CREATED_BY
                    FROM ACC_RESELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;

            -- SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
            --    FROM ACC_RESELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;


            INSERT INTO ACC_BANK_TXN(TXN_REF, TXN_TYPE_IN_OUT, TXN_DATE, AMOUNT_BUFFER, IS_CUS_RESELLER_BANK_RECONCILATION, F_ACC_PAYMENT_BANK_NO, F_RESELLER_NO, F_RESELLER_PAYMENT_NO,F_SS_CREATED_BY,SS_CREATED_ON)
            VALUES(NULL, 1, VAR_PAYMENT_DATE, VAR_MR_AMOUNT, 2, VAR_F_PAYMENT_ACC_NO, VAR_F_CUSTOMER_NO,VAR_ACC_CUSTOMER_PAYMENTS_PK_NO,VAR_F_SS_CREATED_BY,NOW());


            UPDATE ACC_PAYMENT_BANK_ACC
            SET BALACNE_BUFFER = IFNULL(BALACNE_BUFFER,0)  + VAR_MR_AMOUNT
            WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;


            UPDATE SLS_RESELLERS
            SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0)  + VAR_MR_AMOUNT

            WHERE PK_NO = VAR_F_CUSTOMER_NO;




    END IF;






END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT_UNVERIFY` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT_UNVERIFY` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT_UNVERIFY`(IN_BANK_TXN_STATEMENT_PK_NO INTEGER(11))
    NO SQL
BEGIN

    -- UPDATE ACC_BANK_TXN BALANCE_ACTUAL (INCREMENT)
    -- UPDATE ACC_PAYMENT_BANK_ACC CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_CUSTOMERS CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_ORDER ORDER_ACTUAL_TOPUP
    -- UPDATE ACC_BANK_TXN_STATEMENT F_ACC_BANK_TXN_NO, IS_MATCHED

        DECLARE VAR_F_ACC_BANK_TXN_NO INT DEFAULT 0;
        DECLARE VAR_IS_MATCHED INT DEFAULT 0;
        DECLARE VAR_AMOUNT_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_IS_CUS_RESELLER_BANK_RECONCILATION INT DEFAULT 0;
        DECLARE VAR_F_ACC_PAYMENT_BANK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_RESELLER_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_PAYMENT_NO INT DEFAULT 0;
        DECLARE VAR_F_RESELLER_PAYMENT_NO INT DEFAULT 0;

        DECLARE VAR_PAYMENT_CONFIRMED_STATUS INT DEFAULT 0;
        DECLARE VAR_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;
        DECLARE VAR_CUSTOMER_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_CUM_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
        DECLARE int_row_count INT DEFAULT 0;
        DECLARE int_row_count2 INT DEFAULT 0;

        DECLARE xORDER_PAYMENT_PK_NO INT DEFAULT 0;
        DECLARE xORDER_NO INT DEFAULT 0;
        DECLARE xPAYMENT_AMOUNT FLOAT DEFAULT 0;
        DECLARE xBOOKING_DETAILS_PK_NO INT DEFAULT 0;
        DECLARE xINV_STOCK_PK_NO INT DEFAULT 0;



     SELECT
     A.F_ACC_BANK_TXN_NO
     , A.IS_MATCHED
     , B.AMOUNT_ACTUAL
     , B.IS_CUS_RESELLER_BANK_RECONCILATION
     , B.F_ACC_PAYMENT_BANK_NO
     , B.F_CUSTOMER_NO
     , B.F_RESELLER_NO
     , B.F_CUSTOMER_PAYMENT_NO
     , B.F_RESELLER_PAYMENT_NO
     INTO
     VAR_F_ACC_BANK_TXN_NO
     , VAR_IS_MATCHED
     , VAR_AMOUNT_ACTUAL
     , VAR_IS_CUS_RESELLER_BANK_RECONCILATION
     , VAR_F_ACC_PAYMENT_BANK_NO
     , VAR_F_CUSTOMER_NO
     , VAR_F_RESELLER_NO
     , VAR_F_CUSTOMER_PAYMENT_NO
     , VAR_F_RESELLER_PAYMENT_NO
     FROM
     ACC_BANK_TXN_STATEMENT A
     JOIN ACC_BANK_TXN B ON B.PK_NO = A.F_ACC_BANK_TXN_NO
     WHERE A.PK_NO = IN_BANK_TXN_STATEMENT_PK_NO AND A.IS_MATCHED = 1;

    -- SELECT F_CUSTOMER_PAYMENT_NO,F_RESELLER_PAYMENT_NO, F_ACC_PAYMENT_BANK_NO, F_CUSTOMER_NO, F_RESELLER_NO, IS_CUS_RESELLER_BANK_RECONCILATION INTO VAR_F_CUSTOMER_PAYMENT_NO, VAR_F_RESELLER_PAYMENT_NO, VAR_F_ACC_PAYMENT_BANK_NO, VAR_F_CUSTOMER_NO, VAR_F_RESELLER_NO, VAR_IS_CUS_RESELLER_BANK_RECONCILATION FROM ACC_BANK_TXN WHERE PK_NO = IN_BANK_TXN_PK_NO;

INSERT INTO R VALUES(VAR_IS_CUS_RESELLER_BANK_RECONCILATION);
     /*###################### CUSTOMER PAYMENT ############################*/
    IF VAR_IS_CUS_RESELLER_BANK_RECONCILATION = 1 THEN

        -- SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

        UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 0 WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;


    SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0), IFNULL(SUM(MR_AMOUNT),0)  INTO VAR_TOTAL_PAYMENT_REMAINING_MR, VAR_CUSTOMER_BALANCE_ACTUAL
            FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = VAR_F_CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

           INSERT INTO R VALUES(CONCAT('VAR_CUSTOMER_BALANCE_ACTUAL',VAR_CUSTOMER_BALANCE_ACTUAL));
            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT
                            PK_NO
                            , ORDER_NO
                            , PAYMENT_AMOUNT
                        FROM ACC_ORDER_PAYMENT
                        WHERE F_ACC_CUSTOMER_PAYMENT_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start CUSRSOR1');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R VALUES (CONCAT('Line 105',int_row_count));
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT: LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 109');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - xPAYMENT_AMOUNT, ORDER_BALANCE_USED = 0 WHERE PK_NO = xORDER_NO;
                                            /* should update ORDER_BALANCE_USED and free and payment uncheck if payemnt is used in item sls_order */
                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR

                                                    SELECT
                                                     SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO
                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO ;

                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN
                                                            GET_CUR_UPDATE_ORDER_SATUS: LOOP
                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                                xBOOKING_DETAILS_PK_NO
                                                                ,xINV_STOCK_PK_NO
                                                                ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                                LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;

                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */

                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */

            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = 0, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = VAR_F_ACC_BANK_TXN_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_AMOUNT_ACTUAL WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_CUSTOMERS SET CUSTOMER_BALANCE_ACTUAL = VAR_CUSTOMER_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR 
            WHERE PK_NO = VAR_F_CUSTOMER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = NULL, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;

    END IF;
     /*###################### RESELLER PAYMENT ############################*/
    IF VAR_IS_CUS_RESELLER_BANK_RECONCILATION = 2 THEN

        -- SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_RESELLER_PAYMENTS WHERE PK_NO = VAR_F_RESELLER_PAYMENT_NO ;

            UPDATE ACC_RESELLER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 1 WHERE PK_NO = VAR_F_RESELLER_PAYMENT_NO ;

              SELECT IFNULL(SUM(PAYMENT_REMAINING_MR),0), IFNULL(SUM(MR_AMOUNT),0) INTO  VAR_TOTAL_PAYMENT_REMAINING_MR,  VAR_CUM_BALANCE_ACTUAL
            FROM ACC_RESELLER_PAYMENTS WHERE F_RESELLER_NO = VAR_F_RESELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT PK_NO, ORDER_NO, PAYMENT_AMOUNT
                            FROM ACC_ORDER_PAYMENT
                            WHERE
                            F_ACC_RESELLER_PAYMENT_NO = VAR_F_RESELLER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start Procedre222222222222');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R VALUES ('Line 52222222222');
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT: LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 70');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - xPAYMENT_AMOUNT,ORDER_BALANCE_USED = 0 WHERE PK_NO = xORDER_NO;

                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR
                                                    SELECT
                                                    SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO

                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO ;

                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN

                                                            GET_CUR_UPDATE_ORDER_SATUS: LOOP

                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                            xBOOKING_DETAILS_PK_NO
                                                            ,xINV_STOCK_PK_NO
                                                            ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                            LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 10
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;


                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */

                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */


            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = 0, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = VAR_F_ACC_BANK_TXN_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_AMOUNT_ACTUAL WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_RESELLERS SET CUM_BALANCE_ACTUAL = VAR_CUM_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR  WHERE PK_NO = VAR_F_RESELLER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = NULL, IS_MATCHED = 0, MATCHED_ON = NULL WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;



    END IF;


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT_VERIFY` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT_VERIFY` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT_VERIFY`(IN_BANK_TXN_PK_NO Integer(11), IN_BANK_TXN_STATEMENT_PK_NO Integer(11))
    NO SQL
BEGIN


    -- UPDATE ACC_BANK_TXN BALANCE_ACTUAL (INCREMENT)
    -- UPDATE ACC_PAYMENT_BANK_ACC CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_CUSTOMERS CUSTOMER_BALANCE_ACTUAL (INCREMENT)
    -- UPDATE SLS_ORDER ORDER_ACTUAL_TOPUP
    -- UPDATE ACC_BANK_TXN_STATEMENT F_ACC_BANK_TXN_NO, IS_MATCHED




        DECLARE VAR_F_CUSTOMER_PAYMENT_NO INT DEFAULT 0;
        DECLARE VAR_F_RESELLER_PAYMENT_NO INT DEFAULT 0;
        DECLARE VAR_F_ACC_PAYMENT_BANK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_RESELLER_NO INT DEFAULT 0;
        DECLARE VAR_IS_CUS_RESELLER_BANK_RECONCILATION INT DEFAULT 0;
        DECLARE VAR_PAYMENT_CONFIRMED_STATUS INT DEFAULT 0;
        DECLARE VAR_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;
        DECLARE VAR_CUSTOMER_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_CUM_BALANCE_ACTUAL FLOAT DEFAULT 0;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;

        DECLARE int_row_count INT DEFAULT 0;
        DECLARE int_row_count2 INT DEFAULT 0;

        DECLARE xORDER_PAYMENT_PK_NO INT DEFAULT 0;
        DECLARE xORDER_NO INT DEFAULT 0;
        DECLARE xPAYMENT_AMOUNT FLOAT DEFAULT 0;

        DECLARE xNET_DUE FLOAT DEFAULT 0;
        DECLARE xNET_VALUE FLOAT DEFAULT 0;
        DECLARE xBOOKING_DETAILS_PK_NO FLOAT DEFAULT 0;
        DECLARE xINV_STOCK_PK_NO INT DEFAULT 0;







    SELECT F_CUSTOMER_PAYMENT_NO,F_RESELLER_PAYMENT_NO, F_ACC_PAYMENT_BANK_NO, F_CUSTOMER_NO, F_RESELLER_NO, IS_CUS_RESELLER_BANK_RECONCILATION INTO VAR_F_CUSTOMER_PAYMENT_NO, VAR_F_RESELLER_PAYMENT_NO, VAR_F_ACC_PAYMENT_BANK_NO, VAR_F_CUSTOMER_NO, VAR_F_RESELLER_NO, VAR_IS_CUS_RESELLER_BANK_RECONCILATION
        FROM ACC_BANK_TXN WHERE PK_NO = IN_BANK_TXN_PK_NO;


    /*###################### CUSTOMER PAYMENT ############################*/
    IF VAR_IS_CUS_RESELLER_BANK_RECONCILATION = 1 THEN

        SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

        UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 1 WHERE PK_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

        SELECT SUM(PAYMENT_REMAINING_MR), IFNULL(SUM(MR_AMOUNT),0) INTO VAR_TOTAL_PAYMENT_REMAINING_MR,VAR_CUSTOMER_BALANCE_ACTUAL
            FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = VAR_F_CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT PK_NO, ORDER_NO, PAYMENT_AMOUNT
                            FROM ACC_ORDER_PAYMENT
                            WHERE
                            -- IS_PAYMENT_FROM_BALANCE = 0 AND
                            F_ACC_CUSTOMER_PAYMENT_NO = VAR_F_CUSTOMER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start Procedre');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R values ('Line 52');
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT: LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 70');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP + xPAYMENT_AMOUNT WHERE PK_NO = xORDER_NO;

                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR
                                                    SELECT
                                                   -- SLS_ORDER.PK_NO AS ORDER
                                                   -- ,SLS_ORDER.ORDER_ACTUAL_TOPUP
                                                   -- ,SLS_BOOKING.TOTAL_PRICE
                                                   -- ,SLS_BOOKING.DISCOUNT
                                                    SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT) AS NET_VALUE
                                                    ,SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT - SLS_ORDER.ORDER_ACTUAL_TOPUP) AS NET_DUE
                                                   -- ,SLS_ORDER.F_BOOKING_NO
                                                    ,SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO
                                                   -- ,SLS_BOOKING_DETAILS.ORDER_STATUS
                                                   -- ,INV_STOCK.ORDER_STATUS AS INV_ORDER_STATUS
                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO GROUP BY SLS_BOOKING_DETAILS.PK_NO ;


                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN

                                                            GET_CUR_UPDATE_ORDER_SATUS: LOOP

                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                            xNET_VALUE
                                                            ,xNET_DUE
                                                            ,xBOOKING_DETAILS_PK_NO
                                                            ,xINV_STOCK_PK_NO
                                                            ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                            LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                            IF xNET_DUE <= 0  THEN

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;

                                                                UPDATE SLS_ORDER SET ORDER_BALANCE_USED = xNET_VALUE, DEFAULT_AT = null, DEFAULT_TYPE = 0
                                                                WHERE PK_NO = xORDER_NO;

                                                            END IF;

                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */




                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */


            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = AMOUNT_ACTUAL + VAR_MR_AMOUNT, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_PK_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL + VAR_MR_AMOUNT WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_CUSTOMERS SET CUSTOMER_BALANCE_ACTUAL = VAR_CUSTOMER_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR WHERE PK_NO = VAR_F_CUSTOMER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = IN_BANK_TXN_PK_NO, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;

    END IF;



     /*###################### RESELLER PAYMENT ############################*/
    IF VAR_IS_CUS_RESELLER_BANK_RECONCILATION = 2 THEN

        SELECT PAYMENT_CONFIRMED_STATUS, PAYMENT_REMAINING_MR, MR_AMOUNT INTO VAR_PAYMENT_CONFIRMED_STATUS, VAR_PAYMENT_REMAINING_MR, VAR_MR_AMOUNT  FROM ACC_RESELLER_PAYMENTS WHERE PK_NO = VAR_F_RESELLER_PAYMENT_NO ;

            UPDATE ACC_RESELLER_PAYMENTS SET PAYMENT_CONFIRMED_STATUS = 1 WHERE PK_NO = VAR_F_RESELLER_PAYMENT_NO ;

              SELECT SUM(PAYMENT_REMAINING_MR), IFNULL(SUM(MR_AMOUNT),0) INTO VAR_TOTAL_PAYMENT_REMAINING_MR, VAR_CUM_BALANCE_ACTUAL
            FROM ACC_RESELLER_PAYMENTS WHERE F_RESELLER_NO = VAR_F_RESELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            /* CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */
            Block1: BEGIN
                DECLARE INT_HAS_CUR_ROW INT DEFAULT 1;
                DECLARE CUR_ACC_ORDER_PAYMENT
                    CURSOR FOR
                        SELECT PK_NO, ORDER_NO, PAYMENT_AMOUNT
                            FROM ACC_ORDER_PAYMENT
                            WHERE
                            -- IS_PAYMENT_FROM_BALANCE = 0 AND
                            F_ACC_RESELLER_PAYMENT_NO = VAR_F_RESELLER_PAYMENT_NO ;

                            DECLARE CONTINUE HANDLER
                                FOR NOT FOUND SET INT_HAS_CUR_ROW = 0;

        INSERT INTO R VALUES('Start Procedre');
                                OPEN CUR_ACC_ORDER_PAYMENT;
                                    SELECT FOUND_ROWS() INTO int_row_count ;

        INSERT INTO R values ('Line 52');
                                    IF int_row_count > 0 THEN

                                        GET_CUR_ACC_ORDER_PAYMENT: LOOP
                                            FETCH NEXT
                                            FROM CUR_ACC_ORDER_PAYMENT
                                            INTO
                                            xORDER_PAYMENT_PK_NO
                                            ,xORDER_NO
                                            ,xPAYMENT_AMOUNT
                                            ;

                                            IF INT_HAS_CUR_ROW = 0 THEN
                                                LEAVE GET_CUR_ACC_ORDER_PAYMENT;
                                            END IF;
        INSERT INTO S VALUES('line 70');

                                            UPDATE SLS_ORDER SET ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP + xPAYMENT_AMOUNT WHERE PK_NO = xORDER_NO;

                                            /* UPDATE ORDER_STATUS = 60 */
                                                Block2: BEGIN
                                                    DECLARE INT_HAS_CUR_ROW2 INT DEFAULT 1;
                                                    DECLARE CUR_UPDATE_ORDER_SATUS
                                                    CURSOR FOR
                                                    SELECT
                                                   -- SLS_ORDER.PK_NO AS ORDER
                                                   -- ,SLS_ORDER.ORDER_ACTUAL_TOPUP
                                                   -- ,SLS_BOOKING.TOTAL_PRICE
                                                   -- ,SLS_BOOKING.DISCOUNT
                                                    SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT) AS NET_VALUE
                                                    ,SUM(SLS_BOOKING.TOTAL_PRICE - SLS_BOOKING.DISCOUNT - SLS_ORDER.ORDER_ACTUAL_TOPUP) AS NET_DUE
                                                   -- ,SLS_ORDER.F_BOOKING_NO
                                                    ,SLS_BOOKING_DETAILS.PK_NO AS BOOKING_DETAILS_PK_NO
                                                    ,INV_STOCK.PK_NO AS INV_STOCK_PK_NO
                                                   -- ,SLS_BOOKING_DETAILS.ORDER_STATUS
                                                   -- ,INV_STOCK.ORDER_STATUS AS INV_ORDER_STATUS
                                                    FROM SLS_ORDER
                                                    JOIN SLS_BOOKING ON SLS_BOOKING.PK_NO = SLS_ORDER.F_BOOKING_NO
                                                    JOIN SLS_BOOKING_DETAILS ON SLS_BOOKING_DETAILS.F_BOOKING_NO = SLS_BOOKING.PK_NO
                                                    JOIN INV_STOCK ON INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                                                    WHERE SLS_ORDER.PK_NO = xORDER_NO
                                                    GROUP BY SLS_BOOKING_DETAILS.PK_NO ;


                                                    DECLARE CONTINUE HANDLER
                                                    FOR NOT FOUND SET INT_HAS_CUR_ROW2 = 0;

INSERT INTO R VALUES('Start Procedre109');
                                                    OPEN CUR_UPDATE_ORDER_SATUS;
                                                        SELECT FOUND_ROWS() INTO int_row_count2 ;

                                                        IF int_row_count2 > 0 THEN

                                                            GET_CUR_UPDATE_ORDER_SATUS: LOOP

                                                            FETCH NEXT
                                                            FROM CUR_UPDATE_ORDER_SATUS
                                                            INTO
                                                            xNET_VALUE
                                                            ,xNET_DUE
                                                            ,xBOOKING_DETAILS_PK_NO
                                                            ,xINV_STOCK_PK_NO
                                                            ;

                                                            IF INT_HAS_CUR_ROW2 = 0 THEN
                                                            LEAVE GET_CUR_UPDATE_ORDER_SATUS;
                                                            END IF;

                                                            IF xNET_DUE <= 0  THEN

                                                                UPDATE SLS_BOOKING_DETAILS SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xBOOKING_DETAILS_PK_NO;

                                                                UPDATE INV_STOCK SET ORDER_STATUS = 60
                                                                WHERE PK_NO = xINV_STOCK_PK_NO;

                                                                UPDATE SLS_ORDER SET ORDER_BALANCE_USED = xNET_VALUE, DEFAULT_AT = null, DEFAULT_TYPE = 0
                                                                WHERE PK_NO = xORDER_NO;
                                                            END IF;

                                                            END LOOP GET_CUR_UPDATE_ORDER_SATUS;

                                                        END IF;
                                                    CLOSE CUR_UPDATE_ORDER_SATUS;
                                                END Block2;

                                        /* END SECOND CURSOR */

                                        END LOOP GET_CUR_ACC_ORDER_PAYMENT;

                                    END IF;

                                CLOSE CUR_ACC_ORDER_PAYMENT;
            END Block1;
            /* END CURSOR FOR UPDATE ACC_ORDER_PAYMENT AND SLS_ORDER */


            UPDATE ACC_BANK_TXN SET AMOUNT_ACTUAL = AMOUNT_ACTUAL + VAR_MR_AMOUNT, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_PK_NO;

            UPDATE ACC_PAYMENT_BANK_ACC SET BALANCE_ACTUAL = BALANCE_ACTUAL + VAR_MR_AMOUNT WHERE PK_NO = VAR_F_ACC_PAYMENT_BANK_NO;

            UPDATE SLS_RESELLERS SET CUM_BALANCE_ACTUAL = VAR_CUM_BALANCE_ACTUAL, CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR WHERE PK_NO = VAR_F_RESELLER_NO ;

            UPDATE ACC_BANK_TXN_STATEMENT SET F_ACC_BANK_TXN_NO = IN_BANK_TXN_PK_NO, IS_MATCHED = 1, MATCHED_ON = NOW() WHERE PK_NO = IN_BANK_TXN_STATEMENT_PK_NO;


    END IF;


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_INV_STOCK_PRC_STOCK_IN_MAP` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_INV_STOCK_PRC_STOCK_IN_MAP` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_INV_STOCK_PRC_STOCK_IN_MAP`(IN_PK_NO Integer)
    NO SQL
BEGIN

/*PROC_INV_STOCK_PRC_STOCK_IN_MAP*/
    DECLARE int_F_PRC_STOCK_IN_NO INT(11) default 0;
    DECLARE int_F_INV_WAREHOUSE_NO INT(11) default 0;

    /* INV_WAREHOUSE_NAME variable DECLARE*/
    DECLARE VAR_INV_WAREHOUSE_NAME  varchar(200);

    /*PRC_STOCK_IN_DETAILS*/
    DECLARE int_HAS_DATA_PRC_STOCK_IN_DETAILS INT DEFAULT 1;
    DECLARE int_RECIEVED_QTY INT;
    DECLARE int_FAULTY_QTY INT;
    DECLARE int_TOTAL INT;

    /*INV STOCK*/
    DECLARE xCODE                            INT;
    DECLARE xF_INV_STOCK_PRC_STOCK_IN_MAP_NO INT;
    DECLARE xF_PRC_STOCK_IN_NO               INT;
    DECLARE xF_PRC_STOCK_IN_DETAILS_NO       INT;
    DECLARE xIG_CODE                         varchar(20);
    DECLARE xSKUID                           varchar(40);
    DECLARE xF_PRD_VARIANT_NO                INT;
    DECLARE xPRD_VARINAT_NAME                varchar(200);
    DECLARE xINVOICE_NAME                    varchar(200);
    DECLARE xF_INV_WAREHOUSE_NO              INT;
    DECLARE xINV_WAREHOUSE_NAME              varchar(200);
    DECLARE xF_BOOKING_NO                    INT;
    DECLARE xF_BOOKING_DETAILS_NO            INT;
    DECLARE xF_ORDER_NO                      INT;
    DECLARE xF_ORDER_DETAILS_NO              INT;
    DECLARE xHS_CODE                         varchar(20);
    DECLARE xHS_CODE_NARRATION               varchar(200);
    DECLARE xF_CATEGORY_NO                   INT;
    DECLARE xCATEGORY_NAME                   varchar(200);
    DECLARE xF_SUB_CATEGORY_NO               INT;
    DECLARE xSUB_CATEGORY_NAME               varchar(200);
    DECLARE xBARCODE                         varchar(40);
    DECLARE xF_BRAND_NO                      INT;
    DECLARE xBRAND_NAME                      varchar(40);
    DECLARE xF_MODEL_NO                      INT;
    DECLARE xMODEL_NAME                      varchar(200);
    DECLARE xPRODUCT_STATUS                  INT;
    DECLARE xBOOKING_STATUS                  INT;
    DECLARE xORDER_STATUS                    INT;
    DECLARE xPRODUCT_PURCHASE_PRICE_GBP      FLOAT;
    DECLARE xPRODUCT_PURCHASE_PRICE          FLOAT;
    DECLARE xPRODUCT_REGULAR_PRICE           FLOAT;
    DECLARE xPRODUCT_INSTALLMENT_PRICE       FLOAT;
    DECLARE xORDER_PRICE                     FLOAT;
    DECLARE xSS_COST                         FLOAT;
    DECLARE xSM_COST                         FLOAT;
    DECLARE xAIR_FREIGHT_COST                FLOAT;
    DECLARE xSEA_FREIGHT_COST                FLOAT;
    DECLARE xPREFERRED_SHIPPING_METHOD       varchar(40);
    DECLARE xF_SHIPPMENT_NO                  INT;
    DECLARE xSHIPMENT_NAME                   varchar(200);
    DECLARE xBOX_BARCODE                     varchar(200);
    DECLARE xF_BOX_NO                        INT;
    DECLARE xPRC_IN_IMAGE_PATH               varchar(200);
    DECLARE xPRD_VARIANT_IMAGE_PATH           varchar(200);

    /*LOOP VARIABLES*/
    DECLARE i int DEFAULT 0;

    DECLARE cur_PRC_STOCK_IN_DETAILS
        CURSOR FOR

                SELECT

                        INVOICE.F_PRC_STOCK_IN
                        ,INVOICE.PK_NO
                        ,INVOICE.F_PRD_VARIANT_NO
                        ,PRODUCT.MRK_ID_COMPOSITE_CODE
                        ,PRODUCT.COMPOSITE_CODE
                        ,PRODUCT.VARIANT_NAME
                        ,INVOICE.INVOICE_NAME
                        ,PRODUCT.HS_CODE
                        ,PRODUCT.BARCODE
                        ,INVOICE.UNIT_PRICE_GBP_EV
                        ,INVOICE.UNIT_PRICE_MR_EV
                        ,INVOICE.RECIEVED_QTY
                        ,INVOICE.FAULTY_QTY
                        ,PRODUCT.REGULAR_PRICE
                        ,PRODUCT.INSTALLMENT_PRICE
                        ,PRODUCT.INTER_DISTRICT_POSTAGE
                        ,PRODUCT.LOCAL_POSTAGE
                        ,PRODUCT.AIR_FREIGHT_CHARGE
                        ,PRODUCT.SEA_FREIGHT_CHARGE
                        ,PRODUCT.PREFERRED_SHIPPING_METHOD
                        ,INVOICE_MASTER.MASTER_INVOICE_RELATIVE_PATH
                        ,PRODUCT.PRIMARY_IMG_RELATIVE_PATH
                        ,PRODUCT_MASTER.F_MODEL
                        ,PRODUCT_MASTER.MODEL_NAME
                        ,PRODUCT_MASTER.F_BRAND
                        ,PRODUCT_MASTER.BRAND_NAME
                        ,PRODUCT_SUB_CATEGORY.PK_NO
                        ,PRODUCT_SUB_CATEGORY.NAME
                        ,PRODUCT_CATEGORY.PK_NO
                        ,PRODUCT_CATEGORY.NAME


                        FROM
        PRC_STOCK_IN INVOICE_MASTER
                                ,PRC_STOCK_IN_DETAILS INVOICE
                                ,PRD_VARIANT_SETUP PRODUCT
                                ,PRD_MASTER_SETUP PRODUCT_MASTER
                                ,PRD_SUB_CATEGORY PRODUCT_SUB_CATEGORY
                                ,PRD_CATEGORY PRODUCT_CATEGORY


                        WHERE
                    INVOICE.F_PRC_STOCK_IN = int_F_PRC_STOCK_IN_NO
                        AND  INVOICE.F_PRD_VARIANT_NO = PRODUCT.PK_NO
                        AND PRODUCT.F_PRD_MASTER_SETUP_NO=  PRODUCT_MASTER.PK_NO
                        AND PRODUCT_MASTER.F_PRD_SUB_CATEGORY_ID= PRODUCT_SUB_CATEGORY.PK_NO
                        AND PRODUCT_SUB_CATEGORY.F_PRD_CATEGORY_NO=  PRODUCT_CATEGORY.PK_NO
                        AND INVOICE_MASTER.PK_NO = INVOICE.F_PRC_STOCK_IN
                            ;



    DECLARE CONTINUE HANDLER
    FOR NOT FOUND SET int_HAS_DATA_PRC_STOCK_IN_DETAILS=0;


    /*delete from R;
    insert into R values ('96');

    insert into R values (int_F_PRC_STOCK_IN_NO);
    insert into R values (int_F_INV_WAREHOUSE_NO);    */


    SELECT F_PRC_STOCK_IN_NO ,F_INV_WAREHOUSE_NO
        INTO int_F_PRC_STOCK_IN_NO, int_F_INV_WAREHOUSE_NO
    FROM INV_STOCK_PRC_STOCK_IN_MAP
    WHERE PK_NO = IN_PK_NO ;


    /*FOR INV_WAREHOUSE_NAME  */

    SELECT NAME
        INTO VAR_INV_WAREHOUSE_NAME
    FROM INV_WAREHOUSE
    WHERE PK_NO= int_F_INV_WAREHOUSE_NO;

    IF int_F_INV_WAREHOUSE_NO = 2 THEN
       SET xPRODUCT_STATUS = 60;
    ELSE
       SET xPRODUCT_STATUS = NULL;
    END IF;
    /*insert into R values (int_F_PRC_STOCK_IN_NO);
    insert into R values (int_F_INV_WAREHOUSE_NO);        */


    OPEN cur_PRC_STOCK_IN_DETAILS;

        insert into R values ('105');

                get_PRC_STOCK_IN_DETAILS: LOOP

                        FETCH NEXT FROM  cur_PRC_STOCK_IN_DETAILS INTO

                        xF_PRC_STOCK_IN_NO               ,
                        xF_PRC_STOCK_IN_DETAILS_NO       ,
                        xF_PRD_VARIANT_NO                ,
                        xIG_CODE                         ,
                        xSKUID                           ,
                        xPRD_VARINAT_NAME                ,
                        xINVOICE_NAME                    ,
                        xHS_CODE                         ,
                        xBARCODE                         ,
                        xPRODUCT_PURCHASE_PRICE_GBP      ,
                        xPRODUCT_PURCHASE_PRICE          ,
                        int_RECIEVED_QTY                 ,
                        int_FAULTY_QTY                   ,
                        xPRODUCT_REGULAR_PRICE           ,
                        xPRODUCT_INSTALLMENT_PRICE       ,
                        xSS_COST                         ,
                        xSM_COST                         ,
                        xAIR_FREIGHT_COST                ,
                        xSEA_FREIGHT_COST                ,
                        xPREFERRED_SHIPPING_METHOD       ,
                        xPRC_IN_IMAGE_PATH               ,
                        xPRD_VARIANT_IMAGE_PATH          ,
                        xF_MODEL_NO                      ,
                        xMODEL_NAME                      ,
                        xF_BRAND_NO                      ,
                        xBRAND_NAME                      ,
                        xF_SUB_CATEGORY_NO               ,
                        xSUB_CATEGORY_NAME               ,
                        xF_CATEGORY_NO                   ,
                        xCATEGORY_NAME                   ;



        /*TOTAL GEN = RECQTY - FAUTLY QTY*/
        IF int_HAS_DATA_PRC_STOCK_IN_DETAILS = 0 THEN
            LEAVE get_PRC_STOCK_IN_DETAILS;

        END IF;

        SET int_TOTAL = int_RECIEVED_QTY - int_FAULTY_QTY;


        SET i=0;
        WHILE i < int_TOTAL DO

            insert into INV_STOCK(
                F_INV_STOCK_PRC_STOCK_IN_MAP_NO
                ,F_PRC_STOCK_IN_NO
                ,F_PRC_STOCK_IN_DETAILS_NO
                ,IG_CODE
                ,SKUID
                ,F_PRD_VARIANT_NO
                ,PRD_VARINAT_NAME
                ,INVOICE_NAME
                ,F_INV_WAREHOUSE_NO
                ,INV_WAREHOUSE_NAME
                ,HS_CODE
                ,F_CATEGORY_NO
                ,CATEGORY_NAME
                ,F_SUB_CATEGORY_NO
                ,SUB_CATEGORY_NAME
                ,BARCODE
                ,F_BRAND_NO
                ,BRAND_NAME
                ,F_MODEL_NO
                ,MODEL_NAME
                ,PRODUCT_PURCHASE_PRICE_GBP
                ,PRODUCT_PURCHASE_PRICE
                ,REGULAR_PRICE
                ,INSTALLMENT_PRICE
                ,SS_COST
                ,SM_COST
                ,AIR_FREIGHT_COST
                ,SEA_FREIGHT_COST
                ,PREFERRED_SHIPPING_METHOD
                ,FINAL_PREFFERED_SHIPPING_METHOD
                ,PRC_IN_IMAGE_PATH
                ,PRD_VARIANT_IMAGE_PATH
                ,PRODUCT_STATUS
                )
            VALUES

            (


            IN_PK_NO
            ,xF_PRC_STOCK_IN_NO
            ,xF_PRC_STOCK_IN_DETAILS_NO
            ,xIG_CODE
            ,xSKUID
            ,xF_PRD_VARIANT_NO
            ,xPRD_VARINAT_NAME
            ,xINVOICE_NAME
            ,int_F_INV_WAREHOUSE_NO
            ,VAR_INV_WAREHOUSE_NAME
            ,xHS_CODE
            ,xF_CATEGORY_NO
            ,xCATEGORY_NAME
            ,xF_SUB_CATEGORY_NO
            ,xSUB_CATEGORY_NAME
            ,xBARCODE
            ,xF_BRAND_NO
            ,xBRAND_NAME
            ,xF_MODEL_NO
            ,xMODEL_NAME
            ,xPRODUCT_PURCHASE_PRICE_GBP
            ,xPRODUCT_PURCHASE_PRICE
            ,xPRODUCT_REGULAR_PRICE
            ,xPRODUCT_INSTALLMENT_PRICE
            ,xSS_COST
            ,xSM_COST
            ,xAIR_FREIGHT_COST
            ,xSEA_FREIGHT_COST
            ,xPREFERRED_SHIPPING_METHOD
            ,xPREFERRED_SHIPPING_METHOD
            ,xPRC_IN_IMAGE_PATH
            ,xPRD_VARIANT_IMAGE_PATH
            ,xPRODUCT_STATUS
                );

            SET i = i + 1;

        END WHILE;



    END LOOP get_PRC_STOCK_IN_DETAILS;


    /* UPDATE INV_STOCK_PRC_STOCK_IN_MAP
    SET PROCESS_COMPLETE_TIME = NOW()
    WHERE PK_NO=IN_PK_NO;     */


CLOSE cur_PRC_STOCK_IN_DETAILS;


/*
if (int_HAS_DATA_PRC_STOCK_IN_DETAILS = 0)
return

    */

/*insert into INV_STOCK(CODE,INVOICE_NAME,PRD_VARIANT_NAME,HS_CODE,BAR_CODE)

SELECT CODE,INVOICE_NAME,PRD_VARIANT_NAME,HS_CODE,BAR_CODE

FROM PRC_STOCK_IN_DETAILS

WHERE PK_NO = IN_PK_NO;*/

END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK(20100251,'101103111102~1~9|',1,3,'~','|',1,0,width,length,height,weight,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE xLIMIT INT;
    DECLARE sPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE xCUSTOMER_PREFFERED_SHIPPING_METHOD VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE int_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE check_shipment_type VARCHAR(45);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
            AND SKUID=var_arrary_param1
            AND FINAL_PREFFERED_SHIPPING_METHOD = check_shipment_type
            ORDER BY F_ORDER_NO DESC LIMIT var_arrary_param3;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

            DELETE FROM S;
            /*REBOXING



            IF IS_UPDATE = 1 THEN
              SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO S VALUES(concat('DELETE FOR UPDATE ' , int_row_count));
              INSERT INTO S VALUES(int_row_count);
              IF int_row_count > 0 THEN
              UPDATE INV_STOCK
                     SET PRODUCT_STATUS = NULL,
                     BOX_BARCODE = NULL,
                     BOX_TYPE = NULL,
                     F_BOX_NO = NULL
              WHERE F_BOX_NO =  int_box_pk ;

              DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;
                 INSERT INTO S VALUES(2);
              DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
              END IF;

            END IF;
        /*REBOXING End*/


INSERT INTO S VALUES('Start Procedre');

            SELECT SUBSTRING(IN_BOX_LABEL, 1, 1) INTO check_shipment_type;

            INSERT INTO S VALUES(concat('SC BOX label ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('First_Box ' , check_shipment_type));

            IF check_shipment_type = '1' THEN
               SET check_shipment_type = 'AIR';
            ELSE
               SET check_shipment_type = 'SEA';
            END IF;


            SELECT PK_NO, COUNT(BOX_NO) INTO int_box_pk, int_is_duplicate_box FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;


            SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS user_name_concate INTO user_name FROM SA_USER WHERE PK_NO = USER_ID;
DELETE FROM S;
INSERT INTO S VALUES(concat('SC BOX Pk ' , int_box_pk));
INSERT INTO S VALUES(concat('Duplicate Box Flag ', int_is_duplicate_box));
INSERT INTO S VALUES(concat('Shipment Type ' , check_shipment_type));

        IF int_is_duplicate_box = 0 THEN

            SELECT F_INV_WAREHOUSE_NO INTO from_warehouse_no FROM SS_INV_USER_MAP WHERE F_USER_NO = USER_ID;
            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('USER_ID ' , USER_ID));
            INSERT INTO S VALUES(concat('user_name ' , user_name));
            INSERT INTO S VALUES(concat('INV house ' , from_warehouse_no));
            INSERT INTO SC_BOX (BOX_NO
                               ,F_BOX_USER_NO
                               ,USER_NAME
                               ,BOX_STATUS
                               ,F_INV_WAREHOUSE_NO
                               ,WIDTH_CM
                               ,LENGTH_CM
                               ,HEIGHT_CM
                               ,WEIGHT_KG
                               ) VALUES(
                               IN_BOX_LABEL
                               ,USER_ID
                               ,user_name
                               ,10
                               ,from_warehouse_no
                               ,IN_WIDTH
                               ,IN_LENGTH
                               ,IN_HEIGHT
                               ,IN_WEIGHT);
            SELECT LAST_INSERT_ID() INTO int_box_pk;

INSERT INTO S VALUES(concat('Inserted SC Box Pk ', int_box_pk));
insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            SET i=1;


            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;



                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );


                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );




insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count <= var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


                    insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO S VALUES(concat('init j val ', j));*/

                    get_PROC_SC_BOX_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                         UPDATE INV_STOCK
                            SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                          /*  SET j = j + 1;*/
                          SET int_count_updated_row = int_count_updated_row + 1;


                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );
                SET xLIMIT = var_arrary_param3 - int_count_updated_row;
                INSERT INTO S VALUES(concat('LIMIT VALUE ', xLIMIT) );

                IF int_count_updated_row < var_arrary_param3 THEN

                /*-------------------------BLOCK 2 BEGINS ------------------------------*/
                Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_BOXING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        PK_NO,CUSTOMER_PREFFERED_SHIPPING_METHOD
                        FROM INV_STOCK
                        WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                        AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
                        AND SKUID=var_arrary_param1;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0;

                OPEN cur_PROC_SC_BOXING_LIST_INV_STOCK;
                    SELECT FOUND_ROWS() into int_row_count_cursor2 ;
                    insert into S values (concat('Found row2 before Loop ', int_row_count_cursor2));

                    IF int_row_count_cursor2 != 0 THEN
                       IF int_count_updated_row = 0 THEN
                          SET ALL_SUCCESS = ALL_SUCCESS + 1;
                       END IF;

                        INSERT INTO S VALUES(concat('ALL_SUCCESS LINE 213 ', ALL_SUCCESS) );
                        get_PROC_SC_BOX_INV_STOCK_TOP:LOOP

                            FETCH NEXT FROM cur_PROC_SC_BOXING_LIST_INV_STOCK  INTO xPK_NO,xCUSTOMER_PREFFERED_SHIPPING_METHOD;

                            INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK));
                            INSERT INTO S VALUES(concat('Cus Preferred ', xCUSTOMER_PREFFERED_SHIPPING_METHOD));

                                        IF int_count_updated_row = var_arrary_param3 OR int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0 THEN

                                                LEAVE get_PROC_SC_BOX_INV_STOCK_TOP;
                                        END IF;

                            INSERT INTO S VALUES(concat('INV Stock TOP PK_NO ', xPK_NO) );

                            IF xCUSTOMER_PREFFERED_SHIPPING_METHOD IS NULL OR xCUSTOMER_PREFFERED_SHIPPING_METHOD = check_shipment_type THEN

                                UPDATE INV_STOCK
                                    SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                                    WHERE PK_NO =  xPK_NO;
                                INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                                /*  SET j = j + 1;*/
                                SET int_count_updated_row = int_count_updated_row + 1;

                                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );

                            END IF;


                        END LOOP get_PROC_SC_BOX_INV_STOCK_TOP;
                    END IF;

                CLOSE cur_PROC_SC_BOXING_LIST_INV_STOCK;

                END Block2;
                /*-------------------------BLOCK 2 ENDS ------------------------------*/


                   IF int_count_updated_row != var_arrary_param3 THEN
                     /*UPDATE INV_STOCK
                         SET PRODUCT_STATUS = NULL,
                             BOX_BARCODE = NULL,
                             BOX_TYPE = NULL,
                             F_BOX_NO = NULL
                         WHERE SKUID=var_arrary_param1
                         AND F_BOX_NO =  int_box_pk;*/

                     SET ALL_SUCCESS_PART = 0;
                   END IF;

                END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';

                  ELSE */
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                     SET OUT_STATUS = 'success';

                  ELSE
                    SET OUT_STATUS = 'failed';
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                    UPDATE INV_STOCK
                           SET F_BOX_NO = NULL,
                               PRODUCT_STATUS = NULL,
                               BOX_BARCODE = NULL,
                               BOX_TYPE = NULL
                           WHERE F_BOX_NO =  int_box_pk ;

                    DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;

                    DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;

                   END IF;


        ELSE
           SET OUT_STATUS = 'duplicate-box';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_HELPER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_HELPER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_HELPER`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer)
    NO SQL
BEGIN

SET max_sp_recursion_depth=0;

                                                           
  INSERT INTO R VALUES('helper5');                                                         
/*10101010~10~5|10101011~9~3|10101012~10~1|*/
    INSERT INTO R VALUES('helper7'); 
      
  CALL PROC_SC_BOX_INV_STOCK(IN_BOX_LABEL, IN_INV_BOXING_ARRAY, IN_ROW_COUNT, IN_COL_PARAMETERS, IN_COLUMN_SEPARATOR, IN_ROW_SEPARATOR, USER_ID, IS_UPDATE,@OUT_STATUS);


INSERT INTO R VALUES(@OUT_STATUS);

        


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_ITEM_ADD` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_ITEM_ADD` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_ITEM_ADD`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_ITEM_ADD(20100251,'101103111102~1~9|',1,3,'~','|',1,0,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE xLIMIT INT;
    DECLARE sPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE xCUSTOMER_PREFFERED_SHIPPING_METHOD VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE var_inv_stored_pk VARCHAR(20000) DEFAULT 0;
    DECLARE int_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE check_shipment_type VARCHAR(45);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
            AND SKUID=var_arrary_param1
            AND FINAL_PREFFERED_SHIPPING_METHOD = check_shipment_type
            ORDER BY F_ORDER_NO DESC LIMIT var_arrary_param3;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

            DELETE FROM S;
            /*REBOXING*/



           /* IF IS_UPDATE = 1 THEN
              SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO S VALUES(concat('DELETE FOR UPDATE ' , int_row_count));
              INSERT INTO S VALUES(int_row_count);
              IF int_row_count > 0 THEN
              UPDATE INV_STOCK
                     SET PRODUCT_STATUS = NULL,
                     BOX_BARCODE = NULL,
                     BOX_TYPE = NULL,
                     F_BOX_NO = NULL
              WHERE F_BOX_NO =  int_box_pk ;

              DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;
                 INSERT INTO S VALUES(2);
              DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;
              END IF;

            END IF;
        REBOXING End*/


INSERT INTO S VALUES('Start Procedre');

            SELECT SUBSTRING(IN_BOX_LABEL, 1, 1) INTO check_shipment_type;

            INSERT INTO S VALUES(concat('SC BOX label ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('First_Box ' , check_shipment_type));

            IF check_shipment_type = '1' THEN
               SET check_shipment_type = 'AIR';
            ELSE
               SET check_shipment_type = 'SEA';
            END IF;

            SELECT PK_NO, COUNT(BOX_NO) INTO int_box_pk, int_is_duplicate_box FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;

            -- SELECT CONCAT(first_name, ' ', last_name) AS user_name_concate INTO user_name FROM admin_users WHERE auth_id = USER_ID;
DELETE FROM S;
INSERT INTO S VALUES(concat('SC BOX Pk ' , int_box_pk));
INSERT INTO S VALUES(concat('Duplicate Box Flag ', int_is_duplicate_box));
INSERT INTO S VALUES(concat('Shipment Type ' , check_shipment_type));

        IF int_is_duplicate_box != 0 THEN

        create temporary table temp2_inv_pk_no
               ( inv_pk_no int );

        UPDATE SC_BOX SET WIDTH_CM = IN_WIDTH, LENGTH_CM = IN_LENGTH, HEIGHT_CM = IN_HEIGHT, WEIGHT_KG = IN_WEIGHT WHERE BOX_NO = IN_BOX_LABEL;
            -- SELECT F_INV_WAREHOUSE_NO INTO from_warehouse_no FROM SS_INV_USER_MAP WHERE F_USER_NO = USER_ID;
            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('USER_ID ' , USER_ID));
            -- INSERT INTO S VALUES(concat('user_name ' , user_name));
            -- INSERT INTO S VALUES(concat('INV house ' , from_warehouse_no));
            -- INSERT INTO SC_BOX (BOX_NO,F_BOX_USER_NO,USER_NAME,BOX_STATUS,F_INV_WAREHOUSE_NO) VALUES(IN_BOX_LABEL,USER_ID,user_name,10,from_warehouse_no);
            -- SELECT LAST_INSERT_ID() INTO int_box_pk;

INSERT INTO S VALUES(concat('Inserted SC Box Pk ', int_box_pk));
insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            SET i=1;


            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;



                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );


                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );




insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count <= var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;


                    insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO S VALUES(concat('init j val ', j));*/

                    get_PROC_SC_BOX_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                         UPDATE INV_STOCK
                            SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                        /*  SET j = j + 1;*/
                        SET int_count_updated_row = int_count_updated_row + 1;
                        insert into temp2_inv_pk_no(inv_pk_no) values (xPK_NO);
                        /*if var_inv_stored_pk = 0 THEN
                            SET var_inv_stored_pk = xPK_NO;
                        ELSE
                            SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                        END IF;
                        */
                    INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );

                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );
                SET xLIMIT = var_arrary_param3 - int_count_updated_row;
                INSERT INTO S VALUES(concat('LIMIT VALUE ', xLIMIT) );

                IF int_count_updated_row < var_arrary_param3 THEN

                /*-------------------------BLOCK 2 BEGINS ------------------------------*/
                Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_BOXING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        PK_NO,CUSTOMER_PREFFERED_SHIPPING_METHOD
                        FROM INV_STOCK
                        WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                        AND (PRODUCT_STATUS IS NULL OR PRODUCT_STATUS = 0 OR PRODUCT_STATUS = 90 AND PRODUCT_STATUS != 420)
                        AND SKUID=var_arrary_param1;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0;

                OPEN cur_PROC_SC_BOXING_LIST_INV_STOCK;
                    SELECT FOUND_ROWS() into int_row_count_cursor2 ;
                    insert into S values (concat('Found row2 before Loop ', int_row_count_cursor2));

                    IF int_row_count_cursor2 != 0 THEN
                       IF int_count_updated_row = 0 THEN
                          SET ALL_SUCCESS = ALL_SUCCESS + 1;
                       END IF;

                        INSERT INTO S VALUES(concat('ALL_SUCCESS LINE 223 ', ALL_SUCCESS) );
                        get_PROC_SC_BOX_INV_STOCK_TOP:LOOP

                            FETCH NEXT FROM cur_PROC_SC_BOXING_LIST_INV_STOCK  INTO xPK_NO,xCUSTOMER_PREFFERED_SHIPPING_METHOD;

                            INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK));
                            INSERT INTO S VALUES(concat('Cus Preferred ', xCUSTOMER_PREFFERED_SHIPPING_METHOD));

                                        IF int_count_updated_row = var_arrary_param3 OR int_HAS_cur_PROC_SC_BOXING_LIST_INV_STOCK = 0 THEN

                                                LEAVE get_PROC_SC_BOX_INV_STOCK_TOP;
                                        END IF;

                            INSERT INTO S VALUES(concat('INV Stock TOP PK_NO ', xPK_NO) );

                            IF xCUSTOMER_PREFFERED_SHIPPING_METHOD IS NULL OR xCUSTOMER_PREFFERED_SHIPPING_METHOD = check_shipment_type THEN

                                UPDATE INV_STOCK
                                    SET F_BOX_NO = int_box_pk, PRODUCT_STATUS = 20,BOX_BARCODE = IN_BOX_LABEL,BOX_TYPE=check_shipment_type
                                    WHERE PK_NO =  xPK_NO;
                                INSERT INTO SC_BOX_INV_STOCK( F_BOX_NO, F_INV_STOCK_NO) VALUES ( int_box_pk, xPK_NO );
                                /*  SET j = j + 1;*/
                                SET int_count_updated_row = int_count_updated_row + 1;
                                insert into temp2_inv_pk_no(inv_pk_no) values (xPK_NO);
                                /*if var_inv_stored_pk = 0 THEN
                                    SET var_inv_stored_pk = xPK_NO;
                                ELSE
                                    SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                                END IF;
                                */
                                INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );

                                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );

                            END IF;


                        END LOOP get_PROC_SC_BOX_INV_STOCK_TOP;
                    END IF;

                CLOSE cur_PROC_SC_BOXING_LIST_INV_STOCK;

                END Block2;
                /*-------------------------BLOCK 2 ENDS ------------------------------*/

                   IF int_count_updated_row != var_arrary_param3 THEN
                     /*UPDATE INV_STOCK
                         SET PRODUCT_STATUS = NULL,
                             BOX_BARCODE = NULL,
                             BOX_TYPE = NULL,
                             F_BOX_NO = NULL
                         WHERE SKUID=var_arrary_param1
                         AND F_BOX_NO =  int_box_pk;*/

                     SET ALL_SUCCESS_PART = 0;
                   END IF;

                END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';

                  ELSE */
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                     SET OUT_STATUS = 'success';

                  ELSE
                    SET OUT_STATUS = 'failed';
                    INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );
                    SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
                    UPDATE INV_STOCK
                           SET F_BOX_NO = NULL,
                               PRODUCT_STATUS = NULL,
                               BOX_BARCODE = NULL,
                               BOX_TYPE = NULL
                           WHERE PK_NO IN (select inv_pk_no from temp2_inv_pk_no);

                    DELETE FROM SC_BOX_INV_STOCK
                    WHERE F_INV_STOCK_NO IN (select inv_pk_no from temp2_inv_pk_no) ;


                    -- DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;

                   END IF;

        drop temporary table if exists temp2_inv_pk_no;
        ELSE
           SET OUT_STATUS = 'box-not-found';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_CUSTOMER_PAYMENT_DELETE` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_CUSTOMER_PAYMENT_DELETE` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_CUSTOMER_PAYMENT_DELETE`(IN_PK_NO Integer(11), IN_TYPE VarChar(20))
    NO SQL
BEGIN


        DECLARE VAR_ACC_CUSTOMER_PAYMENTS_PK_NO INT DEFAULT 0;
        DECLARE VAR_F_CUSTOMER_NO INT DEFAULT 0;
        DECLARE VAR_F_PAYMENT_ACC_NO INT DEFAULT 0;
        DECLARE VAR_PAYMENT_CONFIRMED_STATUS INT DEFAULT 0;
        DECLARE VAR_MR_AMOUNT FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
        DECLARE VAR_PAYMENT_DATE DATE DEFAULT NULL;

    IF IN_TYPE = 'customer' THEN


            SELECT PK_NO, F_CUSTOMER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_REMAINING_MR,PAYMENT_DATE,PAYMENT_CONFIRMED_STATUS INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_REMAINING_MR,VAR_PAYMENT_DATE, VAR_PAYMENT_CONFIRMED_STATUS
                FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;


                    IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

                            UPDATE SLS_CUSTOMERS
                            SET CUSTOMER_BALANCE_BUFFER = CUSTOMER_BALANCE_BUFFER - VAR_MR_AMOUNT
                            ,CUSTOMER_BALANCE_ACTUAL = CUSTOMER_BALANCE_ACTUAL - VAR_MR_AMOUNT
                            ,CUM_BALANCE = CUM_BALANCE - VAR_PAYMENT_REMAINING_MR
                            WHERE PK_NO = VAR_F_CUSTOMER_NO;


                            UPDATE ACC_PAYMENT_BANK_ACC
                            SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                            ,BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_MR_AMOUNT
                            WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;



                    ELSE
                            UPDATE SLS_CUSTOMERS SET CUSTOMER_BALANCE_BUFFER = CUSTOMER_BALANCE_BUFFER - VAR_MR_AMOUNT WHERE PK_NO = VAR_F_CUSTOMER_NO;


                            UPDATE ACC_PAYMENT_BANK_ACC
                            SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                            WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                    END IF;


                DELETE FROM ACC_BANK_TXN WHERE F_CUSTOMER_PAYMENT_NO = IN_PK_NO;
                DELETE  FROM ACC_CUSTOMER_PAYMENTS WHERE PK_NO = IN_PK_NO;




    ELSEIF IN_TYPE = 'reseller' THEN

            SELECT PK_NO, F_RESELLER_NO,F_PAYMENT_ACC_NO,MR_AMOUNT,PAYMENT_REMAINING_MR,PAYMENT_DATE,PAYMENT_CONFIRMED_STATUS INTO VAR_ACC_CUSTOMER_PAYMENTS_PK_NO, VAR_F_CUSTOMER_NO, VAR_F_PAYMENT_ACC_NO, VAR_MR_AMOUNT, VAR_PAYMENT_REMAINING_MR, VAR_PAYMENT_DATE, VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_RESELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;

                IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

                        UPDATE SLS_RESELLERS
                        SET CUM_BALANCE_BUFFER = CUM_BALANCE_BUFFER - VAR_MR_AMOUNT
                        ,CUM_BALANCE_ACTUAL = CUM_BALANCE_ACTUAL - VAR_MR_AMOUNT
                        ,CUM_BALANCE = CUM_BALANCE - VAR_PAYMENT_REMAINING_MR
                        WHERE PK_NO = VAR_F_CUSTOMER_NO;


                        UPDATE ACC_PAYMENT_BANK_ACC
                        SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                        ,BALANCE_ACTUAL = BALANCE_ACTUAL - VAR_MR_AMOUNT
                        WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;



                ELSE
                        UPDATE SLS_RESELLERS SET CUM_BALANCE_BUFFER = CUM_BALANCE_BUFFER - VAR_MR_AMOUNT WHERE PK_NO = VAR_F_CUSTOMER_NO;


                        UPDATE ACC_PAYMENT_BANK_ACC
                        SET BALACNE_BUFFER = BALACNE_BUFFER - VAR_MR_AMOUNT
                        WHERE PK_NO = VAR_F_PAYMENT_ACC_NO;

                END IF;



                DELETE FROM ACC_BANK_TXN WHERE F_RESELLER_PAYMENT_NO = IN_PK_NO;
                DELETE FROM ACC_RESELLER_PAYMENTS WHERE PK_NO = IN_PK_NO;




    END IF;





END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_ORDER_RTS_COLLECT` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_ORDER_RTS_COLLECT` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_ORDER_RTS_COLLECT`(IN_ORDER_ID_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COLUMN_SEPARATOR VarChar(1), OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN


    DECLARE var_arrary_param1 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE PICKUP_ID_ INT;
    DECLARE LAST_INSERT_PK_NO INT;
    DECLARE i,j INT;
    DECLARE ALL_SUCCESS INT DEFAULT 0;

DELETE FROM R;
INSERT INTO R VALUES('Start Procedre');

 insert into R values (concat('Parameter Array ',IN_ORDER_ID_ARRAY));
 insert into R values (concat('IN_ROW_COUNT ',IN_ROW_COUNT));

            create temporary table temp_order_id_no
               ( order_pk_no int );

            SET var_arrary_row_part =  IN_ORDER_ID_ARRAY;

            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO R VALUES(concat('loop i val ', i));

--                 SELECT substring_index(IN_ORDER_ID_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

                -- SET var_arrary_row      =  IN_ORDER_ID_ARRAY;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;

                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );

                -- SET IN_ORDER_ID_ARRAY = substring(IN_ORDER_ID_ARRAY , length(var_arrary_row)+2 , length(IN_ORDER_ID_ARRAY) - length(var_arrary_row) );

insert into R values (concat('ROW PART   ', var_arrary_row_part));
insert into R values (concat('Param 1   ', var_arrary_param1));

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));

                    INSERT INTO temp_order_id_no( order_pk_no) VALUES ( var_arrary_param1 );

                set i = i + 1;

            END WHILE;

                IF ALL_SUCCESS = IN_ROW_COUNT THEN
                    SET OUT_STATUS = 'success';
                    SELECT RTS_BATCH_NO INTO PICKUP_ID_ FROM SLS_BATCH_LIST ORDER BY PK_NO DESC LIMIT 1;
                    SET PICKUP_ID_ = PICKUP_ID_ + 1;
                    INSERT INTO SLS_BATCH_LIST (RTS_BATCH_NO) VALUES (PICKUP_ID_);
                    SELECT LAST_INSERT_ID() INTO LAST_INSERT_PK_NO;
                    UPDATE SLS_ORDER SET PICKUP_ID = LAST_INSERT_PK_NO WHERE PK_NO IN (select order_pk_no from temp_order_id_no);

                ELSE
                    SET OUT_STATUS = 'failed';
                END IF;

drop temporary table if exists temp_order_id_no;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));

END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_PACKAGING_LIST_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_PACKAGING_LIST_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_PACKAGING_LIST_INV_STOCK`(SHIPMENT_NO Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN

    DECLARE int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK INT DEFAULT 1;
    DECLARE int_is_duplicate_shipment INT DEFAULT 1;
    DECLARE package_pk_no INT;
    DECLARE box_serial_no INT;
    DECLARE box_no INT;
    DECLARE shipment_name INT;
    DECLARE int_row_count INT;
    DECLARE int_box_row_count INT;
    DECLARE int_row_count_cursor2 INT;
    DECLARE int_row_count_cursor3 INT;
    DECLARE int_width INT;
    DECLARE int_length INT;
    DECLARE int_height INT;
    DECLARE int_weight FLOAT;
    DECLARE int_product_count INT;
    DECLARE int_count_price FLOAT;
    DECLARE variant_no INT;
    DECLARE invoice_no VarChar(255);
    DECLARE invoice_pk_no VarChar(255) DEFAULT '0';
    DECLARE int_product_count_invoice INT;
    DECLARE int_prc_no INT;
    DECLARE vendor_name VarChar(255);
    DECLARE invoice_date VarChar(255);
    DECLARE var_hs_code VarChar(255);
    DECLARE var_ig_code VarChar(255);
    DECLARE sku_id INT;
    DECLARE sub_cat_name VarChar(255);
    DECLARE var_invoice_name VarChar(255);
    DECLARE unit_price FLOAT;
    DECLARE var_invoice_details VarChar(4000) DEFAULT '0';
    DECLARE var_invoice_details_part VarChar(4000);
    DECLARE OUT_STATUS_2 VarChar(20);
    DECLARE OUT_STATUS_3 VarChar(20);
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_2 INT DEFAULT 0;
    DECLARE ALL_SUCCESS_3 INT DEFAULT 0;

    DECLARE cur_PROC_SC_PACKAGING_LIST_INV_STOCK
        CURSOR FOR
        SELECT
            BOX_SERIAL,F_BOX_NO
            FROM SC_SHIPMENT_BOX
            WHERE F_SHIPMENT_NO=SHIPMENT_NO;


        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 0;

            /*DELETING EXISTING VALUE*/

            IF IS_UPDATE = 1 THEN
              SELECT PK_NO INTO package_pk_no FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO LIMIT 1;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO R VALUES(int_row_count);
              IF int_row_count > 0 THEN
                DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO ;
              END IF;

              SELECT PK_NO INTO package_pk_no FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO LIMIT 1;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO R VALUES(int_row_count);
              IF int_row_count > 0 THEN
                DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO ;
              END IF;
            END IF;
        /*DELETING EXISTING VALUE End*/


/* DELETE FROM R; */
INSERT INTO R VALUES('Start Procedre');
INSERT INTO R VALUES(concat('SHIPMENT_NO ', SHIPMENT_NO));
            SELECT COUNT(F_SHIPMENT_NO) INTO int_is_duplicate_shipment FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
            SELECT COUNT(F_BOX_NO) INTO int_box_row_count FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO = SHIPMENT_NO;
INSERT INTO R VALUES(concat('Duplicate package Flag ', int_is_duplicate_shipment));

        IF int_is_duplicate_shipment = 0 THEN

            SELECT CODE INTO shipment_name FROM SC_SHIPMENT WHERE PK_NO = SHIPMENT_NO;

INSERT INTO R VALUES(concat('SHIPMENT_NAME ', shipment_name));

                SET int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 1;

                OPEN cur_PROC_SC_PACKAGING_LIST_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into R values (concat('Found row before Loop ', int_row_count));


                    IF int_row_count  != 0 THEN

                    get_PROC_SC_PACKAGING_LIST_INV_STOCK:LOOP
                        FETCH NEXT FROM  cur_PROC_SC_PACKAGING_LIST_INV_STOCK INTO box_serial_no,box_no;

                        SELECT IFNULL(WIDTH_CM,46),IFNULL(LENGTH_CM,46),IFNULL(HEIGHT_CM,78),IFNULL(WEIGHT_KG,30) INTO int_width,int_length,int_height,int_weight FROM SC_BOX WHERE PK_NO = box_no;
INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_PACKAGING_LIST_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_PACKAGING_LIST_INV_STOCK;
                            END IF;


INSERT INTO R VALUES(concat('Box Serial ', box_serial_no) );
INSERT INTO R VALUES(concat('Box No ', box_no) );
                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));




            /*-------------------------BLOCK 3 BEGINS ------------------------------*/
            Block3: BEGIN
                    DECLARE int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_PRC_STOCK_IN_INV_STOCK
                    CURSOR FOR
                    SELECT p.VENDOR_NAME,p.INVOICE_DATE,p.INVOICE_NO,INV_STOCK.F_PRC_STOCK_IN_NO AS prc_no,
                    (SELECT COUNT(*)FROM  INV_STOCK where F_BOX_NO = box_no and F_PRC_STOCK_IN_NO = prc_no) AS PRODUCT_COUNT
                    FROM PRC_STOCK_IN AS p
                    JOIN INV_STOCK ON p.PK_NO=INV_STOCK.F_PRC_STOCK_IN_NO
                    WHERE INV_STOCK.F_BOX_NO=box_no
                    group by F_PRC_STOCK_IN_NO;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK = 0;

                    OPEN cur_PROC_PRC_STOCK_IN_INV_STOCK;
                        SELECT FOUND_ROWS() into int_row_count_cursor3 ;
                        insert into R values (concat('Found row3 before Loop ', int_row_count_cursor3));
                            IF int_row_count_cursor3 != 0 THEN

                                get_PROC_PRC_STOCK_IN_INV_STOCK:LOOP
                                    FETCH NEXT FROM  cur_PROC_PRC_STOCK_IN_INV_STOCK INTO vendor_name,invoice_date,invoice_no,int_prc_no,int_product_count_invoice;

                                INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK));

                                            IF int_HAS_cur_PRC_STOCK_INING_LIST_INV_STOCK = 0 THEN

                                                    LEAVE get_PROC_PRC_STOCK_IN_INV_STOCK;
                                            END IF;


                                INSERT INTO R VALUES(concat('product count ', int_product_count_invoice) );
                                        SET ALL_SUCCESS_3 = ALL_SUCCESS_3 + 1;

                                        insert into R values (concat('ALL SUCCESS_2 VAL ', ALL_SUCCESS_3));

                                        SELECT concat(vendor_name,' ',invoice_date,' ',invoice_no,'(',int_product_count_invoice,')') INTO var_invoice_details_part;

                                        insert into R values (concat('var_invoice_details_part ', var_invoice_details_part));
                                        insert into R values (concat('var_invoice_details b_IF ', var_invoice_details));
                                        IF var_invoice_details = '0' THEN
                                           SET var_invoice_details = var_invoice_details_part;
                                           SET invoice_pk_no = int_prc_no;
                                           insert into R values (concat('var_invoice_details is 0 ', var_invoice_details));

                                        ELSE

                                           SELECT concat(var_invoice_details,', ',var_invoice_details_part) INTO var_invoice_details;
                                           SELECT concat(invoice_pk_no,', ',int_prc_no) INTO invoice_pk_no;
                                           insert into R values (concat('var_invoice_details_part ', var_invoice_details_part));
                                           insert into R values (concat('var_invoice_details ', var_invoice_details));
                                        END IF;



                                END LOOP get_PROC_PRC_STOCK_IN_INV_STOCK;

                            END IF;


                    CLOSE cur_PROC_PRC_STOCK_IN_INV_STOCK;

                    insert into R values (concat('OUT_STATUS_3 VAL ', ALL_SUCCESS_3));
                    insert into R values (concat('Row count 3 VAL ', int_row_count_cursor3));
                    IF ALL_SUCCESS_3 = int_row_count_cursor3 THEN
                        SET OUT_STATUS_3 = 'success';
                        INSERT INTO SC_PACKAGING_LIST( F_SHIPMENT_NO, SHIPMENT_NAME, BOX_SERIAL_NO, F_BOX_NO, WIDTH_CM, LENGTH_CM, HEIGHT_CM, WEIGHT_KG,INVOICE_DETAILS,INVOICE_NO) VALUES ( SHIPMENT_NO, shipment_name, box_serial_no, box_no, int_width, int_length, int_height, int_weight,var_invoice_details,invoice_pk_no );
                        SET var_invoice_details = '0';
                        SET invoice_pk_no = '0';
                    ELSE
                        SET OUT_STATUS_3 = 'failed';
                        SET ALL_SUCCESS = 99;
                        DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                        DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;

                    END IF;
                    SET ALL_SUCCESS_3 = 0;

            END Block3;

            /*-------------------------BLOCK 3 ENDS ------------------------------*/



            /*-------------------------BLOCK 2 BEGINS ------------------------------*/
            Block2: BEGIN
                    DECLARE int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK INT DEFAULT 1;

                    DECLARE cur_PROC_SC_PACKING_LIST_INV_STOCK
                    CURSOR FOR
                    SELECT
                        F_PRD_VARIANT_NO,HS_CODE,SKUID,IG_CODE,SUB_CATEGORY_NAME,INVOICE_NAME,SUM(PRODUCT_PURCHASE_PRICE_GBP) AS int_count_price,COUNT(PK_NO) AS int_product_count
                        FROM INV_STOCK
                        WHERE F_BOX_NO=box_no
                        GROUP BY SKUID;


                    DECLARE CONTINUE HANDLER
                        FOR NOT FOUND SET int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK = 0;

                    OPEN cur_PROC_SC_PACKING_LIST_INV_STOCK;
                        SELECT FOUND_ROWS() into int_row_count_cursor2 ;
                        insert into R values (concat('Found row2 before Loop ', int_row_count_cursor2));
                            IF int_row_count_cursor2  != 0 THEN

                                get_PROC_SC_PACKING_LIST_INV_STOCK:LOOP
                                    FETCH NEXT FROM  cur_PROC_SC_PACKING_LIST_INV_STOCK INTO variant_no,var_hs_code,sku_id,var_ig_code,sub_cat_name,var_invoice_name,int_count_price,int_product_count;

                                INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK));

                                            IF int_HAS_cur_PROC_SC_PACKING_LIST_INV_STOCK = 0 THEN

                                                    LEAVE get_PROC_SC_PACKING_LIST_INV_STOCK;
                                            END IF;


                                INSERT INTO R VALUES(concat('Price ', int_count_price) );
                                INSERT INTO R VALUES(concat('Product Count ', int_product_count) );
                                        SET ALL_SUCCESS_2 = ALL_SUCCESS_2 + 1;

                                        SET unit_price = int_count_price/int_product_count;

                                        insert into R values (concat('ALL SUCCESS_2 VAL ', ALL_SUCCESS_2));

                                        INSERT INTO SC_PACKING_LIST( F_SHIPMENT_NO, SHIPMENT_NAME, BOX_SERIAL_NO, F_BOX_NO, PRD_VARINAT_NO, HS_CODE, SKU_ID, IG_CODE, SUBCATEGORY_NAME, PRC_INV_NAME, QTY, UNIT_PRICE, TOTAL_PRICE) VALUES ( SHIPMENT_NO, shipment_name, box_serial_no, box_no, variant_no, var_hs_code, sku_id, var_ig_code, sub_cat_name, var_invoice_name, int_product_count, unit_price, int_count_price );


                                END LOOP get_PROC_SC_PACKING_LIST_INV_STOCK;

                            END IF;


                    CLOSE cur_PROC_SC_PACKING_LIST_INV_STOCK;

                    insert into R values (concat('OUT_STATUS_2 VAL ', ALL_SUCCESS_2));
                    insert into R values (concat('Row count 2 VAL ', int_row_count_cursor2));
                    IF ALL_SUCCESS_2 = int_row_count_cursor2 THEN
                        SET OUT_STATUS_2 = 'success';
                    ELSE
                        SET OUT_STATUS_2 = 'failed';
                        SET ALL_SUCCESS = 99;
                        DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                        DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;

                    END IF;
                    SET ALL_SUCCESS_2 = 0;

            END Block2;

                    END LOOP get_PROC_SC_PACKAGING_LIST_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_PACKAGING_LIST_INV_STOCK;

                  IF ALL_SUCCESS = int_box_row_count AND OUT_STATUS_2 = 'success' AND OUT_STATUS_3 = 'success' THEN
                     SET OUT_STATUS = 'success';
                   ELSE
                     SET OUT_STATUS = 'failed';
                     DELETE FROM SC_PACKAGING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                     DELETE FROM SC_PACKING_LIST WHERE F_SHIPMENT_NO = SHIPMENT_NO;
                   END IF;


        ELSE
           SET OUT_STATUS = 'duplicate-shipment';

        END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SLS_BOOKING` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SLS_BOOKING` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SLS_BOOKING`(IN_BOOKING_PK_NO INTEGER, IN_INV_BOOKING_ARRAY VARCHAR(1024), IN_ROW_COUNT INTEGER, IN_COL_PARAMETERS INTEGER, IN_COLUMN_SEPARATOR VARCHAR(1), IN_ROW_SEPARATOR VARCHAR(1), IN_BOOKING_TYPE VARCHAR(20), OUT OUT_STATUS VARCHAR(20))
    NO SQL
BEGIN
               /*101103111102,1,1,0,0;101103111102,1,1,0,0;
               1=>skuid,
               2=>house,
               3=>value,
               4=>ship type,
               5=>box type,
               6=>customer preferred,
               7=>price type
               8=>customer address type
               9=>Shipment No
               */

        DECLARE int_HAS_cur_PROC_SLS_BOOKING INT DEFAULT 1;
        DECLARE xPK_NO INT;
        DECLARE var_arrary_param1 VARCHAR(100);
        DECLARE var_arrary_param2 INT;
        DECLARE var_arrary_param3 INT;
        DECLARE var_arrary_param4 VARCHAR(100);
        DECLARE var_arrary_param5 VARCHAR(100);
        DECLARE var_arrary_param6 VARCHAR(100);
        DECLARE var_arrary_param7 VARCHAR(100);
        DECLARE var_arrary_param8 INT;
        DECLARE var_arrary_param9 INT;
        DECLARE is_freight INT DEFAULT 0;
        DECLARE var_arrary_row VARCHAR(200);
        DECLARE var_arrary_row_part VARCHAR(200);
        DECLARE is_regular INT;
        DECLARE int_row_count INT;
        DECLARE i,j INT;
        DECLARE ALL_SUCCESS INT DEFAULT 0;
        DECLARE VAR_SLS_BOOKING_DETAILS_TABLE VARCHAR(50);

        DECLARE cur_PROC_SLS_BOOKING
            CURSOR FOR
                SELECT
                    PK_NO
                    FROM INV_STOCK
                    WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
                    AND (BOOKING_STATUS IS NULL OR BOOKING_STATUS = 0 OR BOOKING_STATUS = 90 AND PRODUCT_STATUS != 420)
                    AND SKUID=var_arrary_param1
                    AND
                    CASE
                        WHEN var_arrary_param2 = 1 THEN (
                        CASE
                             WHEN var_arrary_param4 = '0' THEN SHIPMENT_TYPE IS NULL
                                  ELSE SHIPMENT_TYPE = var_arrary_param4
                             END
                             AND
                        CASE
                             WHEN var_arrary_param5 = '0' THEN BOX_TYPE IS NULL
                                  ELSE BOX_TYPE = var_arrary_param5
                             END
                             AND
                        CASE
                             WHEN var_arrary_param9 = '0' THEN F_SHIPPMENT_NO IS NULL
                                  ELSE F_SHIPPMENT_NO = var_arrary_param9
                             END
                    )
                    ELSE PK_NO > 1
                    END
                    LIMIT var_arrary_param3 FOR UPDATE;


                    DECLARE CONTINUE HANDLER
                    FOR NOT FOUND SET int_HAS_cur_PROC_SLS_BOOKING = 0;

DELETE FROM R;
INSERT INTO R VALUES('Line 49');
INSERT INTO R VALUES(IN_ROW_COUNT);
                    SET i=1;
INSERT INTO R VALUES(i);

                WHILE i <= IN_ROW_COUNT DO

                    SELECT SUBSTRING_INDEX(IN_INV_BOOKING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;
INSERT INTO R VALUES (IN_INV_BOOKING_ARRAY);
INSERT INTO R VALUES (var_arrary_row);

                    SET var_arrary_row_part =  var_arrary_row;
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param1)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param1) );

INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param2)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param2) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param3;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param3)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param3) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param4;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param4)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param4) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param5;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param5)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param5) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param6;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param6)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param6) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param7;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param7)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param7) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SELECT SUBSTRING_INDEX(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param8;
                    SET var_arrary_row_part=SUBSTRING(var_arrary_row_part , LENGTH(var_arrary_param8)+2 , LENGTH(var_arrary_row_part) - LENGTH(var_arrary_param8) );
INSERT INTO R VALUES (var_arrary_row_part);

                    SET var_arrary_param9 = var_arrary_row_part;

INSERT INTO R VALUES('Line 73.');

                    SET IN_INV_BOOKING_ARRAY = SUBSTRING(IN_INV_BOOKING_ARRAY , LENGTH(var_arrary_row)+2 , LENGTH(IN_INV_BOOKING_ARRAY) - LENGTH(var_arrary_row) );
INSERT INTO R VALUES(CONCAT('IN_INV_BOOKING_ARRAY ', IN_INV_BOOKING_ARRAY));
INSERT INTO R VALUES(CONCAT('loop i val ', i));
                    SET int_HAS_cur_PROC_SLS_BOOKING = 1;

                OPEN cur_PROC_SLS_BOOKING;
                    SELECT FOUND_ROWS() INTO int_row_count ;

INSERT INTO R VALUES ('Line 75');
INSERT INTO R VALUES (CONCAT('Found row ', int_row_count));
INSERT INTO R VALUES (var_arrary_row);
INSERT INTO R VALUES (var_arrary_param1);
INSERT INTO R VALUES (var_arrary_param2);
INSERT INTO R VALUES (var_arrary_param3);
INSERT INTO R VALUES (var_arrary_param4);
INSERT INTO R VALUES (var_arrary_param5);
INSERT INTO R VALUES (var_arrary_param6);
INSERT INTO R VALUES (var_arrary_param9);

                    IF int_row_count  != 0 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    INSERT INTO R VALUES (CONCAT('ALL SUCCESS VAL ', ALL_SUCCESS));
                    /*SET j = 0;

INSERT INTO R VALUES(concat('init j val ', j));*/

                    get_PROC_SLS_BOOKING: LOOP
                        FETCH NEXT FROM  cur_PROC_SLS_BOOKING INTO xPK_NO;
                        IF int_HAS_cur_PROC_SLS_BOOKING = 0 THEN
                                LEAVE get_PROC_SLS_BOOKING;
                        END IF;

INSERT INTO R VALUES('line 89');
INSERT INTO R VALUES(CONCAT('xPK_NO val ', xPK_NO) );
INSERT INTO R VALUES(CONCAT('j<var_arrary_param3 ', var_arrary_param3) );
/*INSERT INTO R VALUES(concat('loop j val ', j));*/
                    /*    IF var_arrary_param7 = 'regular' THEN
                           SET is_regular = 1;
                        ELSE
                           SET is_regular = 0;
                        END IF;
                        */
                    IF IN_BOOKING_TYPE != 'temp' THEN

                        IF var_arrary_param5 = '0' THEN
                           UPDATE INV_STOCK
                            SET F_BOOKING_NO = IN_BOOKING_PK_NO,
                            CUSTOMER_PREFFERED_SHIPPING_METHOD = var_arrary_param6,
                            FINAL_PREFFERED_SHIPPING_METHOD = var_arrary_param6,
                            BOOKING_STATUS = 10
                            WHERE PK_NO =  xPK_NO;
                        ELSE
                           UPDATE INV_STOCK
                            SET F_BOOKING_NO = IN_BOOKING_PK_NO,
                            BOOKING_STATUS = 10
                            WHERE PK_NO =  xPK_NO;
                        END IF;

                    END IF;

                        INSERT INTO R VALUES(CONCAT('var_arrary_param4 val ', var_arrary_param4) );
                        INSERT INTO R VALUES(CONCAT('var_arrary_param5 val ', var_arrary_param5) );
                        INSERT INTO R VALUES(CONCAT('var_arrary_param6 val ', var_arrary_param6) );
                        IF var_arrary_param4 = '0' AND var_arrary_param5 = '0' AND var_arrary_param2 = 1 THEN
                           IF var_arrary_param6 = 'AIR' THEN
                              SET is_freight = 1;
                           END IF;

                           IF var_arrary_param6 = 'SEA' THEN
                              SET is_freight = 2;
                           END IF;

                        ELSE
                           SET is_freight = 0;
                        END IF;
                        INSERT INTO R VALUES(CONCAT('is_freight val ', is_freight) );
                        IF IN_BOOKING_TYPE = 'temp' THEN

                            INSERT INTO SLS_BOOKING_DETAILS_TEMP(
                                F_BOOKING_NO
                                ,F_INV_STOCK_NO
                                ,F_DELIVERY_ADDRESS
                                ,CURRENT_F_DELIVERY_ADDRESS
                                ,IS_FREIGHT
                                ,CURRENT_IS_FREIGHT
                                ,IS_REGULAR
                                ,CURRENT_IS_REGULAR
                                ,ARRIVAL_NOTIFICATION_FLAG
                                ,SS_CREATED_ON
                                ) VALUES (
                                IN_BOOKING_PK_NO
                                ,xPK_NO
                                ,var_arrary_param8
                                ,var_arrary_param8
                                ,is_freight
                                ,is_freight
                                ,var_arrary_param7
                                ,var_arrary_param7
                                ,var_arrary_param2
                                ,NOW()
                                );

                        ELSE
                             INSERT INTO SLS_BOOKING_DETAILS(
                                F_BOOKING_NO
                                ,F_INV_STOCK_NO
                                ,F_DELIVERY_ADDRESS
                                ,CURRENT_F_DELIVERY_ADDRESS
                                ,IS_FREIGHT
                                ,CURRENT_IS_FREIGHT
                                ,IS_REGULAR
                                ,CURRENT_IS_REGULAR
                                ,ARRIVAL_NOTIFICATION_FLAG
                                ,SS_CREATED_ON
                                ) VALUES (
                                IN_BOOKING_PK_NO
                                ,xPK_NO
                                ,var_arrary_param8
                                ,var_arrary_param8
                                ,is_freight
                                ,is_freight
                                ,var_arrary_param7
                                ,var_arrary_param7
                                ,var_arrary_param2
                                ,NOW()
                                );

                        END IF;

                                                /*  SET j = j + 1;*/
                          SET is_freight = 0;

                    END LOOP get_PROC_SLS_BOOKING;

                    END IF;

                CLOSE cur_PROC_SLS_BOOKING;

                SET i = i + 1;

                END WHILE;

                IF ALL_SUCCESS = IN_ROW_COUNT THEN
                    SET OUT_STATUS = 'success';
                ELSE
                    SET OUT_STATUS = 'failed';
                    /*UPDATE INV_STOCK
                        SET BOOKING_STATUS = NULL,
                            F_BOOKING_NO = NULL
                        WHERE F_BOOKING_NO = IN_BOOKING_PK_NO ;

                    DELETE FROM SLS_BOOKING_DETAILS WHERE F_BOOKING_NO = IN_BOOKING_PK_NO;  */

                END IF;
INSERT INTO R VALUES('122');

INSERT INTO R VALUES(CONCAT('End of Procedure with status ', OUT_STATUS));




END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SLS_CHECK_OFFER` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SLS_CHECK_OFFER` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SLS_CHECK_OFFER`(IN_BOOKING_PK_NO Integer)
    NO SQL
BLOCKPARENT: BEGIN

        DECLARE xF_BOOKING_NO       INT;
        DECLARE xF_BUNDLE_NO        INT DEFAULT 0;
        DECLARE xF_LIST_NO          INT DEFAULT 0;
        DECLARE xF_LIST_CHILD_NO    INT DEFAULT 0;
        DECLARE xIS_A_LIST          INT DEFAULT 0;
        DECLARE xF_PRD_VARIANT_NO   INT;
        DECLARE xREGULAR_PRICE      FLOAT(0);
        DECLARE xINSTALLMENT_PRICE  FLOAT(0);
        DECLARE xF_INV_STOCK_NO     INT;
        DECLARE var_IS_A_LIST       INT(1);
        DECLARE xINT_HAS_IN_LIST_A  INT DEFAULT 0;
        DECLARE xINT_HAS_IN_LIST_B  INT DEFAULT 0;
        DECLARE xLIST_NO            INT DEFAULT NULL;
        DECLARE xLIST_DTL_NO        INT DEFAULT NULL;
        DECLARE xLIST               VARCHAR(40) DEFAULT NULL;

        DECLARE vSLS_CHECK_OFFER_NO INT;
        DECLARE vF_BUNDLE_NO INT;
        DECLARE vF_BOOKING_NO INT;
        DECLARE vF_LIST_NO INT;
        DECLARE vF_LIST_CHILD_NO INT;
        DECLARE vIS_A_LIST INT;
        DECLARE vF_VARIANT_NO INT;
        DECLARE vREGULAR_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_PRICE FLOAT(0);
        DECLARE vF_INV_STOCK_NO INT;
        DECLARE vLIST_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vREGULAR_BUNDLE_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_BUNDLE_PRICE FLOAT(0);
        DECLARE vIS_PROCESSED INT;
        DECLARE vSLS_BUNDLE_NO INT;
        DECLARE vCODE VARCHAR(40) DEFAULT NULL;
        DECLARE vCOUPON_CODE VARCHAR(40) DEFAULT NULL;
        DECLARE vBUNDLE_NAME VARCHAR(200) DEFAULT NULL;
        DECLARE vBUNDLE_NAME_PUBLIC VARCHAR(200) DEFAULT NULL;
        DECLARE vVALIDITY_FROM DATE DEFAULT NULL;
        DECLARE vVALIDITY_TO DATE DEFAULT NULL;
        DECLARE vF_A_LIST_NO INT;
        DECLARE vF_B_LIST_NO INT;
        DECLARE vF_BUNDLE_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vP_AMOUNT FLOAT(0);
        DECLARE vP2_AMOUNT FLOAT(0);
        DECLARE vX1_QTY INT;
        DECLARE vX2_QTY INT;
        DECLARE vZA1 INT;
        DECLARE vZA2 INT;
        DECLARE vZA3 INT;
        DECLARE vR_AMOUNT FLOAT(0);
        DECLARE vR2_AMOUNT FLOAT(0);
        DECLARE vY1_QTY INT;
        DECLARE vY2_QTY INT;
        DECLARE vZB1 INT;
        DECLARE vZB2 INT;
        DECLARE vZB3 INT;
        DECLARE cvSLS_CHECK_OFFER_NO INT;
        DECLARE cvF_BUNDLE_NO INT;
        DECLARE cvF_BOOKING_NO INT;



        DECLARE int_row_count INT;
        DECLARE int_row_count2 INT;
        DECLARE int_row_count3 INT;
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE COUNTER2 INT DEFAULT 1;
        DECLARE COUNTER3 INT DEFAULT 1;

Block1: BEGIN
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE INT_HAS_CUR_PROC_SLS_BOOKING INT DEFAULT 1;
        /*Data tranfered to SLS_CHECK_OFFER */

        DECLARE CUR_PROC_SLS_BOOKING
            CURSOR FOR
                SELECT
                    SLS_BOOKING_DETAILS.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_PRIMARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_PRIMARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'A' AS LIST

                FROM
                    SLS_BOOKING_DETAILS
                    ,INV_STOCK
                    ,SLS_BUNDLE_PRIMARY_SET_DTL
                    ,SLS_BUNDLE_PRIMARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                    AND SLS_BUNDLE_PRIMARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                    AND SLS_BUNDLE_PRIMARY_SET.PK_NO = SLS_BUNDLE_PRIMARY_SET_DTL.F_SLS_BUNDLE_PRIMARY_SET_NO
                    AND SLS_BUNDLE.F_A_LIST_NO = SLS_BUNDLE_PRIMARY_SET.PK_NO
                    AND CURDATE() between SLS_BUNDLE.VALIDITY_FROM and SLS_BUNDLE.VALIDITY_TO
                    AND SLS_BUNDLE.STATUS = 1
                UNION

                SELECT
                    SLS_BOOKING_DETAILS.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_SECONDARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_SECONDARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'B' AS LIST

                FROM
                    SLS_BOOKING_DETAILS
                    ,INV_STOCK
                    ,SLS_BUNDLE_SECONDARY_SET_DTL
                    ,SLS_BUNDLE_SECONDARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS.F_BOOKING_NO = IN_BOOKING_PK_NO
                AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS.F_INV_STOCK_NO
                AND SLS_BUNDLE_SECONDARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                AND SLS_BUNDLE_SECONDARY_SET.PK_NO = SLS_BUNDLE_SECONDARY_SET_DTL.F_SLS_BUNDLE_SECONDARY_SET_NO
                AND SLS_BUNDLE.F_B_LIST_NO = SLS_BUNDLE_SECONDARY_SET.PK_NO
                AND CURDATE() between SLS_BUNDLE.VALIDITY_FROM and SLS_BUNDLE.VALIDITY_TO
                AND SLS_BUNDLE.STATUS = 1
                ;


        DECLARE CONTINUE HANDLER

            FOR NOT FOUND SET INT_HAS_CUR_PROC_SLS_BOOKING = 0;
DELETE FROM SLS_CHECK_OFFER WHERE F_BOOKING_NO = IN_BOOKING_PK_NO;
DELETE FROM S;
-- INSERT INTO S VALUES('Line 26');

            OPEN CUR_PROC_SLS_BOOKING;
                SELECT FOUND_ROWS() INTO int_row_count ;

-- INSERT INTO S values ('Line 32');
-- INSERT INTO S values (concat('Found row ', int_row_count));

                IF int_row_count > 0 THEN

                    GET_PROC_SLS_BOOKING: LOOP
                        FETCH NEXT
                        FROM  CUR_PROC_SLS_BOOKING
                            INTO
                            xF_BOOKING_NO
                            ,xF_INV_STOCK_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_PRD_VARIANT_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xF_BUNDLE_NO
                            ,xLIST
                            ;

                            IF INT_HAS_CUR_PROC_SLS_BOOKING = 0 THEN
                            LEAVE GET_PROC_SLS_BOOKING;
                            END IF;

-- INSERT INTO S VALUES('line 48');


                            INSERT INTO SLS_CHECK_OFFER(
                            F_BOOKING_NO
                            ,F_BUNDLE_NO
                            ,F_LIST_NO
                            ,F_LIST_CHILD_NO
                            ,LIST_TYPE
                            ,F_VARIANT_NO
                            ,REGULAR_PRICE
                            ,INSTALLMENT_PRICE
                            ,F_INV_STOCK_NO
                            )
                            VALUES (
                            xF_BOOKING_NO
                            ,xF_BUNDLE_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xLIST
                            ,xF_PRD_VARIANT_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_INV_STOCK_NO
                            );



                    END LOOP GET_PROC_SLS_BOOKING;

                END IF;

            CLOSE CUR_PROC_SLS_BOOKING;

END Block1;

Block2: BEGIN
            DECLARE COUNTER2 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT INT DEFAULT 1;

            /* OFFER RESULT  */
            DECLARE CUR_SLS_CHECK_OFFER_RESULT
                CURSOR FOR
                SELECT
                    SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                    ,SLS_CHECK_OFFER.F_BUNDLE_NO
                    ,SLS_CHECK_OFFER.F_BOOKING_NO
                    ,SLS_CHECK_OFFER.F_LIST_NO
                    ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                    ,SLS_CHECK_OFFER.IS_A_LIST
                    ,SLS_CHECK_OFFER.F_VARIANT_NO
                    ,SLS_CHECK_OFFER.REGULAR_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                    ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                    ,SLS_CHECK_OFFER.LIST_TYPE
                    ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.IS_PROCESSED
                    ,SLS_BUNDLE.CODE
                    ,SLS_BUNDLE.COUPON_CODE
                    ,SLS_BUNDLE.BUNDLE_NAME
                    ,SLS_BUNDLE.BUNDLE_NAME_PUBLIC
                    ,SLS_BUNDLE.VALIDITY_FROM
                    ,SLS_BUNDLE.VALIDITY_TO
                    ,SLS_BUNDLE.F_A_LIST_NO
                    ,SLS_BUNDLE.F_B_LIST_NO
                    ,SLS_BUNDLE.F_BUNDLE_TYPE
                    ,SLS_BUNDLE.P_AMOUNT
                    ,SLS_BUNDLE.P2_AMOUNT
                    ,SLS_BUNDLE.X1_QTY
                    ,SLS_BUNDLE.X2_QTY
                    ,SLS_BUNDLE.ZA1
                    ,SLS_BUNDLE.ZA2
                    ,SLS_BUNDLE.ZA3
                    ,SLS_BUNDLE.R_AMOUNT
                    ,SLS_BUNDLE.R2_AMOUNT
                    ,SLS_BUNDLE.Y1_QTY
                    ,SLS_BUNDLE.Y2_QTY
                    ,SLS_BUNDLE.ZB1
                    ,SLS_BUNDLE.ZB2
                    ,SLS_BUNDLE.ZB3
                FROM SLS_CHECK_OFFER
                    ,SLS_BUNDLE
                WHERE SLS_CHECK_OFFER.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND SLS_CHECK_OFFER.F_BUNDLE_NO = SLS_BUNDLE.PK_NO
                GROUP BY SLS_CHECK_OFFER.F_BUNDLE_NO
                 ;


                DECLARE CONTINUE HANDLER

                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0;

DELETE FROM S;
-- INSERT INTO S VALUES('Line 125');

                OPEN CUR_SLS_CHECK_OFFER_RESULT;
                    select FOUND_ROWS() into int_row_count2 ;

-- INSERT INTO S values ('Line 130');
-- INSERT INTO S values (concat('Found row parent ', int_row_count2));

                    IF int_row_count2 > 0 THEN

                        GET_CUR_SLS_CHECK_OFFER_RESULT: LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT
                                    INTO
                                vSLS_CHECK_OFFER_NO
                                ,vF_BUNDLE_NO
                                ,vF_BOOKING_NO
                                ,vF_LIST_NO
                                ,vF_LIST_CHILD_NO
                                ,vIS_A_LIST
                                ,vF_VARIANT_NO
                                ,vREGULAR_PRICE
                                ,vINSTALLMENT_PRICE
                                ,vF_INV_STOCK_NO
                                ,vLIST_TYPE
                                ,vREGULAR_BUNDLE_PRICE
                                ,vINSTALLMENT_BUNDLE_PRICE
                                ,vIS_PROCESSED
                                ,vCODE
                                ,vCOUPON_CODE
                                ,vBUNDLE_NAME
                                ,vBUNDLE_NAME_PUBLIC
                                ,vVALIDITY_FROM
                                ,vVALIDITY_TO
                                ,vF_A_LIST_NO
                                ,vF_B_LIST_NO
                                ,vF_BUNDLE_TYPE
                                ,vP_AMOUNT
                                ,vP2_AMOUNT
                                ,vX1_QTY
                                ,vX2_QTY
                                ,vZA1
                                ,vZA2
                                ,vZA3
                                ,vR_AMOUNT
                                ,vR2_AMOUNT
                                ,vY1_QTY
                                ,vY2_QTY
                                ,vZB1
                                ,vZB2
                                ,vZB3
                                ;

                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT;
                                END IF;

        Block3: BEGIN
            DECLARE COUNTER3 INT DEFAULT 1;
            DECLARE COUNTER9 INT DEFAULT 1;
            DECLARE COUNTER10 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW INT DEFAULT 1;

            DECLARE CUR_SLS_CHECK_OFFER_RESULT_ROW
            CURSOR FOR
                SELECT
                SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                ,SLS_CHECK_OFFER.F_BUNDLE_NO
                ,SLS_CHECK_OFFER.F_BOOKING_NO
                --    ,SLS_CHECK_OFFER.F_LIST_NO
                --  ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                --  ,SLS_CHECK_OFFER.IS_A_LIST
                --  ,SLS_CHECK_OFFER.F_VARIANT_NO
                --  ,SLS_CHECK_OFFER.REGULAR_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                --  ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                --  ,SLS_CHECK_OFFER.LIST_TYPE
                -- ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                -- ,SLS_CHECK_OFFER.IS_PROCESSED

                FROM SLS_CHECK_OFFER
                WHERE SLS_CHECK_OFFER.F_BUNDLE_NO = vF_BUNDLE_NO
                AND SLS_CHECK_OFFER.F_BOOKING_NO = vF_BOOKING_NO;


                DECLARE CONTINUE HANDLER
                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0;


-- INSERT INTO S VALUES('Line 224');

                OPEN CUR_SLS_CHECK_OFFER_RESULT_ROW;

                    SELECT FOUND_ROWS() INTO int_row_count3 ;

-- INSERT INTO S values ('Line 229');
-- INSERT INTO S values (concat('Found row ', int_row_count3));

                    IF int_row_count3 > 0 THEN

-- INSERT INTO S values ('Line 2331');
-- INSERT INTO S values (INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW);

                        GET_CUR_SLS_CHECK_OFFER_RESULT_ROW: LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT_ROW
                                    INTO
                                    cvSLS_CHECK_OFFER_NO
                                    ,cvF_BUNDLE_NO
                                    ,cvF_BOOKING_NO

                                ;
-- INSERT INTO S values ('Line 251');
                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                                END IF;


-- INSERT INTO S values (concat('when_', vP_AMOUNT));
-- INSERT INTO S values (concat('when1_', vX1_QTY));
-- INSERT INTO S values (concat('when2_', vZA1));


                            IF vP_AMOUNT = 0 AND vX1_QTY = 0  AND vZA1 = 0 THEN
                            -- universal false
                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = vREGULAR_BUNDLE_PRICE
                                    ,INSTALLMENT_BUNDLE_PRICE = vINSTALLMENT_BUNDLE_PRICE
                                    ,IS_PROCESSED = 1
                                    ,CON = 1
                                WHERE PK_NO = cvSLS_CHECK_OFFER_NO AND IS_PROCESSED = 0 AND F_BOOKING_NO = IN_BOOKING_PK_NO ;
INSERT INTO S values (CONCAT('con 1_',cvSLS_CHECK_OFFER_NO));

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY = 0 AND vZA1 > 0 THEN
                             -- Buy any item at 20%;
INSERT INTO S values (CONCAT('con 2_',cvSLS_CHECK_OFFER_NO));
-- INSERT INTO S values (CONCAT('con IP',xREGULAR_PRICE));
-- INSERT INTO S values (CONCAT('con RP',xINSTALLMENT_PRICE));

                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZA1
                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZA1
                                    ,IS_PROCESSED = 1
                                    ,SEQUENC = COUNTER2
                                    ,CON = 2
                                WHERE SLS_CHECK_OFFER.PK_NO = cvSLS_CHECK_OFFER_NO
                                AND IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                SET COUNTER2 = COUNTER2+1;

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 = 0 THEN
                            -- buy 1 get 1, buy 2 get 1, buy 1 get 2, buy 1 get 1 half price from A list
INSERT INTO S values (CONCAT('con 3_',cvSLS_CHECK_OFFER_NO));
                                SELECT count(*) INTO @ALIST FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @ALIST >= vX1_QTY THEN
        --  INSERT INTO S values (CONCAT('LINE_',422));
        --  INSERT INTO S values (CONCAT('RR',@ALIST));
        --  INSERT INTO S values (CONCAT('SS',vX1_QTY));
                                        SELECT count(*) INTO @BLIST FROM SLS_CHECK_OFFER
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            IF @BLIST >= vY1_QTY THEN

                                                UPDATE SLS_CHECK_OFFER
                                                    SET
                                                    REGULAR_BUNDLE_PRICE = xREGULAR_PRICE
                                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 31
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'A'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vX1_QTY
                                                    ;

                                                UPDATE SLS_CHECK_OFFER
                                                    SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 32
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'B'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vY1_QTY ;



                                                 SET COUNTER1 = COUNTER1+1;

                                            END IF;


                                    END IF;


                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY = 0 AND vZA1 = 0 THEN
                            -- Buy min 500 amt from A list get 2 free from B list, buy min 500 amt get 1 half price;

INSERT INTO S values (CONCAT('con 4_',COUNTER1));

                                SELECT SUM(REGULAR_PRICE), SUM(INSTALLMENT_PRICE)
                                    INTO @TOTAL_P_AMOUNT, @TOTAL_P2_AMOUNT
                                    FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                IF @TOTAL_P_AMOUNT >= vP_AMOUNT THEN

                                    SELECT COUNT(*) INTO @TOTAL_FREE_QTY_FOR_vP_AMOUNT FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @TOTAL_FREE_QTY_FOR_vP_AMOUNT > 0  THEN
                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 41
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            UPDATE SLS_CHECK_OFFER
                                                SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 42
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            LIMIT vY1_QTY ;

                                    END IF;

                                    IF vZA1 > 0 THEN
                                        -- buy 500amt or above from A list and get 20% discount
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 43
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;

                                    END IF;


                                END IF;



                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 > 0 THEN

                            -- not possible
 INSERT INTO S values (CONCAT('con 5_',cvSLS_CHECK_OFFER_NO));

                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6 item from A list at 800 amt;
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;

                                IF vZA2 > 0 THEN
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;
INSERT INTO S values (CONCAT('con 6_A',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 61
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 62
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;




                                    END IF;

                                ELSE
                                -- buy any lowest priced 6 from A list item at 800 amt;

INSERT INTO S values (CONCAT('con 6_B',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE
                                        IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN
INSERT INTO S values (CONCAT('con 6_B',612));
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                                ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = COUNTER3
                                                ,CON = 63
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;



                                        SET COUNTER3 = COUNTER3+1;
                                    END IF;

                                END IF;






                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY > 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount ;
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount and more item at 20% discount;

INSERT INTO S values (CONCAT('con 7_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON7, @TOTAL_X1_QTY_CON7 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;

                                IF @TOTAL_X1_QTY_CON7 >= vX1_QTY THEN

                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 71
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;


                                    IF @TOTAL_X1_QTY_CON7 > vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 72
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                    END IF;

                                    SELECT  COUNT(*) AS TOTAL_QTY  INTO @TOTAL_X1_QTY_CON7C FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC ;

                                    IF @TOTAL_X1_QTY_CON7C > 0 AND vZA3 > 0 THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 73
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC ;

                                    END IF;



                                END IF;


                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vY1_QTY = 0 THEN
                                -- Buy lowest 6 item at 50% discount, next 2 at 30% (and remaining at 10 discount) if remaining qty and more item at 20% discount jodi thake;
    INSERT INTO S values (CONCAT('con 8_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8, @TOTAL_X1_QTY_CON8 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;
                                IF @TOTAL_X1_QTY_CON8 >= vX1_QTY THEN
                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 81
                                    WHERE IS_PROCESSED = 0 AND
                                    LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;

                                    IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2  THEN
                                        -- next 2 qty 30% discount

                                        SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8A, @TOTAL_X1_QTY_CON8A FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        ;

                                        IF @TOTAL_X1_QTY_CON8A > 0 THEN

                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 82
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                            IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2 AND vZA3 > 0 THEN
                                                -- next remaining qty qty 20% discount
                                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8B, @TOTAL_X1_QTY_CON8B FROM SLS_CHECK_OFFER
                                                WHERE IS_PROCESSED = 0
                                                AND LIST_TYPE = 'A'
                                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                ORDER BY REGULAR_PRICE ASC
                                                ;

                                                    IF @TOTAL_X1_QTY_CON8B > 0 THEN

                                                        UPDATE SLS_CHECK_OFFER
                                                            SET
                                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                                            ,IS_PROCESSED = 1
                                                            ,SEQUENC = 1
                                                            ,CON = 83
                                                        WHERE IS_PROCESSED = 0
                                                        AND LIST_TYPE = 'A'
                                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                        ORDER BY REGULAR_PRICE ASC ;

                                                    END IF;
                                                    -- end next remaining qty qty 20% discount
                                            END IF;


                                        END IF;

                                    END IF;
                                END IF;

                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT > 0 AND vY1_QTY > 0 THEN
                            -- buy 1 qty from A list at 100 taka get 1 qty from B list at 20 taka
INSERT INTO S values (CONCAT('con 9_', cvSLS_CHECK_OFFER_NO));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON9, @TOTAL_X1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON9, @TOTAL_Y1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON9 >= vX1_QTY AND @TOTAL_Y1_QTY_CON9 >= vY1_QTY THEN
INSERT INTO S values (CONCAT('con 9_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vR_AMOUNT/vY1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vR2_AMOUNT/vY1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;
                                SET COUNTER9 = COUNTER9+1;

                                END IF;


                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY > 0 and vZB1 > 0 THEN
                            -- get 1 qty from A list by 100 taka discount from B list
INSERT INTO S values (CONCAT('con 10_',cvSLS_CHECK_OFFER_NO));

                            SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON10, @TOTAL_X1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON10, @TOTAL_Y1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON10 >= vX1_QTY AND @TOTAL_Y1_QTY_CON10 >= vY1_QTY THEN
INSERT INTO S values (CONCAT('con 10_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 101
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE - (REGULAR_BUNDLE_PRICE/100)*vZB1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE - (INSTALLMENT_BUNDLE_PRICE/100)*vZB1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;

                                SET COUNTER10 = COUNTER10+1;

                                END IF;




                            END IF; -- last if
                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                    END IF;



        CLOSE CUR_SLS_CHECK_OFFER_RESULT_ROW;

        END Block3;






                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT;

                    END IF;

                CLOSE CUR_SLS_CHECK_OFFER_RESULT;






END Block2;

END BLOCKPARENT */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_BOX_INV_STOCK_ITEM_REMOVE`(IN_BOX_LABEL VarChar(20), IN_INV_BOXING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, IN_WIDTH Integer, IN_LENGTH Integer, IN_HEIGHT Integer, IN_WEIGHT Float, OUT OUT_STATUS VarChar(20))
    NO SQL
Block1: BEGIN


/*CALL PROC_SC_BOX_INV_STOCK_ITEM_ADD(20100251,'101103111102~1~9|',1,3,'~','|',1,0,@OUT_STATUS);*/

    DECLARE int_HAS_cur_PROC_SC_BOX_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 INT DEFAULT 0;
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE var_inv_stored_pk VARCHAR(20000) DEFAULT 0;
    DECLARE int_row_count INT;
    DECLARE int_box_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE int_count_updated_row INT DEFAULT 0;
    DECLARE i,j INT;
    DECLARE ALL_SUCCESS INT DEFAULT 0;
    DECLARE ALL_SUCCESS_PART INT DEFAULT 1;

    DECLARE cur_PROC_SC_BOX_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND SKUID=var_arrary_param1
            AND F_BOX_NO=int_box_pk
            ORDER BY F_ORDER_NO ASC LIMIT var_arrary_param3;

        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0;

DELETE FROM S;
INSERT INTO S VALUES('Start Procedre Item Remove');
            SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;

            INSERT INTO S VALUES(concat('IN_BOX_LABEL ' , IN_BOX_LABEL));
            INSERT INTO S VALUES(concat('int_box_pk ' , int_box_pk));

insert into S values (concat('Parameter Array ',IN_INV_BOXING_ARRAY));

            IF int_box_pk IS NOT NULL OR int_box_pk > 0 THEN

               create temporary table temp_inv_pk_no
               ( inv_pk_no int );

            UPDATE SC_BOX SET WIDTH_CM = IN_WIDTH, LENGTH_CM = IN_LENGTH, HEIGHT_CM = IN_HEIGHT, WEIGHT_KG = IN_WEIGHT WHERE BOX_NO = IN_BOX_LABEL;

            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO S VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_BOXING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into S values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );

                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );

                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_BOXING_ARRAY = substring(IN_INV_BOXING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_BOXING_ARRAY) - length(var_arrary_row) );

insert into S values (concat('Param 1   ', var_arrary_param1));
insert into S values (concat('Param 2   ', var_arrary_param2));
insert into S values (concat('Param 3   ', var_arrary_param3));

                SET int_HAS_cur_PROC_SC_BOX_INV_STOCK = 1;
                SET int_count_updated_row = 0;
                insert into S values (concat('Updated Row Count ', int_count_updated_row));
                OPEN cur_PROC_SC_BOX_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into S values (concat('Found row before Loop ', int_row_count));

                    IF int_row_count != 0 && int_row_count = var_arrary_param3 THEN

                        SET ALL_SUCCESS = ALL_SUCCESS + 1;

                        insert into S values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));

                    get_PROC_SC_BOX_INV_STOCK: LOOP
                        FETCH NEXT FROM  cur_PROC_SC_BOX_INV_STOCK INTO xPK_NO;

INSERT INTO S VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SC_BOX_INV_STOCK));

                        IF int_HAS_cur_PROC_SC_BOX_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SC_BOX_INV_STOCK;
                        END IF;


INSERT INTO S VALUES(concat('INV Stock PK_NO ', xPK_NO) );

                        SET int_count_updated_row = int_count_updated_row + 1;

                        insert into temp_inv_pk_no(inv_pk_no) values (xPK_NO);
                        /*if var_inv_stored_pk = 0 THEN
                            SET var_inv_stored_pk = xPK_NO;
                        ELSE
                            SET var_inv_stored_pk = CONCAT(var_inv_stored_pk,',',xPK_NO);
                        END IF;
                        */
                    INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );

                    END LOOP get_PROC_SC_BOX_INV_STOCK;

                    END IF;

                CLOSE cur_PROC_SC_BOX_INV_STOCK;
                INSERT INTO S VALUES(concat('Updated Rows ', int_count_updated_row) );
                INSERT INTO S VALUES(concat('var_arrary_param3 ', var_arrary_param3) );

                    IF int_count_updated_row != var_arrary_param3 THEN
                        SET ALL_SUCCESS_PART = 0;
                    END IF;

                set i = i + 1;

            END WHILE;

                  /* IF ALL_SUCCESS_PART = 0 THEN
                    SET OUT_STATUS = 'failed-partial';
                  ELSE */
                  INSERT INTO S VALUES(concat('ALL_SUCCESS_PART ', ALL_SUCCESS_PART) );
                  INSERT INTO S VALUES(concat('ALL_SUCCESS ', ALL_SUCCESS) );
                  INSERT INTO S VALUES(concat('IN_ROW_COUNT ', IN_ROW_COUNT) );
                  INSERT INTO S VALUES(concat('var_inv_stored_pk ', var_inv_stored_pk) );
                  IF ALL_SUCCESS = IN_ROW_COUNT AND ALL_SUCCESS_PART = 1 THEN
                        SET OUT_STATUS = 'success';
                        UPDATE INV_STOCK
                            SET F_BOX_NO = NULL,
                                PRODUCT_STATUS = NULL,
                                BOX_BARCODE = NULL,
                                BOX_TYPE = NULL
                            WHERE PK_NO IN (select inv_pk_no from temp_inv_pk_no);

                        DELETE FROM SC_BOX_INV_STOCK
                        WHERE F_INV_STOCK_NO IN (select inv_pk_no from temp_inv_pk_no);

                  drop temporary table if exists temp_inv_pk_no;

                  ELSE
                    SET OUT_STATUS = 'failed';

                   END IF;


        ELSE
           SET OUT_STATUS = 'box-not-found';

        END IF;

INSERT INTO S VALUES(concat('End of Procedure with status ', OUT_STATUS));

END Block1 */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SLS_CHECK_OFFER_TEMP` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SLS_CHECK_OFFER_TEMP` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SLS_CHECK_OFFER_TEMP`(IN_BOOKING_PK_NO INTEGER)
    NO SQL
BLOCKPARENT: BEGIN

        DECLARE xF_BOOKING_NO       INT;
        DECLARE xF_BUNDLE_NO        INT DEFAULT 0;
        DECLARE xF_LIST_NO          INT DEFAULT 0;
        DECLARE xF_LIST_CHILD_NO    INT DEFAULT 0;
        DECLARE xIS_A_LIST          INT DEFAULT 0;
        DECLARE xF_PRD_VARIANT_NO   INT;
        DECLARE xREGULAR_PRICE      FLOAT(0);
        DECLARE xINSTALLMENT_PRICE  FLOAT(0);
        DECLARE xF_INV_STOCK_NO     INT;
        DECLARE var_IS_A_LIST       INT(1);
        DECLARE xINT_HAS_IN_LIST_A  INT DEFAULT 0;
        DECLARE xINT_HAS_IN_LIST_B  INT DEFAULT 0;
        DECLARE xLIST_NO            INT DEFAULT NULL;
        DECLARE xLIST_DTL_NO        INT DEFAULT NULL;
        DECLARE xLIST               VARCHAR(40) DEFAULT NULL;

        DECLARE vSLS_CHECK_OFFER_NO INT;
        DECLARE vF_BUNDLE_NO INT;
        DECLARE vF_BOOKING_NO INT;
        DECLARE vF_LIST_NO INT;
        DECLARE vF_LIST_CHILD_NO INT;
        DECLARE vIS_A_LIST INT;
        DECLARE vF_VARIANT_NO INT;
        DECLARE vREGULAR_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_PRICE FLOAT(0);
        DECLARE vF_INV_STOCK_NO INT;
        DECLARE vLIST_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vREGULAR_BUNDLE_PRICE FLOAT(0);
        DECLARE vINSTALLMENT_BUNDLE_PRICE FLOAT(0);
        DECLARE vIS_PROCESSED INT;
        DECLARE vSLS_BUNDLE_NO INT;
        DECLARE vCODE VARCHAR(40) DEFAULT NULL;
        DECLARE vCOUPON_CODE VARCHAR(40) DEFAULT NULL;
        DECLARE vBUNDLE_NAME VARCHAR(200) DEFAULT NULL;
        DECLARE vBUNDLE_NAME_PUBLIC VARCHAR(200) DEFAULT NULL;
        DECLARE vVALIDITY_FROM DATE DEFAULT NULL;
        DECLARE vVALIDITY_TO DATE DEFAULT NULL;
        DECLARE vF_A_LIST_NO INT;
        DECLARE vF_B_LIST_NO INT;
        DECLARE vF_BUNDLE_TYPE VARCHAR(40) DEFAULT NULL;
        DECLARE vP_AMOUNT FLOAT(0);
        DECLARE vP2_AMOUNT FLOAT(0);
        DECLARE vX1_QTY INT;
        DECLARE vX2_QTY INT;
        DECLARE vZA1 INT;
        DECLARE vZA2 INT;
        DECLARE vZA3 INT;
        DECLARE vR_AMOUNT FLOAT(0);
        DECLARE vR2_AMOUNT FLOAT(0);
        DECLARE vY1_QTY INT;
        DECLARE vY2_QTY INT;
        DECLARE vZB1 INT;
        DECLARE vZB2 INT;
        DECLARE vZB3 INT;
        DECLARE cvSLS_CHECK_OFFER_NO INT;
        DECLARE cvF_BUNDLE_NO INT;
        DECLARE cvF_BOOKING_NO INT;



        DECLARE int_row_count INT;
        DECLARE int_row_count2 INT;
        DECLARE int_row_count3 INT;
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE COUNTER2 INT DEFAULT 1;
        DECLARE COUNTER3 INT DEFAULT 1;

Block1: BEGIN
        DECLARE COUNTER1 INT DEFAULT 1;
        DECLARE INT_HAS_CUR_PROC_SLS_BOOKING INT DEFAULT 1;
        /*Data tranfered to SLS_CHECK_OFFER */

        DECLARE CUR_PROC_SLS_BOOKING
            CURSOR FOR
                SELECT
                    SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_PRIMARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_PRIMARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'A' AS LIST

                FROM
                    SLS_BOOKING_DETAILS_TEMP
                    ,INV_STOCK
                    ,SLS_BUNDLE_PRIMARY_SET_DTL
                    ,SLS_BUNDLE_PRIMARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                    AND SLS_BUNDLE_PRIMARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                    AND SLS_BUNDLE_PRIMARY_SET.PK_NO = SLS_BUNDLE_PRIMARY_SET_DTL.F_SLS_BUNDLE_PRIMARY_SET_NO
                    AND SLS_BUNDLE.F_A_LIST_NO = SLS_BUNDLE_PRIMARY_SET.PK_NO
                    AND CURDATE() BETWEEN SLS_BUNDLE.VALIDITY_FROM AND SLS_BUNDLE.VALIDITY_TO
                    AND SLS_BUNDLE.STATUS = 1
                UNION

                SELECT
                    SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO
                    ,SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_REGULAR_PRICE
                    ,SLS_BOOKING_DETAILS_TEMP.CURRENT_INSTALLMENT_PRICE
                    ,INV_STOCK.F_PRD_VARIANT_NO
                    ,SLS_BUNDLE_SECONDARY_SET.PK_NO AS LIST_NO
                    ,SLS_BUNDLE_SECONDARY_SET_DTL.PK_NO AS LIST_DTL_NO
                    ,SLS_BUNDLE.PK_NO AS BUNDLE_PK_NO
                    ,'B' AS LIST

                FROM
                    SLS_BOOKING_DETAILS_TEMP
                    ,INV_STOCK
                    ,SLS_BUNDLE_SECONDARY_SET_DTL
                    ,SLS_BUNDLE_SECONDARY_SET
                    ,SLS_BUNDLE

                WHERE SLS_BOOKING_DETAILS_TEMP.F_BOOKING_NO = IN_BOOKING_PK_NO
                AND INV_STOCK.PK_NO = SLS_BOOKING_DETAILS_TEMP.F_INV_STOCK_NO
                AND SLS_BUNDLE_SECONDARY_SET_DTL.F_PRD_VARIANT_NO = INV_STOCK.F_PRD_VARIANT_NO
                AND SLS_BUNDLE_SECONDARY_SET.PK_NO = SLS_BUNDLE_SECONDARY_SET_DTL.F_SLS_BUNDLE_SECONDARY_SET_NO
                AND SLS_BUNDLE.F_B_LIST_NO = SLS_BUNDLE_SECONDARY_SET.PK_NO
                AND CURDATE() BETWEEN SLS_BUNDLE.VALIDITY_FROM AND SLS_BUNDLE.VALIDITY_TO
                AND SLS_BUNDLE.STATUS = 1
                ;


        DECLARE CONTINUE HANDLER

            FOR NOT FOUND SET INT_HAS_CUR_PROC_SLS_BOOKING = 0;
DELETE FROM SLS_CHECK_OFFER WHERE F_BOOKING_NO = IN_BOOKING_PK_NO;
DELETE FROM S;
-- INSERT INTO S VALUES('Line 26');

            OPEN CUR_PROC_SLS_BOOKING;
                SELECT FOUND_ROWS() INTO int_row_count ;

-- INSERT INTO S values ('Line 32');
-- INSERT INTO S values (concat('Found row ', int_row_count));

                IF int_row_count > 0 THEN

                    GET_PROC_SLS_BOOKING: LOOP
                        FETCH NEXT
                        FROM  CUR_PROC_SLS_BOOKING
                            INTO
                            xF_BOOKING_NO
                            ,xF_INV_STOCK_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_PRD_VARIANT_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xF_BUNDLE_NO
                            ,xLIST
                            ;

                            IF INT_HAS_CUR_PROC_SLS_BOOKING = 0 THEN
                            LEAVE GET_PROC_SLS_BOOKING;
                            END IF;

-- INSERT INTO S VALUES('line 48');


                            INSERT INTO SLS_CHECK_OFFER(
                            F_BOOKING_NO
                            ,F_BUNDLE_NO
                            ,F_LIST_NO
                            ,F_LIST_CHILD_NO
                            ,LIST_TYPE
                            ,F_VARIANT_NO
                            ,REGULAR_PRICE
                            ,INSTALLMENT_PRICE
                            ,F_INV_STOCK_NO 
                            ,IS_TEMP
                            )
                            VALUES (
                            xF_BOOKING_NO
                            ,xF_BUNDLE_NO
                            ,xLIST_NO
                            ,xLIST_DTL_NO
                            ,xLIST
                            ,xF_PRD_VARIANT_NO
                            ,xREGULAR_PRICE
                            ,xINSTALLMENT_PRICE
                            ,xF_INV_STOCK_NO 
                            ,1
                            );



                    END LOOP GET_PROC_SLS_BOOKING;

                END IF;

            CLOSE CUR_PROC_SLS_BOOKING;

END Block1;

Block2: BEGIN
            DECLARE COUNTER2 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT INT DEFAULT 1;

            /* OFFER RESULT  */
            DECLARE CUR_SLS_CHECK_OFFER_RESULT
                CURSOR FOR
                SELECT
                    SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                    ,SLS_CHECK_OFFER.F_BUNDLE_NO
                    ,SLS_CHECK_OFFER.F_BOOKING_NO
                    ,SLS_CHECK_OFFER.F_LIST_NO
                    ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                    ,SLS_CHECK_OFFER.IS_A_LIST
                    ,SLS_CHECK_OFFER.F_VARIANT_NO
                    ,SLS_CHECK_OFFER.REGULAR_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                    ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                    ,SLS_CHECK_OFFER.LIST_TYPE
                    ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                    ,SLS_CHECK_OFFER.IS_PROCESSED
                    ,SLS_BUNDLE.CODE
                    ,SLS_BUNDLE.COUPON_CODE
                    ,SLS_BUNDLE.BUNDLE_NAME
                    ,SLS_BUNDLE.BUNDLE_NAME_PUBLIC
                    ,SLS_BUNDLE.VALIDITY_FROM
                    ,SLS_BUNDLE.VALIDITY_TO
                    ,SLS_BUNDLE.F_A_LIST_NO
                    ,SLS_BUNDLE.F_B_LIST_NO
                    ,SLS_BUNDLE.F_BUNDLE_TYPE
                    ,SLS_BUNDLE.P_AMOUNT
                    ,SLS_BUNDLE.P2_AMOUNT
                    ,SLS_BUNDLE.X1_QTY
                    ,SLS_BUNDLE.X2_QTY
                    ,SLS_BUNDLE.ZA1
                    ,SLS_BUNDLE.ZA2
                    ,SLS_BUNDLE.ZA3
                    ,SLS_BUNDLE.R_AMOUNT
                    ,SLS_BUNDLE.R2_AMOUNT
                    ,SLS_BUNDLE.Y1_QTY
                    ,SLS_BUNDLE.Y2_QTY
                    ,SLS_BUNDLE.ZB1
                    ,SLS_BUNDLE.ZB2
                    ,SLS_BUNDLE.ZB3
                FROM SLS_CHECK_OFFER
                    ,SLS_BUNDLE
                WHERE SLS_CHECK_OFFER.F_BOOKING_NO = IN_BOOKING_PK_NO
                    AND SLS_CHECK_OFFER.F_BUNDLE_NO = SLS_BUNDLE.PK_NO
                GROUP BY SLS_CHECK_OFFER.F_BUNDLE_NO
                 ;


                DECLARE CONTINUE HANDLER

                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0;

DELETE FROM S;
-- INSERT INTO S VALUES('Line 125');

                OPEN CUR_SLS_CHECK_OFFER_RESULT;
                    SELECT FOUND_ROWS() INTO int_row_count2 ;

-- INSERT INTO S values ('Line 130');
-- INSERT INTO S values (concat('Found row parent ', int_row_count2));

                    IF int_row_count2 > 0 THEN

                        GET_CUR_SLS_CHECK_OFFER_RESULT: LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT
                                    INTO
                                vSLS_CHECK_OFFER_NO
                                ,vF_BUNDLE_NO
                                ,vF_BOOKING_NO
                                ,vF_LIST_NO
                                ,vF_LIST_CHILD_NO
                                ,vIS_A_LIST
                                ,vF_VARIANT_NO
                                ,vREGULAR_PRICE
                                ,vINSTALLMENT_PRICE
                                ,vF_INV_STOCK_NO
                                ,vLIST_TYPE
                                ,vREGULAR_BUNDLE_PRICE
                                ,vINSTALLMENT_BUNDLE_PRICE
                                ,vIS_PROCESSED
                                ,vCODE
                                ,vCOUPON_CODE
                                ,vBUNDLE_NAME
                                ,vBUNDLE_NAME_PUBLIC
                                ,vVALIDITY_FROM
                                ,vVALIDITY_TO
                                ,vF_A_LIST_NO
                                ,vF_B_LIST_NO
                                ,vF_BUNDLE_TYPE
                                ,vP_AMOUNT
                                ,vP2_AMOUNT
                                ,vX1_QTY
                                ,vX2_QTY
                                ,vZA1
                                ,vZA2
                                ,vZA3
                                ,vR_AMOUNT
                                ,vR2_AMOUNT
                                ,vY1_QTY
                                ,vY2_QTY
                                ,vZB1
                                ,vZB2
                                ,vZB3
                                ;

                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT;
                                END IF;

        Block3: BEGIN
            DECLARE COUNTER3 INT DEFAULT 1;
            DECLARE COUNTER9 INT DEFAULT 1;
            DECLARE COUNTER10 INT DEFAULT 1;
            DECLARE INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW INT DEFAULT 1;

            DECLARE CUR_SLS_CHECK_OFFER_RESULT_ROW
            CURSOR FOR
                SELECT
                SLS_CHECK_OFFER.PK_NO AS SLS_CHECK_OFFER_NO
                ,SLS_CHECK_OFFER.F_BUNDLE_NO
                ,SLS_CHECK_OFFER.F_BOOKING_NO
                --    ,SLS_CHECK_OFFER.F_LIST_NO
                --  ,SLS_CHECK_OFFER.F_LIST_CHILD_NO
                --  ,SLS_CHECK_OFFER.IS_A_LIST
                --  ,SLS_CHECK_OFFER.F_VARIANT_NO
                --  ,SLS_CHECK_OFFER.REGULAR_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_PRICE
                --  ,SLS_CHECK_OFFER.F_INV_STOCK_NO
                --  ,SLS_CHECK_OFFER.LIST_TYPE
                -- ,SLS_CHECK_OFFER.REGULAR_BUNDLE_PRICE
                --  ,SLS_CHECK_OFFER.INSTALLMENT_BUNDLE_PRICE
                -- ,SLS_CHECK_OFFER.IS_PROCESSED

                FROM SLS_CHECK_OFFER
                WHERE SLS_CHECK_OFFER.F_BUNDLE_NO = vF_BUNDLE_NO
                AND SLS_CHECK_OFFER.F_BOOKING_NO = vF_BOOKING_NO;


                DECLARE CONTINUE HANDLER
                FOR NOT FOUND SET INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0;


-- INSERT INTO S VALUES('Line 224');

                OPEN CUR_SLS_CHECK_OFFER_RESULT_ROW;

                    SELECT FOUND_ROWS() INTO int_row_count3 ;

-- INSERT INTO S values ('Line 229');
-- INSERT INTO S values (concat('Found row ', int_row_count3));

                    IF int_row_count3 > 0 THEN

-- INSERT INTO S values ('Line 2331');
-- INSERT INTO S values (INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW);

                        GET_CUR_SLS_CHECK_OFFER_RESULT_ROW: LOOP
                            FETCH NEXT
                                FROM  CUR_SLS_CHECK_OFFER_RESULT_ROW
                                    INTO
                                    cvSLS_CHECK_OFFER_NO
                                    ,cvF_BUNDLE_NO
                                    ,cvF_BOOKING_NO

                                ;
-- INSERT INTO S values ('Line 251');
                                IF INT_HAS_CUR_SLS_CHECK_OFFER_RESULT_ROW = 0 THEN
                                    LEAVE GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                                END IF;


-- INSERT INTO S values (concat('when_', vP_AMOUNT));
-- INSERT INTO S values (concat('when1_', vX1_QTY));
-- INSERT INTO S values (concat('when2_', vZA1));


                            IF vP_AMOUNT = 0 AND vX1_QTY = 0  AND vZA1 = 0 THEN
                            -- universal false
                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = vREGULAR_BUNDLE_PRICE
                                    ,INSTALLMENT_BUNDLE_PRICE = vINSTALLMENT_BUNDLE_PRICE
                                    ,IS_PROCESSED = 1
                                    ,CON = 1
                                WHERE PK_NO = cvSLS_CHECK_OFFER_NO AND IS_PROCESSED = 0 AND F_BOOKING_NO = IN_BOOKING_PK_NO ;
INSERT INTO S VALUES (CONCAT('con 1_',cvSLS_CHECK_OFFER_NO));

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY = 0 AND vZA1 > 0 THEN
                             -- Buy any item at 20%;
INSERT INTO S VALUES (CONCAT('con 2_',cvSLS_CHECK_OFFER_NO));
-- INSERT INTO S values (CONCAT('con IP',xREGULAR_PRICE));
-- INSERT INTO S values (CONCAT('con RP',xINSTALLMENT_PRICE));

                                UPDATE SLS_CHECK_OFFER
                                    SET
                                    REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZA1
                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZA1
                                    ,IS_PROCESSED = 1
                                    ,SEQUENC = COUNTER2
                                    ,CON = 2
                                WHERE SLS_CHECK_OFFER.PK_NO = cvSLS_CHECK_OFFER_NO
                                AND IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                SET COUNTER2 = COUNTER2+1;

                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 = 0 THEN
                            -- buy 1 get 1, buy 2 get 1, buy 1 get 2, buy 1 get 1 half price from A list
INSERT INTO S VALUES (CONCAT('con 3_',cvSLS_CHECK_OFFER_NO));
                                SELECT COUNT(*) INTO @ALIST FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @ALIST >= vX1_QTY THEN
        --  INSERT INTO S values (CONCAT('LINE_',422));
        --  INSERT INTO S values (CONCAT('RR',@ALIST));
        --  INSERT INTO S values (CONCAT('SS',vX1_QTY));
                                        SELECT COUNT(*) INTO @BLIST FROM SLS_CHECK_OFFER
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            IF @BLIST >= vY1_QTY THEN

                                                UPDATE SLS_CHECK_OFFER
                                                    SET
                                                    REGULAR_BUNDLE_PRICE = xREGULAR_PRICE
                                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 31
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'A'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vX1_QTY
                                                    ;

                                                UPDATE SLS_CHECK_OFFER
                                                    SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                    ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                    ,IS_PROCESSED = 1
                                                    ,SEQUENC = COUNTER1
                                                    ,CON = 32
                                                    WHERE IS_PROCESSED = 0
                                                    AND LIST_TYPE = 'B'
                                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                    LIMIT vY1_QTY ;



                                                 SET COUNTER1 = COUNTER1+1;

                                            END IF;


                                    END IF;


                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY = 0 AND vZA1 = 0 THEN
                            -- Buy min 500 amt from A list get 2 free from B list, buy min 500 amt get 1 half price;

INSERT INTO S VALUES (CONCAT('con 4_',COUNTER1));

                                SELECT SUM(REGULAR_PRICE), SUM(INSTALLMENT_PRICE)
                                    INTO @TOTAL_P_AMOUNT, @TOTAL_P2_AMOUNT
                                    FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ;

                                IF @TOTAL_P_AMOUNT >= vP_AMOUNT THEN

                                    SELECT COUNT(*) INTO @TOTAL_FREE_QTY_FOR_vP_AMOUNT FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ;

                                    IF @TOTAL_FREE_QTY_FOR_vP_AMOUNT > 0  THEN
                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 41
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ;

                                            UPDATE SLS_CHECK_OFFER
                                                SET REGULAR_BUNDLE_PRICE = xREGULAR_PRICE - (xREGULAR_PRICE/100)*vZB1
                                                ,INSTALLMENT_BUNDLE_PRICE = xINSTALLMENT_PRICE - (xINSTALLMENT_PRICE/100)*vZB1
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 42
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'B'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            LIMIT vY1_QTY ;

                                    END IF;

                                    IF vZA1 > 0 THEN
                                        -- buy 500amt or above from A list and get 20% discount
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 43
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;

                                    END IF;


                                END IF;



                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 > 0 THEN

                            -- not possible
 INSERT INTO S VALUES (CONCAT('con 5_',cvSLS_CHECK_OFFER_NO));

                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6 item from A list at 800 amt;
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;

                                IF vZA2 > 0 THEN
                            -- buy any lowest priced 6 item A list at 800 amt more item at 50% discount;
INSERT INTO S VALUES (CONCAT('con 6_A',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 61
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;

                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 62
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ;




                                    END IF;

                                ELSE
                                -- buy any lowest priced 6 from A list item at 800 amt;

INSERT INTO S VALUES (CONCAT('con 6_B',cvSLS_CHECK_OFFER_NO));
                                    SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY
                                        INTO @TOTAL_P_AMOUNT_CON6, @TOTAL_X1_QTY_CON6
                                        FROM SLS_CHECK_OFFER
                                        WHERE
                                        IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT vX1_QTY ;

                                    IF @TOTAL_P_AMOUNT_CON6 >= vP_AMOUNT AND @TOTAL_X1_QTY_CON6 >= vX1_QTY THEN
INSERT INTO S VALUES (CONCAT('con 6_B',612));
                                        UPDATE SLS_CHECK_OFFER
                                            SET REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                                ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = COUNTER3
                                                ,CON = 63
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        LIMIT  vX1_QTY;



                                        SET COUNTER3 = COUNTER3+1;
                                    END IF;

                                END IF;






                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY > 0 AND vY1_QTY = 0 THEN
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount ;
                            -- buy any lowest priced 6item at 800amt and more item at 50% discount and more item at 20% discount;

INSERT INTO S VALUES (CONCAT('con 7_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON7, @TOTAL_X1_QTY_CON7 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;

                                IF @TOTAL_X1_QTY_CON7 >= vX1_QTY THEN

                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 71
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;


                                    IF @TOTAL_X1_QTY_CON7 > vX1_QTY THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 72
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                    END IF;

                                    SELECT  COUNT(*) AS TOTAL_QTY  INTO @TOTAL_X1_QTY_CON7C FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC ;

                                    IF @TOTAL_X1_QTY_CON7C > 0 AND vZA3 > 0 THEN

                                        UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = 1
                                            ,CON = 73
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC ;

                                    END IF;



                                END IF;


                            ELSEIF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vY1_QTY = 0 THEN
                                -- Buy lowest 6 item at 50% discount, next 2 at 30% (and remaining at 10 discount) if remaining qty and more item at 20% discount jodi thake;
    INSERT INTO S VALUES (CONCAT('con 8_',vX1_QTY));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8, @TOTAL_X1_QTY_CON8 FROM SLS_CHECK_OFFER
                                WHERE IS_PROCESSED = 0
                                AND LIST_TYPE = 'A'
                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                ORDER BY REGULAR_PRICE ASC
                                ;
                                IF @TOTAL_X1_QTY_CON8 >= vX1_QTY THEN
                                    UPDATE SLS_CHECK_OFFER
                                        SET
                                        REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA1
                                        ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA1
                                        ,IS_PROCESSED = 1
                                        ,SEQUENC = 1
                                        ,CON = 81
                                    WHERE IS_PROCESSED = 0 AND
                                    LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC LIMIT vX1_QTY;

                                    IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2  THEN
                                        -- next 2 qty 30% discount

                                        SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8A, @TOTAL_X1_QTY_CON8A FROM SLS_CHECK_OFFER
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        ORDER BY REGULAR_PRICE ASC
                                        ;

                                        IF @TOTAL_X1_QTY_CON8A > 0 THEN

                                            UPDATE SLS_CHECK_OFFER
                                                SET
                                                REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA2
                                                ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA2
                                                ,IS_PROCESSED = 1
                                                ,SEQUENC = 1
                                                ,CON = 82
                                            WHERE IS_PROCESSED = 0
                                            AND LIST_TYPE = 'A'
                                            AND F_BUNDLE_NO = vF_BUNDLE_NO
                                            AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                            ORDER BY REGULAR_PRICE ASC LIMIT vX2_QTY;

                                            IF vP_AMOUNT = 0 AND vX1_QTY > 0 AND vZA1 > 0 AND vX2_QTY > 0 AND vZA2 AND vZA3 > 0 THEN
                                                -- next remaining qty qty 20% discount
                                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON8B, @TOTAL_X1_QTY_CON8B FROM SLS_CHECK_OFFER
                                                WHERE IS_PROCESSED = 0
                                                AND LIST_TYPE = 'A'
                                                AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                ORDER BY REGULAR_PRICE ASC
                                                ;

                                                    IF @TOTAL_X1_QTY_CON8B > 0 THEN

                                                        UPDATE SLS_CHECK_OFFER
                                                            SET
                                                            REGULAR_BUNDLE_PRICE = REGULAR_PRICE - (REGULAR_PRICE/100)*vZA3
                                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_PRICE - (INSTALLMENT_PRICE/100)*vZA3
                                                            ,IS_PROCESSED = 1
                                                            ,SEQUENC = 1
                                                            ,CON = 83
                                                        WHERE IS_PROCESSED = 0
                                                        AND LIST_TYPE = 'A'
                                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                                        ORDER BY REGULAR_PRICE ASC ;

                                                    END IF;
                                                    -- end next remaining qty qty 20% discount
                                            END IF;


                                        END IF;

                                    END IF;
                                END IF;

                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT > 0 AND vY1_QTY > 0 THEN
                            -- buy 1 qty from A list at 100 taka get 1 qty from B list at 20 taka
INSERT INTO S VALUES (CONCAT('con 9_', cvSLS_CHECK_OFFER_NO));

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON9, @TOTAL_X1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON9, @TOTAL_Y1_QTY_CON9 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON9 >= vX1_QTY AND @TOTAL_Y1_QTY_CON9 >= vY1_QTY THEN
INSERT INTO S VALUES (CONCAT('con 9_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vR_AMOUNT/vY1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vR2_AMOUNT/vY1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER9
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;
                                SET COUNTER9 = COUNTER9+1;

                                END IF;


                            ELSEIF vP_AMOUNT > 0 AND vX1_QTY > 0 AND vZA1 = 0 AND vX2_QTY = 0 AND vR_AMOUNT = 0 AND vY1_QTY > 0 AND vZB1 > 0 THEN
                            -- get 1 qty from A list by 100 taka discount from B list
INSERT INTO S VALUES (CONCAT('con 10_',cvSLS_CHECK_OFFER_NO));

                            SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_P_AMOUNT_CON10, @TOTAL_X1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'A'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                                SELECT SUM(REGULAR_PRICE), COUNT(*) AS TOTAL_QTY  INTO @TOTAL_R_AMOUNT_CON10, @TOTAL_Y1_QTY_CON10 FROM SLS_CHECK_OFFER
                                    WHERE IS_PROCESSED = 0
                                    AND LIST_TYPE = 'B'
                                    AND F_BUNDLE_NO = vF_BUNDLE_NO
                                    AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                    ORDER BY REGULAR_PRICE ASC
                                ;

                            IF @TOTAL_X1_QTY_CON10 >= vX1_QTY AND @TOTAL_Y1_QTY_CON10 >= vY1_QTY THEN
INSERT INTO S VALUES (CONCAT('con 10_','YES'));

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = vP_AMOUNT/vX1_QTY
                                            ,INSTALLMENT_BUNDLE_PRICE = vP2_AMOUNT/vX1_QTY
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 101
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'A'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vX1_QTY;

                                    UPDATE SLS_CHECK_OFFER
                                            SET
                                            REGULAR_BUNDLE_PRICE = REGULAR_BUNDLE_PRICE - (REGULAR_BUNDLE_PRICE/100)*vZB1
                                            ,INSTALLMENT_BUNDLE_PRICE = INSTALLMENT_BUNDLE_PRICE - (INSTALLMENT_BUNDLE_PRICE/100)*vZB1
                                            ,IS_PROCESSED = 1
                                            ,SEQUENC = COUNTER10
                                            ,CON = 91
                                        WHERE IS_PROCESSED = 0
                                        AND LIST_TYPE = 'B'
                                        AND F_BUNDLE_NO = vF_BUNDLE_NO
                                        AND F_BOOKING_NO = IN_BOOKING_PK_NO
                                        LIMIT vY1_QTY;

                                SET COUNTER10 = COUNTER10+1;

                                END IF;




                            END IF; -- last if
                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT_ROW;
                    END IF;



        CLOSE CUR_SLS_CHECK_OFFER_RESULT_ROW;

        END Block3;






                        END LOOP GET_CUR_SLS_CHECK_OFFER_RESULT;

                    END IF;

                CLOSE CUR_SLS_CHECK_OFFER_RESULT;






END Block2;

END BLOCKPARENT */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SC_SHIPMENT_CANCELLED` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SC_SHIPMENT_CANCELLED` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SC_SHIPMENT_CANCELLED`(IN_SHIPMENT_PK_NO Integer(11), OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN
                                                           

/*10101010~10~5|10101011~9~3|10101012~10~1|*/



    DECLARE int_HAS_cur_SC_BOX INT DEFAULT 1;
    DECLARE xPK_NO INT;

  
    DECLARE cur_SC_BOX
        CURSOR FOR 
        SELECT 
            F_BOX_NO
            FROM SC_SHIPMENT_BOX
            WHERE F_SHIPPMENT_NO=IN_SHIPMENT_PK_NO ;  
            
                      
    DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET int_HAS_cur_SC_BOX = 0;    
            
 

              UPDATE INV_STOCK 
              SET PRODUCT_STATUS = 20,
              F_SHIPPMENT_NO = NULL,
              SHIPMENT_NAME = NULL
              WHERE F_SHIPPMENT_NO = IN_SHIPMENT_PK_NO;

                
                OPEN cur_SC_BOX;


                    get_PROC_SC_SHIPMENT_CANCELLED: LOOP
                        FETCH NEXT FROM  cur_SC_BOX INTO xPK_NO;  

                        IF int_HAS_cur_SC_BOX = 0 THEN 
                                LEAVE get_PROC_SC_SHIPMENT_CANCELLED;
                            END IF;
                     
                          UPDATE SC_BOX 
                            SET BOX_STATUS = 10
                            WHERE PK_NO = xPK_NO;

                                    
                    END LOOP get_PROC_SC_SHIPMENT_CANCELLED;   
    
 
                CLOSE cur_SC_BOX;  
              
        
        DELETE FROM SC_SHIPMENT_BOX WHERE F_SHIPMENT_NO = IN_SHIPMENT_PK_NO;


    SET OUT_STATUS = 'success'; 
             
       
    


END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SHELVING_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SHELVING_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SHELVING_INV_STOCK`(shelve_label VarChar(20), IN_INV_SHELVING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN

/*10101010~10~5|10101011~9~3|10101012~10~1|*/
  DECLARE int_HAS_cur_PROC_SHELVING_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;
    DECLARE var_arrary_row VARCHAR(200);
    DECLARE var_arrary_row_part VARCHAR(200);
    DECLARE int_row_count INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_shelve_pk INT(11);
    DECLARE from_warehouse_no INT(11);
    DECLARE user_name VARCHAR(200);
    DECLARE i,j INT;
    DECLARE item_count_warehouse INT(11);
    DECLARE ALL_SUCCESS INT DEFAULT 0;

    DECLARE cur_PROC_SHELVING_INV_STOCK
        CURSOR FOR
        SELECT
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2
            AND (F_INV_ZONE_NO IS NULL)
            AND SKUID=var_arrary_param1 LIMIT var_arrary_param3;

        DECLARE CONTINUE HANDLER
            FOR NOT FOUND SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 0;

DELETE FROM R;
INSERT INTO R VALUES('Start Procedre');

 SELECT PK_NO,ITEM_COUNT INTO int_shelve_pk,item_count_warehouse FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
 INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
 INSERT INTO R VALUES(concat('Zone PK_NO val ', int_shelve_pk));
 INSERT INTO R VALUES(concat('shelve_label val ', shelve_label));
 insert into R values (concat('Parameter Array ',IN_INV_SHELVING_ARRAY));


            SELECT USERNAME INTO user_name FROM SA_USER WHERE PK_NO = USER_ID;
            SET i=1;

            WHILE i <= IN_ROW_COUNT DO
                INSERT INTO R VALUES(concat('loop i val ', i));

                SELECT substring_index(IN_INV_SHELVING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;

insert into R values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;

                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );


                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) );


                SET  var_arrary_param3 = var_arrary_row_part;

                SET IN_INV_SHELVING_ARRAY = substring(IN_INV_SHELVING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_SHELVING_ARRAY) - length(var_arrary_row) );


insert into R values (concat('Param 1   ', var_arrary_param1));
insert into R values (concat('Param 2   ', var_arrary_param2));
insert into R values (concat('Param 3   ', var_arrary_param3));


                SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 1;

                OPEN cur_PROC_SHELVING_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;

                insert into R values (concat('Found row before Loop ', int_row_count));


                    IF int_row_count  != 0 && int_row_count = var_arrary_param3 THEN

                    SET ALL_SUCCESS = ALL_SUCCESS + 1;

                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS));
                       /* SET j=0;


INSERT INTO R VALUES(concat('init j val ', j));*/

                    get_PROC_SHELVING_INV_STOCK: LOOP
                        FETCH NEXT FROM  cur_PROC_SHELVING_INV_STOCK INTO xPK_NO;

INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SHELVING_INV_STOCK));

                        IF int_HAS_cur_PROC_SHELVING_INV_STOCK = 0 THEN
                                LEAVE get_PROC_SHELVING_INV_STOCK;
                            END IF;


INSERT INTO R VALUES(concat('INV Stock PK_NO ', xPK_NO) );
/*INSERT INTO R VALUES(concat('loop j val ', j));   */

                        UPDATE INV_STOCK
                            SET F_INV_ZONE_NO = int_shelve_pk
                            ,INV_ZONE_BARCODE = shelve_label
                            ,ZONE_CHECK_IN_BY_NAME= user_name
                            ,ZONE_CHECK_IN_BY = USER_ID
                            WHERE PK_NO =  xPK_NO;
                        INSERT INTO INV_WAREHOUSE_ZONE_STOCK_ITEM( F_INV_STOCK_NO, F_INV_WAREHOUSE_ZONE_NO) VALUES ( xPK_NO, int_shelve_pk );
                          /*  SET j = j + 1;*/
                        INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                        SET item_count_warehouse = item_count_warehouse + 1;

                    END LOOP get_PROC_SHELVING_INV_STOCK;

                    INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                     UPDATE INV_WAREHOUSE_ZONES
                            SET ITEM_COUNT = item_count_warehouse
                            WHERE ZONE_BARCODE =  shelve_label;

                    END IF;

                CLOSE cur_PROC_SHELVING_INV_STOCK;

                set i = i + 1;

            END WHILE;

                  IF ALL_SUCCESS = IN_ROW_COUNT THEN
                     SET OUT_STATUS = 'success';
                   ELSE
                     SET OUT_STATUS = 'exeeded';
                  /*  SELECT PK_NO INTO int_shelve_pk FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
                    UPDATE INV_STOCK
                           SET F_INV_ZONE_NO = NULL,
                               INV_ZONE_BARCODE = NULL
                           WHERE F_INV_ZONE_NO =  int_shelve_pk ;

                    DELETE FROM INV_WAREHOUSE_ZONE_STOCK_ITEM WHERE F_INV_WAREHOUSE_ZONE_NO = int_shelve_pk ;
                    */
                   END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));




END */$$
DELIMITER ;

/* Procedure structure for procedure `PROC_SHELVING_UPDATE_INV_STOCK` */

/*!50003 DROP PROCEDURE IF EXISTS  `PROC_SHELVING_UPDATE_INV_STOCK` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_SHELVING_UPDATE_INV_STOCK`(shelve_label VarChar(20), IN_INV_SHELVING_ARRAY VarChar(1024), IN_ROW_COUNT Integer, IN_COL_PARAMETERS Integer, IN_COLUMN_SEPARATOR VarChar(1), IN_ROW_SEPARATOR VarChar(1), USER_ID Integer, IS_UPDATE Integer, OUT OUT_STATUS VarChar(20))
    NO SQL
BEGIN
                                                           
/*10101010~10~5|10101011~9~3|10101012~10~1|*/
  DECLARE int_HAS_cur_PROC_SHELVING_INV_STOCK INT DEFAULT 1;
    DECLARE xPK_NO INT;
    DECLARE var_arrary_param1 VARCHAR(100);
    DECLARE var_arrary_param2 VARCHAR(100);
    DECLARE var_arrary_param3 INT;      
    DECLARE var_arrary_row VARCHAR(200); 
    DECLARE var_arrary_row_part VARCHAR(200);     
    DECLARE int_row_count INT;
    DECLARE int_is_duplicate_box INT DEFAULT 1;
    DECLARE int_shelve_pk INT(11);  
    DECLARE from_warehouse_no INT(11);   
    DECLARE user_name VARCHAR(200);
    DECLARE i,j INT;    
    DECLARE item_count_warehouse INT(11);   
    DECLARE ALL_SUCCESS INT DEFAULT 0;
  
    DECLARE cur_PROC_SHELVING_INV_STOCK
        CURSOR FOR    
        SELECT 
            PK_NO
            FROM INV_STOCK
            WHERE F_INV_WAREHOUSE_NO=var_arrary_param2 
            AND (PRODUCT_STATUS = 60 )  
            AND (INV_ZONE_BARCODE = shelve_label )
            AND SKUID=var_arrary_param1 ORDER BY PK_NO DESC LIMIT var_arrary_param3;    
    
        DECLARE CONTINUE HANDLER 
            FOR NOT FOUND SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 0;    
            
            /*RESHELVING*/
            
            
            
           /* IF IS_UPDATE = 1 THEN   
              SELECT PK_NO INTO int_box_pk FROM SC_BOX WHERE BOX_NO = IN_BOX_LABEL;
              SELECT FOUND_ROWS() into int_row_count ;
              INSERT INTO R VALUES(int_row_count);
              IF int_row_count > 0 THEN
              UPDATE INV_STOCK
                     SET F_BOX_NO = NULL, 
                     PRODUCT_STATUS = 0
              WHERE F_BOX_NO =  int_box_pk ;
         
              DELETE FROM SC_BOX_INV_STOCK WHERE F_BOX_NO = int_box_pk ;
                 INSERT INTO R VALUES(2);
              DELETE FROM SC_BOX WHERE PK_NO = int_box_pk;  
              END IF;
                
            END IF; 
        /*RESHELVING End*/

DELETE FROM R;
INSERT INTO R VALUES('Start Procedre');
 
 SELECT PK_NO,ITEM_COUNT INTO int_shelve_pk,item_count_warehouse FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
 INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));  
 INSERT INTO R VALUES(concat('Zone PK_NO val ', int_shelve_pk));    
 INSERT INTO R VALUES(concat('shelve_label val ', shelve_label));             
insert into R values (concat('Parameter Array ',IN_INV_SHELVING_ARRAY));

            SET i=1;         


            WHILE i <= IN_ROW_COUNT DO 
                INSERT INTO R VALUES(concat('loop i val ', i)); 
                
                SELECT substring_index(IN_INV_SHELVING_ARRAY , IN_ROW_SEPARATOR , 1) INTO var_arrary_row;  

insert into R values (concat('Row data ', var_arrary_row));

                SET var_arrary_row_part =  var_arrary_row;      
                  


                SELECT substring_index(var_arrary_row_part , IN_COLUMN_SEPARATOR , 1) INTO var_arrary_param1;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param1)+2 , length(var_arrary_row_part) - length(var_arrary_param1) );
                                                                                                                                    
                  
                SELECT substring_index(var_arrary_row_part,IN_COLUMN_SEPARATOR,1) INTO var_arrary_param2;
                SET var_arrary_row_part = substring(var_arrary_row_part , length(var_arrary_param2)+2 , length(var_arrary_row_part) - length(var_arrary_param2) ); 

                
                SET  var_arrary_param3 = var_arrary_row_part;                 

                SET IN_INV_SHELVING_ARRAY = substring(IN_INV_SHELVING_ARRAY , length(var_arrary_row)+2 , length(IN_INV_SHELVING_ARRAY) - length(var_arrary_row) ); 
                 



insert into R values (concat('Param 1   ', var_arrary_param1));  
insert into R values (concat('Param 2   ', var_arrary_param2));  
insert into R values (concat('Param 3   ', var_arrary_param3)); 


                SET int_HAS_cur_PROC_SHELVING_INV_STOCK = 1;
                
                OPEN cur_PROC_SHELVING_INV_STOCK;
                SELECT FOUND_ROWS() into int_row_count ;
                    
                insert into R values (concat('Found row before Loop ', int_row_count));  
                              

                    IF int_row_count  != 0 && int_row_count = var_arrary_param3 THEN 
                       
                    SET ALL_SUCCESS = ALL_SUCCESS + 1; 
                     
                    insert into R values (concat('ALL SUCCESS VAL ', ALL_SUCCESS)); 
                       /* SET j=0;   
                       
                   
INSERT INTO R VALUES(concat('init j val ', j));*/

                    get_PROC_SHELVING_INV_STOCK: LOOP
                        FETCH NEXT FROM  cur_PROC_SHELVING_INV_STOCK INTO xPK_NO;  

INSERT INTO R VALUES(concat('Loop Control var ', int_HAS_cur_PROC_SHELVING_INV_STOCK));                        

                        IF int_HAS_cur_PROC_SHELVING_INV_STOCK = 0 THEN 
                                LEAVE get_PROC_SHELVING_INV_STOCK;
                            END IF;
                     

INSERT INTO R VALUES(concat('INV Stock PK_NO ', xPK_NO) );
/*INSERT INTO R VALUES(concat('loop j val ', j));   */
                       
                        UPDATE INV_STOCK
                              SET F_INV_ZONE_NO = null, INV_ZONE_BARCODE = null
                              WHERE PK_NO =  xPK_NO;
                          DELETE FROM INV_WAREHOUSE_ZONE_STOCK_ITEM WHERE F_INV_STOCK_NO = xPK_NO;
                          INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                          SET item_count_warehouse = item_count_warehouse - 1;
                            
                    END LOOP get_PROC_SHELVING_INV_STOCK;   
                    
                    INSERT INTO R VALUES(concat('item_count val ', item_count_warehouse));
                     UPDATE INV_WAREHOUSE_ZONES
                            SET ITEM_COUNT = item_count_warehouse
                            WHERE ZONE_BARCODE =  shelve_label;
                    
                    END IF; 
    
                CLOSE cur_PROC_SHELVING_INV_STOCK;  
              
                set i = i + 1; 
                    
            END WHILE; 
                  
                  IF ALL_SUCCESS = IN_ROW_COUNT THEN
                     SET OUT_STATUS = 'success';
                   ELSE  
                     SET OUT_STATUS = 'exeeded';
                  /*  SELECT PK_NO INTO int_shelve_pk FROM INV_WAREHOUSE_ZONES WHERE ZONE_BARCODE = shelve_label;
                    UPDATE INV_STOCK
                           SET F_INV_ZONE_NO = NULL, 
                               INV_ZONE_BARCODE = NULL
                           WHERE F_INV_ZONE_NO =  int_shelve_pk ;
         
                    DELETE FROM INV_WAREHOUSE_ZONE_STOCK_ITEM WHERE F_INV_WAREHOUSE_ZONE_NO = int_shelve_pk ;
                    */
                   END IF;

INSERT INTO R VALUES(concat('End of Procedure with status ', OUT_STATUS));
        



END */$$
DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
