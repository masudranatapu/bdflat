

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_ACC_BANK_ACC_INSERT` $$

 CREATE  TRIGGER `BEFORE_ACC_BANK_ACC_INSERT` BEFORE INSERT ON `ACC_BANK_ACC` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_BANK_ACC
				where F_ACCOUNT_SOURCE_NO = NEW.F_ACCOUNT_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END $$


DELIMITER ;

/* Trigger structure for table `ACC_BANK_TXN` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_ACC_BANK_TXN_INSERT` $$

 CREATE  TRIGGER `BEFORE_ACC_BANK_TXN_INSERT` BEFORE INSERT ON `ACC_BANK_TXN` FOR EACH ROW BEGIN
declare VAR_CODE int(20) default 0;
select IFNULL(max(CODE),20000) into VAR_CODE
        from ACC_BANK_TXN;
        SET NEW.CODE = VAR_CODE+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `ACC_BANK_TXN` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_ACC_BANK_TXN_INSERT` $$

 CREATE  TRIGGER `AFTER_ACC_BANK_TXN_INSERT` AFTER INSERT ON `ACC_BANK_TXN` FOR EACH ROW
BEGIN

IF NEW.IS_COD = 1 THEN

    UPDATE ACC_PAYMENT_BANK_ACC SET
        BALACNE_BUFFER = BALACNE_BUFFER + NEW.AMOUNT_BUFFER
        ,BALANCE_ACTUAL = BALANCE_ACTUAL + NEW.AMOUNT_ACTUAL
        WHERE PK_NO = NEW.F_ACC_PAYMENT_BANK_NO;

END IF;


END $$


DELIMITER ;

/* Trigger structure for table `ACC_CUSTOMER_PAYMENTS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_ACC_CUSTOMER_PAYMENTS_INSERT` $$

 CREATE  TRIGGER `BEFORE_ACC_CUSTOMER_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_CUSTOMER_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_CUSTOMER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        CUSTOMER_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_CUSTOMER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_CUSTOMERS
    WHERE SLS_CUSTOMERS.PK_NO = NEW.F_CUSTOMER_NO
    ;

    SET NEW.CUSTOMER_NO = VAR_CUSTOMER_NO;
    SET NEW.CUSTOMER_NAME = VAR_NAME;
    SET NEW.CUSTOMER_CELL = VAR_MOBILE_NO;

    SELECT
        NAME
        ,EXCHANGE_RATE_GB
        INTO
        VAR_CNAME
        ,VAR_EXCHANGE_RATE_GB
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;
    SET NEW.CONVERSION_RATE_TO_MR = VAR_EXCHANGE_RATE_GB;


    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END $$


DELIMITER ;

/* Trigger structure for table `ACC_ORDER_PAYMENT` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_ACC_ORDER_PAYMENT_INSERT` $$

 CREATE  TRIGGER `AFTER_ACC_ORDER_PAYMENT_INSERT` AFTER INSERT ON `ACC_ORDER_PAYMENT` FOR EACH ROW BEGIN

declare VAR_PAYMENT_CONFIRMED_STATUS INT(11) DEFAULT 0;
declare VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;

    IF NEW.IS_CUSTOMER = 1 THEN

        SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_CUSTOMER_PAYMENTS
            WHERE PK_NO = NEW.F_ACC_CUSTOMER_PAYMENT_NO ;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP+NEW.PAYMENT_AMOUNT
            WHERE PK_NO = NEW.ORDER_NO;
        END IF;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP  = IFNULL(ORDER_BUFFER_TOPUP,0)+NEW.PAYMENT_AMOUNT,
                ORDER_ACTUAL_TOPUP = IFNULL(ORDER_ACTUAL_TOPUP,0) + NEW.PAYMENT_AMOUNT
                WHERE PK_NO = NEW.ORDER_NO;

            SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = NEW.CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            UPDATE SLS_CUSTOMERS
                SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                WHERE PK_NO = NEW.CUSTOMER_NO;

        END IF;

    END IF;


    IF NEW.IS_CUSTOMER = 0 THEN

        SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_RESELLER_PAYMENTS
            WHERE PK_NO = NEW.F_ACC_RESELLER_PAYMENT_NO ;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP+NEW.PAYMENT_AMOUNT
            WHERE PK_NO = NEW.ORDER_NO;
        END IF;

        IF VAR_PAYMENT_CONFIRMED_STATUS = 1 THEN

            UPDATE SLS_ORDER
                SET ORDER_BUFFER_TOPUP  = IFNULL(ORDER_BUFFER_TOPUP,0)+NEW.PAYMENT_AMOUNT,
                ORDER_ACTUAL_TOPUP = IFNULL(ORDER_ACTUAL_TOPUP,0) + NEW.PAYMENT_AMOUNT
                WHERE PK_NO = NEW.ORDER_NO;

            SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                FROM ACC_RESELLER_PAYMENTS WHERE F_RESELLER_NO = NEW.RESELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

            UPDATE SLS_RESELLERS
                SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                WHERE PK_NO = NEW.RESELLER_NO;

        END IF;



    END IF;

END $$


DELIMITER ;

/* Trigger structure for table `ACC_ORDER_PAYMENT` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_ACC_ORDER_PAYMENT_DELETE` $$

 CREATE  TRIGGER `AFTER_ACC_ORDER_PAYMENT_DELETE` AFTER DELETE ON `ACC_ORDER_PAYMENT` FOR EACH ROW BEGIN

declare VAR_F_BOOKING_NO INT(11) DEFAULT 0;
declare VAR_PAYMENT_CONFIRMED_STATUS INT(11) DEFAULT 0;
declare VAR_TOTAL_PAYMENT_REMAINING_MR FLOAT DEFAULT 0;
declare VAR_PAYMENT_AMOUNT FLOAT DEFAULT 0;

    IF OLD.IS_CUSTOMER = 1 THEN
        -- CUSTPMER

            SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
            FROM ACC_CUSTOMER_PAYMENTS
            WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO ;

            IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
                    UPDATE SLS_ORDER
                    SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT
                    WHERE PK_NO = OLD.ORDER_NO;

                    UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + VAR_PAYMENT_AMOUNT
                    WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;
            ELSE
                    UPDATE SLS_ORDER
                        SET ORDER_BUFFER_TOPUP  = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT,
                        ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.ORDER_NO;

                    UPDATE ACC_CUSTOMER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.F_ACC_CUSTOMER_PAYMENT_NO;

                    SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                        FROM ACC_CUSTOMER_PAYMENTS WHERE F_CUSTOMER_NO = OLD.CUSTOMER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

                    UPDATE SLS_CUSTOMERS
                        SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                        WHERE PK_NO = OLD.CUSTOMER_NO;


            END IF;

    ELSE

            SELECT PAYMENT_CONFIRMED_STATUS INTO VAR_PAYMENT_CONFIRMED_STATUS
                FROM ACC_RESELLER_PAYMENTS
                WHERE PK_NO = OLD.F_ACC_RESELLER_PAYMENT_NO ;


                IF VAR_PAYMENT_CONFIRMED_STATUS = 0 THEN
                        UPDATE SLS_ORDER
                        SET ORDER_BUFFER_TOPUP = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.ORDER_NO;

                         UPDATE ACC_RESELLER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.F_ACC_RESELLER_PAYMENT_NO;

                ELSE
                        UPDATE SLS_ORDER
                            SET ORDER_BUFFER_TOPUP  = ORDER_BUFFER_TOPUP - OLD.PAYMENT_AMOUNT,
                            ORDER_ACTUAL_TOPUP = ORDER_ACTUAL_TOPUP - OLD.PAYMENT_AMOUNT
                            WHERE PK_NO = OLD.ORDER_NO;

                        UPDATE ACC_RESELLER_PAYMENTS SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR + OLD.PAYMENT_AMOUNT
                        WHERE PK_NO = OLD.F_ACC_RESELLER_PAYMENT_NO;

                        SELECT SUM(PAYMENT_REMAINING_MR) INTO VAR_TOTAL_PAYMENT_REMAINING_MR
                            FROM ACC_RESELLER_PAYMENTS WHERE F_RESELLER_NO = OLD.RESELLER_NO AND PAYMENT_CONFIRMED_STATUS = 1;

                        UPDATE SLS_RESELLERS
                            SET  CUM_BALANCE = VAR_TOTAL_PAYMENT_REMAINING_MR
                            WHERE PK_NO = OLD.RESELLER_NO;

                END IF;
    END IF;

END $$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_METHODS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_ACC_PAYMENT_METHODS_INSERT` $$

 CREATE  TRIGGER `BEFORE_ACC_PAYMENT_METHODS_INSERT` BEFORE INSERT ON `ACC_PAYMENT_METHODS` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_PAYMENT_METHODS
				where F_ACC_SOURCE_NO = NEW.F_ACC_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END $$


DELIMITER ;

/* Trigger structure for table `ACC_PAYMENT_SOURCE` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_ACC_PAYMENT_SOURCE` $$

 CREATE  TRIGGER `BEFORE_ACC_PAYMENT_SOURCE` BEFORE INSERT ON `ACC_PAYMENT_SOURCE` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;


select auto_increment into PKCODE
from information_schema.tables
where table_name = 'ACC_PAYMENT_SOURCE'
and table_schema = database();
	SET NEW.CODE = PKCODE+10 ;

END $$


DELIMITER ;

/* Trigger structure for table `ACC_RESELLER_CUSTOMER_TX` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_ACC_RESELLER_CUSTOMER_TX_INSERT` $$

 CREATE  TRIGGER `AFTER_ACC_RESELLER_CUSTOMER_TX_INSERT` AFTER INSERT ON `ACC_RESELLER_CUSTOMER_TX` FOR EACH ROW BEGIN


IF NEW.F_FROM_CUSTOMER_NO IS NOT NULL AND NEW.F_TO_CUSTOMER IS NOT NULL THEN

    UPDATE SLS_CUSTOMERS
    SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0) - NEW.AMOUNT,
     CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0) -  NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_NO;

    UPDATE ACC_CUSTOMER_PAYMENTS
    SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR - NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_PAYMENT_NO ;

    UPDATE SLS_CUSTOMERS
    SET CUSTOMER_BALANCE_BUFFER = IFNULL(CUSTOMER_BALANCE_BUFFER,0) + NEW.AMOUNT,
     CUSTOMER_BALANCE_ACTUAL = IFNULL(CUSTOMER_BALANCE_ACTUAL,0) +  NEW.AMOUNT
    WHERE PK_NO = NEW.F_TO_CUSTOMER;

END IF;


  IF NEW.F_FROM_RESELLER_NO IS NOT NULL AND NEW.F_TO_RESELLER_NO IS NOT NULL THEN

    UPDATE SLS_RESELLERS
    SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0) - NEW.AMOUNT,
     CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0) -  NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_CUSTOMER_NO;

    UPDATE ACC_CUSTOMER_PAYMENTS
    SET PAYMENT_REMAINING_MR = PAYMENT_REMAINING_MR - NEW.AMOUNT
    WHERE PK_NO = NEW.F_FROM_RESELLER_PAYMENT_NO ;

    UPDATE SLS_RESELLERS
    SET CUM_BALANCE_BUFFER = IFNULL(CUM_BALANCE_BUFFER,0) + NEW.AMOUNT,
     CUM_BALANCE_ACTUAL = IFNULL(CUM_BALANCE_ACTUAL,0) +  NEW.AMOUNT
    WHERE PK_NO = NEW.F_TO_CUSTOMER;

END IF;

END $$


DELIMITER ;

/* Trigger structure for table `ACC_RESELLER_PAYMENTS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_ACC_RESELLER_PAYMENTS_INSERT` $$

 CREATE  TRIGGER `BEFORE_ACC_RESELLER_PAYMENTS_INSERT` BEFORE INSERT ON `ACC_RESELLER_PAYMENTS` FOR EACH ROW BEGIN
    declare VAR_NAME VARCHAR(200) default NULL;
    declare VAR_MOBILE_NO VARCHAR(200) default NULL;
    declare VAR_RESELLER_NO INT(11) default 0;

    declare VAR_CNAME VARCHAR(200) default NULL;
    declare VAR_EXCHANGE_RATE_GB Float default 0;

    declare VAR_PAYMENT_BANK_NAME VARCHAR(200) default NULL;
    declare VAR_PAYMENT_ACCOUNT_NAME VARCHAR(200) default NULL;
    declare VAR_BANK_ACC_NO VARCHAR(200) default NULL;


    SELECT
        RESELLER_NO
        ,NAME
        ,MOBILE_NO
        INTO
        VAR_RESELLER_NO
        ,VAR_NAME
        ,VAR_MOBILE_NO
    FROM SLS_RESELLERS
    WHERE SLS_RESELLERS.PK_NO = NEW.F_RESELLER_NO
    ;

    SET NEW.RESELLER_NO = VAR_RESELLER_NO;
    SET NEW.RESELLER_NAME = VAR_NAME;
    SET NEW.RESELLER_CELL = VAR_MOBILE_NO;

    SELECT
        NAME
        ,EXCHANGE_RATE_GB
        INTO
        VAR_CNAME
        ,VAR_EXCHANGE_RATE_GB
        FROM SS_CURRENCY
    WHERE SS_CURRENCY.PK_NO = NEW.F_PAYMENT_CURRENCY_NO;

    SET NEW.CURRENCY_NAME = VAR_CNAME;
    SET NEW.CONVERSION_RATE_TO_MR = VAR_EXCHANGE_RATE_GB;


    SELECT
        ACC_PAYMENT_BANK_ACC.BANK_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NAME
        ,ACC_PAYMENT_BANK_ACC.BANK_ACC_NO
        INTO
        VAR_PAYMENT_BANK_NAME
        ,VAR_PAYMENT_ACCOUNT_NAME
        ,VAR_BANK_ACC_NO
        FROM ACC_PAYMENT_BANK_ACC
    WHERE ACC_PAYMENT_BANK_ACC.PK_NO = NEW.F_PAYMENT_ACC_NO
    ;

    SET NEW.PAYMENT_BANK_NAME =  VAR_PAYMENT_BANK_NAME;
    SET NEW.PAYMENT_ACCOUNT_NAME =  VAR_PAYMENT_ACCOUNT_NAME;
    SET NEW.PAYMENT_BANK_ACC_NO =  VAR_BANK_ACC_NO;



END $$


DELIMITER ;

/* Trigger structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` $$

 CREATE  TRIGGER `BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` BEFORE INSERT ON `INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN



                SET NEW.IS_PROCESS_COMPLETE = 0 ;
                SET NEW.PROCESS_START_TIME = NOW() ;




END $$


DELIMITER ;

/* Trigger structure for table `INV_STOCK_PRC_STOCK_IN_MAP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` $$

 CREATE  TRIGGER `AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT` AFTER INSERT ON `INV_STOCK_PRC_STOCK_IN_MAP` FOR EACH ROW BEGIN





                CALL  PROC_INV_STOCK_PRC_STOCK_IN_MAP(NEW.PK_NO);

                /*UPDATE INV_STOCK_PRC_STOCK_IN_MAP
                SET PROCESS_COMPLETE_TIME = NOW()
                WHERE PK_NO=NEW.PK_NO;  */

                UPDATE PRC_STOCK_IN
                SET INV_STOCK_RECORD_GENERATED = 1
                WHERE PK_NO = NEW.F_PRC_STOCK_IN_NO;


END $$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRC_STOCK_IN_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRC_STOCK_IN_INSERT` BEFORE INSERT ON `PRC_STOCK_IN` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from PRC_STOCK_IN;
SET NEW.CODE = PKCODE+1 ;
END $$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRC_STOCK_IN_DETAILS_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRC_STOCK_IN_DETAILS_INSERT` BEFORE INSERT ON `PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN
	declare PARENT_CODE int(11) default 0;
	declare PKCODE varchar(20) default 0;
	declare VAR_RECIEVED_QTY int(11) default 0;
	declare VAR_TOTAL_QTY int(11) default 0;
	declare VAR_FAULTY_QTY int(11) default 0;
	declare VAR_LINE_TOTAL_VAT_MR FLOAT default 0;
	declare VAR_SUB_TOTAL_MR_EV FLOAT default 0;
	declare VAR_REC_TOTAL_MR_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_MR_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_GBP FLOAT default 0;
	declare VAR_SUB_TOTAL_GBP_EV FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_GBP_ONLY_VAT FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_AC FLOAT default 0;
	declare VAR_SUB_TOTAL_AC_EV FLOAT default 0;
	declare VAR_REC_TOTAL_AC_WITH_VAT FLOAT default 0;
	declare VAR_REC_TOTAL_AC_ONLY_VAT FLOAT default 0;

	/*-----------FOR CODE---------------*/
	select CODE into PARENT_CODE
	from PRC_STOCK_IN
	where PK_NO = NEW.F_PRC_STOCK_IN ;

	select IFNULL(max(CODE),0) into PKCODE
	from PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	IF PKCODE = 0 THEN
		SET NEW.CODE = CONCAT(PARENT_CODE*100,PKCODE+1) ;
	ELSE
		SET NEW.CODE = PKCODE+1 ;
	END IF;
	/*-----------END CODE---------------*/

	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	select
		IFNULL(SUM(RECIEVED_QTY),0)
		,IFNULL(SUM(QTY),0)
		,IFNULL(SUM(FAULTY_QTY),0)
		,IFNULL(SUM(LINE_TOTAL_VAT_MR),0)
		,IFNULL(SUM(SUB_TOTAL_MR_EV),0)
		,IFNULL(SUM(REC_TOTAL_MR_WITH_VAT),0)
		,IFNULL(SUM(REC_TOTAL_MR_ONLY_VAT),0)
		,IFNULL(SUM(LINE_TOTAL_VAT_GBP),0)
		,IFNULL(SUM(SUB_TOTAL_GBP_EV),0)
		,IFNULL(SUM(REC_TOTAL_GBP_WITH_VAT),0)
		,IFNULL(SUM(REC_TOTAL_GBP_ONLY_VAT),0)
		,IFNULL(SUM(LINE_TOTAL_VAT_AC),0)
		,IFNULL(SUM(SUB_TOTAL_AC_EV),0)
		,IFNULL(SUM(REC_TOTAL_AC_WITH_VAT),0)
		,IFNULL(SUM(REC_TOTAL_AC_ONLY_VAT),0)
	INTO
		VAR_RECIEVED_QTY
		,VAR_TOTAL_QTY
		,VAR_FAULTY_QTY
		,VAR_LINE_TOTAL_VAT_MR
		,VAR_SUB_TOTAL_MR_EV
		,VAR_REC_TOTAL_MR_WITH_VAT
		,VAR_REC_TOTAL_MR_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_GBP
		,VAR_SUB_TOTAL_GBP_EV
		,VAR_REC_TOTAL_GBP_WITH_VAT
		,VAR_REC_TOTAL_GBP_ONLY_VAT
		,VAR_LINE_TOTAL_VAT_AC
		,VAR_SUB_TOTAL_AC_EV
		,VAR_REC_TOTAL_AC_WITH_VAT
		,VAR_REC_TOTAL_AC_ONLY_VAT
	from PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	UPDATE PRC_STOCK_IN
		SET
			RECIEVED_QTY 					= VAR_RECIEVED_QTY+NEW.RECIEVED_QTY
			,TOTAL_QTY 						= VAR_TOTAL_QTY+NEW.QTY
			,FAULTY_QTY 					= VAR_FAULTY_QTY+NEW.FAULTY_QTY

			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR+VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT 	= VAR_REC_TOTAL_MR_WITH_VAT+NEW.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT 	= VAR_REC_TOTAL_MR_ONLY_VAT+NEW.REC_TOTAL_MR_ONLY_VAT

			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP+VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT 		= VAR_REC_TOTAL_GBP_WITH_VAT+NEW.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT 		= VAR_REC_TOTAL_GBP_ONLY_VAT+NEW.REC_TOTAL_GBP_ONLY_VAT

			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC+VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT 		= VAR_REC_TOTAL_AC_WITH_VAT+NEW.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT 		= VAR_REC_TOTAL_AC_ONLY_VAT+NEW.REC_TOTAL_AC_ONLY_VAT


	WHERE PK_NO = NEW.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END $$


DELIMITER ;

/* Trigger structure for table `PRC_STOCK_IN_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_PRC_STOCK_IN_DETAILS_DELETE` $$

 CREATE  TRIGGER `AFTER_PRC_STOCK_IN_DETAILS_DELETE` AFTER DELETE ON `PRC_STOCK_IN_DETAILS` FOR EACH ROW BEGIN


	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/

	UPDATE PRC_STOCK_IN
		SET
			RECIEVED_QTY 					= RECIEVED_QTY-OLD.RECIEVED_QTY
			,TOTAL_QTY 						= TOTAL_QTY-OLD.QTY
			,FAULTY_QTY 					= FAULTY_QTY-OLD.FAULTY_QTY

			,INVOICE_TOTAL_VAT_ACTUAL_MR 	= INVOICE_TOTAL_VAT_ACTUAL_MR-OLD.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_MR 	= INVOICE_TOTAL_EV_ACTUAL_MR-OLD.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_MR 		= INVOICE_TOTAL_ACTUAL_MR-(OLD.LINE_TOTAL_VAT_MR+OLD.SUB_TOTAL_MR_EV)
			,INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_WITH_VAT - OLD.REC_TOTAL_MR_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_MR_ONLY_VAT - OLD.REC_TOTAL_MR_ONLY_VAT

			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= INVOICE_TOTAL_VAT_ACTUAL_GBP-OLD.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= INVOICE_TOTAL_EV_ACTUAL_GBP-OLD.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= INVOICE_TOTAL_ACTUAL_GBP-(OLD.LINE_TOTAL_VAT_GBP+OLD.SUB_TOTAL_GBP_EV)
			,INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_WITH_VAT - OLD.REC_TOTAL_GBP_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_GBP_ONLY_VAT - OLD.REC_TOTAL_GBP_ONLY_VAT

			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= INVOICE_TOTAL_VAT_ACTUAL_AC-OLD.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= INVOICE_TOTAL_EV_ACTUAL_AC-OLD.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= INVOICE_TOTAL_ACTUAL_AC-(OLD.LINE_TOTAL_VAT_AC+OLD.SUB_TOTAL_AC_EV)
			,INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_WITH_VAT - OLD.REC_TOTAL_AC_WITH_VAT
			,INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT = INVOICE_REC_TOTAL_ACTUAL_AC_ONLY_VAT - OLD.REC_TOTAL_AC_ONLY_VAT


	WHERE PK_NO = OLD.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END $$


DELIMITER ;

/* Trigger structure for table `PRC_VENDORS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRC_VENDORS_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRC_VENDORS_INSERT` BEFORE INSERT ON `PRC_VENDORS` FOR EACH ROW BEGIN
declare PKCODE varchar(20) default 0;

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRC_VENDORS'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END $$


DELIMITER ;

/* Trigger structure for table `PRD_BRAND` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_BRAND_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_BRAND_INSERT` BEFORE INSERT ON `PRD_BRAND` FOR EACH ROW BEGIN
declare PKCODE varchar(20) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_BRAND'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END IF;
END $$


DELIMITER ;

/* Trigger structure for table `PRD_CATEGORY` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_CATEGORY_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_CATEGORY_INSERT` BEFORE INSERT ON `PRD_CATEGORY` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_CATEGORY'
and table_schema = database();
	SET NEW.CODE = PKCODE+100 ;
END IF;
END $$


DELIMITER ;

/* Trigger structure for table `PRD_COLOR` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_COLOR_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_COLOR_INSERT` BEFORE INSERT ON `PRD_COLOR` FOR EACH ROW BEGIN
	declare PKCODE int(3) default 0;

	select IFNULL(max(CODE),0) into PKCODE
		from PRD_COLOR
		where F_BRAND = NEW.F_BRAND;
		SET NEW.CODE = PKCODE+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `PRD_MASTER_SETUP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_MASTER_SETUP_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_MASTER_SETUP_INSERT` BEFORE INSERT ON `PRD_MASTER_SETUP` FOR EACH ROW BEGIN
			declare PKCODE int(5) default 0 ;
			declare COMPOSITE_CODE varchar(80) default null ;
			declare V_MKT_PREFIX varchar(50) default null;
			declare V_MKT_CODE int(4) default 0;

			select PRD_MODEL.COMPOSITE_CODE into V_MKT_PREFIX
				from PRD_MODEL
				where PRD_MODEL.PK_NO = NEW.F_MODEL ;

			select IFNULL(max(MKT_CODE),100) into  V_MKT_CODE
				from PRD_MASTER_SETUP
				where F_MODEL = NEW.F_MODEL ;
			SET NEW.MKT_CODE = V_MKT_CODE+1 ;
			SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT(V_MKT_PREFIX,V_MKT_CODE+1) ;

			select PRD_SUB_CATEGORY.COMPOSITE_CODE into COMPOSITE_CODE
				from PRD_SUB_CATEGORY
				where PRD_SUB_CATEGORY.PK_NO = NEW.F_PRD_SUB_CATEGORY_ID ;

			select IFNULL(max(CODE),100) as counter into PKCODE
				from PRD_MASTER_SETUP
				where F_PRD_SUB_CATEGORY_ID = NEW.F_PRD_SUB_CATEGORY_ID ;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END $$


DELIMITER ;

/* Trigger structure for table `PRD_MASTER_SETUP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_MASTER_SETUP_UPDATE` $$

 CREATE  TRIGGER `BEFORE_PRD_MASTER_SETUP_UPDATE` BEFORE UPDATE ON `PRD_MASTER_SETUP` FOR EACH ROW BEGIN
			declare PKCODE int(5) default 0 ;
			declare COMPOSITE_CODE varchar(80) default null ;
			declare V_MKT_PREFIX varchar(50) default null;
			declare V_MKT_CODE int(4) default 0;

			select PRD_MODEL.COMPOSITE_CODE into V_MKT_PREFIX
				from PRD_MODEL
				where PRD_MODEL.PK_NO = NEW.F_MODEL ;

			select IFNULL(max(MKT_CODE),100) into  V_MKT_CODE
				from PRD_MASTER_SETUP
				where F_MODEL = NEW.F_MODEL and PK_NO <> NEW.PK_NO ;
			SET NEW.MKT_CODE = V_MKT_CODE+1 ;
			SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT(V_MKT_PREFIX,V_MKT_CODE+1) ;

			select PRD_SUB_CATEGORY.COMPOSITE_CODE into COMPOSITE_CODE
				from PRD_SUB_CATEGORY
				where PRD_SUB_CATEGORY.PK_NO = NEW.F_PRD_SUB_CATEGORY_ID ;

			select IFNULL(max(CODE),100) as counter into PKCODE
				from PRD_MASTER_SETUP
				where F_PRD_SUB_CATEGORY_ID = NEW.F_PRD_SUB_CATEGORY_ID and PK_NO <> NEW.PK_NO ;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END $$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_MODEL_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_MODEL_INSERT` BEFORE INSERT ON `PRD_MODEL` FOR EACH ROW BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO ;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


END $$


DELIMITER ;

/* Trigger structure for table `PRD_MODEL` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_MODEL_UPDATE` $$

 CREATE  TRIGGER `BEFORE_PRD_MODEL_UPDATE` BEFORE UPDATE ON `PRD_MODEL` FOR EACH ROW BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


		END $$


DELIMITER ;

/* Trigger structure for table `PRD_SIZE` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_SIZE_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_SIZE_INSERT` BEFORE INSERT ON `PRD_SIZE` FOR EACH ROW BEGIN
	declare PKCODE varchar(20) default 0;

	select IFNULL(max(CODE),0) into PKCODE
		from PRD_SIZE
		where PRD_SIZE.F_BRAND_NO = NEW.F_BRAND_NO;
		SET NEW.CODE = PKCODE+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `PRD_SUB_CATEGORY` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_SUB_CATEGORY_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_SUB_CATEGORY_INSERT` BEFORE INSERT ON `PRD_SUB_CATEGORY` FOR EACH ROW BEGIN
			declare PKCODE int(4) default 0 ;
			declare CATEGORY_CODE int(4) default 0 ;

			select CODE into CATEGORY_CODE
				from PRD_CATEGORY
				where PK_NO = NEW.F_PRD_CATEGORY_NO ;

			select IFNULL(MAX(CODE),100) as counter into PKCODE
				from PRD_SUB_CATEGORY
				where F_PRD_CATEGORY_NO = NEW.F_PRD_CATEGORY_NO;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(CATEGORY_CODE,PKCODE+1) ;


END $$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_VARIANT_SETUP_INSERT` $$

 CREATE  TRIGGER `BEFORE_PRD_VARIANT_SETUP_INSERT` BEFORE INSERT ON `PRD_VARIANT_SETUP` FOR EACH ROW

     BEGIN
        DECLARE PKCODE INT(4) DEFAULT 0 ;
        DECLARE VAR_COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
        DECLARE VAR_KEYWORD_SEARCH VARCHAR(4000) DEFAULT NULL ;
        DECLARE VAR_NARRATION VARCHAR(4000) DEFAULT NULL ;
        DECLARE VAR_IG_CODE INT(4) DEFAULT 0 ;
        DECLARE VAR_IG_COMPOSITE_CODE VARCHAR(80) DEFAULT NULL ;
        DECLARE VAR_F_BRAND INT DEFAULT 0 ;
        DECLARE VAR_BRAND_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_MODEL INT DEFAULT 0 ;
        DECLARE VAR_MODEL_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_PRD_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;
        DECLARE VAR_F_PRD_SUB_CATEGORY_ID INT DEFAULT 0 ;
        DECLARE VAR_PRD_SUB_CATEGORY_NAME VARCHAR(50) DEFAULT NULL ;

 SELECT
PRD_MASTER_SETUP.COMPOSITE_CODE
, PRD_MASTER_SETUP.MKT_ID_COMPOSITE_CODE_PREFIX
, PRD_MASTER_SETUP.F_BRAND
, PRD_MASTER_SETUP.BRAND_NAME
, PRD_MASTER_SETUP.F_MODEL
, PRD_MASTER_SETUP.MODEL_NAME
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
, PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
, PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
INTO
  VAR_COMPOSITE_CODE
, VAR_IG_COMPOSITE_CODE
, VAR_F_BRAND
, VAR_BRAND_NAME
, VAR_F_MODEL
, VAR_MODEL_NAME
, VAR_F_PRD_CATEGORY_ID
, VAR_PRD_CATEGORY_NAME
, VAR_F_PRD_SUB_CATEGORY_ID
, VAR_PRD_SUB_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 LEFT JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
 LEFT JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;


            SELECT IFNULL(MAX(MKT_CODE),100) INTO VAR_IG_CODE
                FROM PRD_VARIANT_SETUP
                WHERE F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO ;

            SELECT IFNULL(MAX(CODE),100) INTO PKCODE
                FROM PRD_VARIANT_SETUP
                WHERE F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO;


            SET NEW.CODE = PKCODE+1 ;
            SET NEW.COMPOSITE_CODE = CONCAT(VAR_COMPOSITE_CODE,PKCODE+1) ;

            SET NEW.MKT_CODE = VAR_IG_CODE+1 ;
            SET NEW.MRK_ID_COMPOSITE_CODE = CONCAT(VAR_IG_COMPOSITE_CODE, VAR_IG_CODE+1) ;

            IF NEW.IS_BARCODE_BY_MFG = 0 THEN
                SET NEW.BARCODE = CONCAT(VAR_COMPOSITE_CODE,PKCODE+1) ;
            END IF;
            INSERT INTO S VALUES(VAR_IG_COMPOSITE_CODE);
            INSERT INTO S VALUES(VAR_COMPOSITE_CODE);




            SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
            SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR, ''), ' ', IFNULL(VAR_BRAND_NAME, ''),' ', IFNULL(VAR_MODEL_NAME, ''),' ', IFNULL(VAR_PRD_CATEGORY_NAME, ''),' ', IFNULL(VAR_PRD_SUB_CATEGORY_NAME, ''),' ' , IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(NEW.PREFERRED_SHIPPING_METHOD,''), ' ', IFNULL(VAR_NARRATION,''));
            SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

            SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;


END $$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_PRD_VARIANT_SETUP_UPDATE` $$

 CREATE  TRIGGER `BEFORE_PRD_VARIANT_SETUP_UPDATE` BEFORE UPDATE ON `PRD_VARIANT_SETUP` FOR EACH ROW BEGIN
			declare VAR_KEYWORD_SEARCH varchar(1000) default null ;
			declare VAR_NARRATION varchar(3000) default null ;
            declare VAR_F_BRAND INT default 0 ;
        declare VAR_BRAND_NAME varchar(50) default null ;
        declare VAR_F_MODEL INT default 0 ;
        declare VAR_MODEL_NAME varchar(50) default NULL ;
        declare VAR_F_PRD_CATEGORY_ID INT default 0 ;
        declare VAR_PRD_CATEGORY_NAME varchar(50) default NULL ;
        declare VAR_F_PRD_SUB_CATEGORY_ID INT default 0 ;
        declare VAR_PRD_SUB_CATEGORY_NAME varchar(50) default null ;

SELECT
 PRD_MASTER_SETUP.F_BRAND
, PRD_MASTER_SETUP.BRAND_NAME
, PRD_MASTER_SETUP.F_MODEL
, PRD_MASTER_SETUP.MODEL_NAME
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
, PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
, PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
INTO
VAR_F_BRAND
, VAR_BRAND_NAME
, VAR_F_MODEL
, VAR_MODEL_NAME
, VAR_F_PRD_CATEGORY_ID
, VAR_PRD_CATEGORY_NAME
, VAR_F_PRD_SUB_CATEGORY_ID
, VAR_PRD_SUB_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
 JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;

			SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
			SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR, ''), ' ', IFNULL(VAR_BRAND_NAME, ''),' ', IFNULL(VAR_MODEL_NAME, ''),' ', IFNULL(VAR_PRD_CATEGORY_NAME, ''),' ', IFNULL(VAR_PRD_SUB_CATEGORY_NAME, ''),' ', IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(NEW.PREFERRED_SHIPPING_METHOD,''), ' ', IFNULL(VAR_NARRATION,''));
			SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

			SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;



		END $$


DELIMITER ;

/* Trigger structure for table `PRD_VARIANT_SETUP` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_PRD_VARIANT_SETUP_UPDATE` $$

 CREATE  TRIGGER `AFTER_PRD_VARIANT_SETUP_UPDATE` AFTER UPDATE ON `PRD_VARIANT_SETUP` FOR EACH ROW
		BEGIN
declare VAR_F_BRAND INT default 0 ;
declare VAR_BRAND_NAME varchar(50) default null ;
declare VAR_F_MODEL INT default 0 ;
declare VAR_MODEL_NAME varchar(50) default NULL ;
declare VAR_F_PRD_CATEGORY_ID INT default 0 ;
declare VAR_PRD_CATEGORY_NAME varchar(50) default NULL ;
declare VAR_F_PRD_SUB_CATEGORY_ID INT default 0 ;
declare VAR_PRD_SUB_CATEGORY_NAME varchar(50) default null ;


IF NEW.BARCODE IS NOT NULL THEN
UPDATE INV_STOCK
SET BARCODE = NEW.BARCODE
WHERE F_PRD_VARIANT_NO = NEW.PK_NO;
END IF;

SELECT PRD_MASTER_SETUP.F_BRAND
, PRD_MASTER_SETUP.BRAND_NAME
, PRD_MASTER_SETUP.F_MODEL
, PRD_MASTER_SETUP.MODEL_NAME
, PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
, PRD_CATEGORY.`NAME` AS PRD_CATEGORY_NAME
, PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
, PRD_SUB_CATEGORY.`NAME` AS  PRD_SUB_CATEGORY_NAME
INTO VAR_F_BRAND
, VAR_BRAND_NAME
, VAR_F_MODEL
, VAR_MODEL_NAME
, VAR_F_PRD_CATEGORY_ID
, VAR_PRD_CATEGORY_NAME
, VAR_F_PRD_SUB_CATEGORY_ID
, VAR_PRD_SUB_CATEGORY_NAME
 FROM PRD_MASTER_SETUP
 JOIN PRD_CATEGORY ON PRD_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_CATEGORY_ID
 JOIN PRD_SUB_CATEGORY ON PRD_SUB_CATEGORY.PK_NO = PRD_MASTER_SETUP.F_PRD_SUB_CATEGORY_ID
 WHERE PRD_MASTER_SETUP.PK_NO = NEW.F_PRD_MASTER_SETUP_NO;

UPDATE INV_STOCK
            SET AIR_FREIGHT_COST = NEW.AIR_FREIGHT_CHARGE
            , SEA_FREIGHT_COST = NEW.SEA_FREIGHT_CHARGE
            , INSTALLMENT_PRICE = NEW.INSTALLMENT_PRICE
            , REGULAR_PRICE = NEW.REGULAR_PRICE
            , SM_COST = NEW.LOCAL_POSTAGE
            , SS_COST = NEW.INTER_DISTRICT_POSTAGE
            , PREFERRED_SHIPPING_METHOD = NEW.PREFERRED_SHIPPING_METHOD
            , FINAL_PREFFERED_SHIPPING_METHOD = NEW.PREFERRED_SHIPPING_METHOD
            , PRD_VARINAT_NAME = NEW.VARIANT_NAME
            , PRD_VARIANT_IMAGE_PATH = NEW.PRIMARY_IMG_RELATIVE_PATH
            , F_BRAND_NO = VAR_F_BRAND
            , BRAND_NAME = VAR_BRAND_NAME
            , F_MODEL_NO = VAR_F_MODEL
            , MODEL_NAME = VAR_MODEL_NAME
            , F_CATEGORY_NO = VAR_F_PRD_CATEGORY_ID
            , CATEGORY_NAME =  VAR_PRD_CATEGORY_NAME
            , F_SUB_CATEGORY_NO = VAR_F_PRD_SUB_CATEGORY_ID
            , SUB_CATEGORY_NAME = VAR_PRD_SUB_CATEGORY_NAME

WHERE INV_STOCK.ORDER_STATUS IS NULL AND INV_STOCK.F_PRD_VARIANT_NO = NEW.PK_NO  ;



		END $$


DELIMITER ;

/* Trigger structure for table `SC_BOX` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SC_BOX_INSERT` $$

 CREATE  TRIGGER `BEFORE_SC_BOX_INSERT` BEFORE INSERT ON `SC_BOX` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;



select IFNULL(max(CODE),100000) into PKCODE
from SC_BOX;
	SET NEW.CODE = PKCODE+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `SC_BOX_INV_STOCK` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SC_BOX_INV_STOCK_INSERT` $$

 CREATE  TRIGGER `AFTER_SC_BOX_INV_STOCK_INSERT` AFTER INSERT ON `SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

		UPDATE SC_BOX
		SET ITEM_COUNT = ITEM_COUNT+1
		WHERE PK_NO = NEW.F_BOX_NO;

END $$


DELIMITER ;

/* Trigger structure for table `SC_BOX_INV_STOCK` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SC_BOX_INV_STOCK_DELETE` $$

 CREATE  TRIGGER `AFTER_SC_BOX_INV_STOCK_DELETE` AFTER DELETE ON `SC_BOX_INV_STOCK` FOR EACH ROW BEGIN

		UPDATE SC_BOX
		SET ITEM_COUNT = ITEM_COUNT-1
		WHERE PK_NO = OLD.F_BOX_NO;

END $$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SC_SHIPMENT_INSERT` $$

 CREATE  TRIGGER `BEFORE_SC_SHIPMENT_INSERT` BEFORE INSERT ON `SC_SHIPMENT` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
select IFNULL(max(CODE),100000) into PKCODE
		from SC_SHIPMENT;
		SET NEW.CODE = PKCODE+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT_BOX` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SC_SHIPMENT_BOX_INSERT` $$

 CREATE  TRIGGER `AFTER_SC_SHIPMENT_BOX_INSERT` AFTER INSERT ON `SC_SHIPMENT_BOX` FOR EACH ROW BEGIN

		UPDATE SC_SHIPMENT
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT+1
		WHERE PK_NO = NEW.F_SHIPMENT_NO;

END $$


DELIMITER ;

/* Trigger structure for table `SC_SHIPMENT_BOX` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SC_SHIPMENT_BOX_DELETE` $$

 CREATE  TRIGGER `AFTER_SC_SHIPMENT_BOX_DELETE` AFTER DELETE ON `SC_SHIPMENT_BOX` FOR EACH ROW BEGIN

		UPDATE SC_SHIPMENT
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT-1
		WHERE PK_NO = OLD.F_SHIPMENT_NO;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_AGENTS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_AGENTS_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_AGENTS_INSERT` BEFORE INSERT ON `SLS_AGENTS` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;



select auto_increment into PKCODE
from information_schema.tables
where table_name = 'SLS_AGENTS'
and table_schema = database();
    SET NEW.CODE = PKCODE+10 ;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_BOOKING_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_BOOKING_INSERT` BEFORE INSERT ON `SLS_BOOKING` FOR EACH ROW BEGIN
declare VAR_BOOKING_NO int(11) default 0;
select IFNULL(max(BOOKING_NO),60000) into VAR_BOOKING_NO
        from SLS_BOOKING;
        SET NEW.BOOKING_NO = VAR_BOOKING_NO+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_BOOKING_DETAILS_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_BOOKING_DETAILS_INSERT` BEFORE INSERT ON `SLS_BOOKING_DETAILS` FOR EACH ROW
BEGIN
    declare VAR_SS_COST FLOAT default 0;
    declare VAR_SM_COST FLOAT default 0;
    declare VAR_AIR_FREIGHT FLOAT default 0;
    declare VAR_SEA_FREIGHT FLOAT default 0;
    declare VAR_REGULAR FLOAT default 0;
    declare VAR_INSTALLMENT FLOAT default 0;
    declare VAR_IS_REGULAR INT default 0;
    declare VAR_UNIT_PRICE FLOAT default 0;
    declare VAR_SINGLE_COMISSION FLOAT default 0;
    declare VAR_TOTAL_COMISSION FLOAT default 0;
    DECLARE VAR_TOTAL_LINE_VALUE FLOAT default 0;

    SELECT
        SS_COST,SM_COST
        ,AIR_FREIGHT_COST
        ,SEA_FREIGHT_COST
        ,REGULAR_PRICE
        ,INSTALLMENT_PRICE
        INTO
        VAR_SS_COST
        ,VAR_SM_COST
        ,VAR_AIR_FREIGHT
        ,VAR_SEA_FREIGHT
        ,VAR_REGULAR
        ,VAR_INSTALLMENT
    FROM INV_STOCK
    WHERE INV_STOCK.PK_NO = NEW.F_INV_STOCK_NO;

    SET NEW.SS_COST                     = VAR_SS_COST;
    SET NEW.SM_COST                     = VAR_SM_COST;
    SET NEW.AIR_FREIGHT                 = VAR_AIR_FREIGHT;
    SET NEW.SEA_FREIGHT                 = VAR_SEA_FREIGHT;
    SET NEW.REGULAR_PRICE               = VAR_REGULAR;
    SET NEW.INSTALLMENT_PRICE           = VAR_INSTALLMENT;

    SET NEW.CURRENT_SS_COST             = VAR_SS_COST;
    SET NEW.CURRENT_SM_COST             = VAR_SM_COST;
    SET NEW.CURRENT_AIR_FREIGHT         = VAR_AIR_FREIGHT;
    SET NEW.CURRENT_SEA_FREIGHT         = VAR_SEA_FREIGHT;
    SET NEW.CURRENT_REGULAR_PRICE       = VAR_REGULAR;
    SET NEW.CURRENT_INSTALLMENT_PRICE   = VAR_INSTALLMENT;
    SET NEW.ORDER_STATUS                = 10;
    SET VAR_IS_REGULAR                  = NEW.CURRENT_IS_REGULAR;

    IF VAR_IS_REGULAR = 0 THEN
        SET VAR_UNIT_PRICE = VAR_INSTALLMENT;
    ELSE
        SET VAR_UNIT_PRICE = VAR_REGULAR;
    END IF;

    SELECT AMOUNT INTO VAR_SINGLE_COMISSION FROM SLS_COMMISION WHERE VAR_UNIT_PRICE BETWEEN FROM_PRICE AND TO_PRICE;
    SET NEW.COMISSION = VAR_SINGLE_COMISSION;

    SELECT TOTAL_COMISSION INTO VAR_TOTAL_COMISSION FROM SLS_BOOKING WHERE PK_NO = NEW.F_BOOKING_NO;
    SET VAR_TOTAL_COMISSION = VAR_TOTAL_COMISSION + VAR_SINGLE_COMISSION;
    UPDATE SLS_BOOKING SET TOTAL_COMISSION = VAR_TOTAL_COMISSION WHERE PK_NO = NEW.F_BOOKING_NO;

    -- UPDATE LINE_PRICE
    IF NEW.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_AIR_FREIGHT;
        ELSEIF NEW.CURRENT_IS_FREIGHT = 2 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SEA_FREIGHT;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE + 0;
        END IF;

        IF NEW.IS_SELF_PICKUP = 0 THEN
           IF NEW.CURRENT_IS_SM = 1 THEN
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SM_COST;
           ELSE
           SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SS_COST;
           END IF;
        END IF;

        IF NEW.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_REGULAR_PRICE;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_INSTALLMENT_PRICE;
        END IF;

        SET NEW.LINE_PRICE = VAR_TOTAL_LINE_VALUE;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SLS_BOOKING_DETAILS_INSERT` $$

 CREATE  TRIGGER `AFTER_SLS_BOOKING_DETAILS_INSERT` AFTER INSERT ON `SLS_BOOKING_DETAILS` FOR EACH ROW
BEGIN

    declare VAR_TOTAL_ITEM_QTY int default 0;
    declare VAR_TOTAL_PRICE float default 0;

    SELECT COUNT(*) AS TOTAL_QTY,SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY,VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;

    UPDATE SLS_BOOKING SET TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY,TOTAL_PRICE = VAR_TOTAL_PRICE WHERE PK_NO = NEW.F_BOOKING_NO;



END $$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_BOOKING_DETAILS_UPDATE` $$

 CREATE  TRIGGER `BEFORE_SLS_BOOKING_DETAILS_UPDATE` BEFORE UPDATE ON `SLS_BOOKING_DETAILS` FOR EACH ROW
BEGIN
 DECLARE VAR_TOTAL_LINE_VALUE FLOAT default 0;
    DECLARE VAR_LINE_PRICE FLOAT DEFAULT 0;




        IF NEW.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_AIR_FREIGHT;
        ELSEIF NEW.CURRENT_IS_FREIGHT = 2 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SEA_FREIGHT;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE + 0;
        END IF;

       IF NEW.IS_SELF_PICKUP = 0 THEN
        IF NEW.CURRENT_IS_SM = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SM_COST;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_SS_COST;
        END IF;
       END IF;

        IF NEW.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_REGULAR_PRICE;
        ELSE
        SET VAR_TOTAL_LINE_VALUE = VAR_TOTAL_LINE_VALUE+NEW.CURRENT_INSTALLMENT_PRICE;
        END IF;

        SET NEW.LINE_PRICE = VAR_TOTAL_LINE_VALUE;

        SELECT PK_NO, F_BOOKING_NO, F_INV_STOCK_NO, COMMENTS, IS_ACTIVE, F_SS_CREATED_BY, SS_CREATED_ON, F_SS_MODIFIED_BY, SS_MODIFIED_ON, F_DELIVERY_ADDRESS, F_SS_COMPANY_NO, IS_SYSTEM_HOLD, IS_ADMIN_HOLD, DISPATCH_STATUS, AIR_FREIGHT, SEA_FREIGHT, IS_FREIGHT, SS_COST, SM_COST, IS_SM, REGULAR_PRICE, INSTALLMENT_PRICE, IS_REGULAR, CURRENT_AIR_FREIGHT, CURRENT_SEA_FREIGHT, CURRENT_IS_FREIGHT, CURRENT_SS_COST, CURRENT_SM_COST, CURRENT_IS_SM, CURRENT_REGULAR_PRICE, CURRENT_INSTALLMENT_PRICE, CURRENT_IS_REGULAR, CURRENT_F_DELIVERY_ADDRESS, ORDER_STATUS, IS_SELF_PICKUP, IS_ADMIN_APPROVAL, IS_READY, ARRIVAL_NOTIFICATION_FLAG, DISPATCH_NOTIFICATION_FLAG, IS_COD_SHELVE_TRANSFER, COMISSION, RTS_COLLECTION_USER_ID, IS_COLLECTED_FOR_RTS, F_BUNDLE_NO, BUNDLE_SEQUENC, COD_RTC_ACK, LINE_PRICE
            INTO  @VAR_PK_NO, @VAR_F_BOOKING_NO, @VAR_F_INV_STOCK_NO, @VAR_COMMENTS, @VAR_IS_ACTIVE, @VAR_F_SS_CREATED_BY, @VAR_SS_CREATED_ON, @VAR_F_SS_MODIFIED_BY, @VAR_SS_MODIFIED_ON, @VAR_F_DELIVERY_ADDRESS, @VAR_F_SS_COMPANY_NO, @VAR_IS_SYSTEM_HOLD, @VAR_IS_ADMIN_HOLD, @VAR_DISPATCH_STATUS, @VAR_AIR_FREIGHT, @VAR_SEA_FREIGHT, @VAR_IS_FREIGHT, @VAR_SS_COST, @VAR_SM_COST, @VAR_IS_SM, @VAR_REGULAR_PRICE, @VAR_INSTALLMENT_PRICE, @VAR_IS_REGULAR, @VAR_CURRENT_AIR_FREIGHT, @VAR_CURRENT_SEA_FREIGHT, @VAR_CURRENT_IS_FREIGHT, @VAR_CURRENT_SS_COST, @VAR_CURRENT_SM_COST, @VAR_CURRENT_IS_SM, @VAR_CURRENT_REGULAR_PRICE, @VAR_CURRENT_INSTALLMENT_PRICE, @VAR_CURRENT_IS_REGULAR, @VAR_CURRENT_F_DELIVERY_ADDRESS, @VAR_ORDER_STATUS, @VAR_IS_SELF_PICKUP, @VAR_IS_ADMIN_APPROVAL, @VAR_IS_READY, @VAR_ARRIVAL_NOTIFICATION_FLAG, @VAR_DISPATCH_NOTIFICATION_FLAG, @VAR_IS_COD_SHELVE_TRANSFER, @VAR_COMISSION, @VAR_RTS_COLLECTION_USER_ID, @VAR_IS_COLLECTED_FOR_RTS, @VAR_F_BUNDLE_NO, @VAR_BUNDLE_SEQUENC, @VAR_COD_RTC_ACK, @VAR_LINE_PRICE
            FROM SLS_BOOKING_DETAILS WHERE PK_NO = NEW.PK_NO;
            IF @VAR_SS_COST <> NEW.SS_COST OR
                @VAR_CURRENT_SS_COST <> NEW.CURRENT_SS_COST OR
                @VAR_SM_COST <> NEW.SM_COST OR
                @VAR_CURRENT_SM_COST <> NEW.CURRENT_SM_COST OR
                @VAR_AIR_FREIGHT <> NEW.AIR_FREIGHT OR
                @VAR_CURRENT_AIR_FREIGHT <> NEW.CURRENT_AIR_FREIGHT OR
                @VAR_SEA_FREIGHT <> NEW.SEA_FREIGHT OR
                @VAR_CURRENT_SEA_FREIGHT <> NEW.CURRENT_SEA_FREIGHT OR
                @VAR_REGULAR_PRICE <> NEW.REGULAR_PRICE OR
                @VAR_CURRENT_REGULAR_PRICE <> NEW.CURRENT_REGULAR_PRICE OR
                @VAR_INSTALLMENT_PRICE <> NEW.INSTALLMENT_PRICE OR
                @VAR_CURRENT_INSTALLMENT_PRICE <> NEW.CURRENT_INSTALLMENT_PRICE THEN



                INSERT INTO SLS_BOOKING_DETAILS_AUD (PK_NO, F_BOOKING_NO, F_INV_STOCK_NO, COMMENTS, IS_ACTIVE, F_SS_CREATED_BY, SS_CREATED_ON, F_SS_MODIFIED_BY, SS_MODIFIED_ON, F_DELIVERY_ADDRESS, F_SS_COMPANY_NO, IS_SYSTEM_HOLD, IS_ADMIN_HOLD, DISPATCH_STATUS, AIR_FREIGHT, SEA_FREIGHT, IS_FREIGHT, SS_COST, SM_COST, IS_SM, REGULAR_PRICE, INSTALLMENT_PRICE, IS_REGULAR, CURRENT_AIR_FREIGHT, CURRENT_SEA_FREIGHT, CURRENT_IS_FREIGHT, CURRENT_SS_COST, CURRENT_SM_COST, CURRENT_IS_SM, CURRENT_REGULAR_PRICE, CURRENT_INSTALLMENT_PRICE, CURRENT_IS_REGULAR, CURRENT_F_DELIVERY_ADDRESS, ORDER_STATUS, IS_SELF_PICKUP, IS_ADMIN_APPROVAL, IS_READY, ARRIVAL_NOTIFICATION_FLAG, DISPATCH_NOTIFICATION_FLAG, IS_COD_SHELVE_TRANSFER, COMISSION, RTS_COLLECTION_USER_ID, IS_COLLECTED_FOR_RTS, F_BUNDLE_NO, BUNDLE_SEQUENC, COD_RTC_ACK, LINE_PRICE) VALUES (@VAR_PK_NO, @VAR_F_BOOKING_NO, @VAR_F_INV_STOCK_NO, @VAR_COMMENTS, @VAR_IS_ACTIVE, @VAR_F_SS_CREATED_BY, @VAR_SS_CREATED_ON, NEW.F_SS_MODIFIED_BY, NEW.SS_MODIFIED_ON, @VAR_F_DELIVERY_ADDRESS, @VAR_F_SS_COMPANY_NO, @VAR_IS_SYSTEM_HOLD, @VAR_IS_ADMIN_HOLD, @VAR_DISPATCH_STATUS, @VAR_AIR_FREIGHT, @VAR_SEA_FREIGHT, @VAR_IS_FREIGHT, @VAR_SS_COST, @VAR_SM_COST, @VAR_IS_SM, @VAR_REGULAR_PRICE, @VAR_INSTALLMENT_PRICE, @VAR_IS_REGULAR, @VAR_CURRENT_AIR_FREIGHT, @VAR_CURRENT_SEA_FREIGHT, @VAR_CURRENT_IS_FREIGHT, @VAR_CURRENT_SS_COST, @VAR_CURRENT_SM_COST, @VAR_CURRENT_IS_SM, @VAR_CURRENT_REGULAR_PRICE, @VAR_CURRENT_INSTALLMENT_PRICE, @VAR_CURRENT_IS_REGULAR, @VAR_CURRENT_F_DELIVERY_ADDRESS, @VAR_ORDER_STATUS, @VAR_IS_SELF_PICKUP, @VAR_IS_ADMIN_APPROVAL, @VAR_IS_READY, @VAR_ARRIVAL_NOTIFICATION_FLAG, @VAR_DISPATCH_NOTIFICATION_FLAG, @VAR_IS_COD_SHELVE_TRANSFER, @VAR_COMISSION, @VAR_RTS_COLLECTION_USER_ID, @VAR_IS_COLLECTED_FOR_RTS, @VAR_F_BUNDLE_NO, @VAR_BUNDLE_SEQUENC, @VAR_COD_RTC_ACK, @VAR_LINE_PRICE);


                END IF;
END $$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SLS_BOOKING_DETAILS_UPDATE` $$

 CREATE  TRIGGER `AFTER_SLS_BOOKING_DETAILS_UPDATE` AFTER UPDATE ON `SLS_BOOKING_DETAILS` FOR EACH ROW
BEGIN

     DECLARE VAR_ORDER_BALANCE_USED FLOAT default 0;
    declare VAR_TOTAL_PRICE float default 0;

    SELECT SUM(LINE_PRICE) INTO VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;


        SELECT SUM(LINE_PRICE) AS TOTAL_LINE_PRICE INTO VAR_ORDER_BALANCE_USED FROM SLS_BOOKING_DETAILS
        WHERE F_BOOKING_NO =  NEW.F_BOOKING_NO AND ORDER_STATUS = '60';

        UPDATE SLS_ORDER SET ORDER_BALANCE_USED = VAR_ORDER_BALANCE_USED WHERE F_BOOKING_NO = NEW.F_BOOKING_NO;
        UPDATE SLS_BOOKING SET TOTAL_PRICE = VAR_TOTAL_PRICE WHERE PK_NO = NEW.F_BOOKING_NO;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_BOOKING_DETAILS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `AFTER_SLS_BOOKING_DETAILS_DELETE` $$

 CREATE  TRIGGER `AFTER_SLS_BOOKING_DETAILS_DELETE` AFTER DELETE ON `SLS_BOOKING_DETAILS` FOR EACH ROW
BEGIN
        declare VAR_FREIGHT_COST FLOAT default 0;
    declare VAR_POSTAGE_COST FLOAT default 0;
    declare VAR_PRICE FLOAT default 0;
    declare VAR_TOTAL_FREIGHT_POSTAGE FLOAT default 0;
    declare VAR_TOTAL_ITEM_QTY INT default 0;
    declare VAR_TOTAL_PRICE float default 0;

    SELECT COUNT(*) AS TOTAL_QTY, SUM(LINE_PRICE) INTO VAR_TOTAL_ITEM_QTY, VAR_TOTAL_PRICE
    FROM SLS_BOOKING_DETAILS
    WHERE F_BOOKING_NO = OLD.F_BOOKING_NO;


    IF OLD.CURRENT_IS_FREIGHT = 1 THEN
        SET VAR_FREIGHT_COST = OLD.CURRENT_AIR_FREIGHT;
    ELSE
        SET VAR_FREIGHT_COST = OLD.CURRENT_SEA_FREIGHT;
    END IF;

    IF OLD.CURRENT_IS_SM = 1 THEN
        SET VAR_POSTAGE_COST = OLD.CURRENT_SM_COST;
    ELSE
        SET VAR_POSTAGE_COST = OLD.CURRENT_SS_COST;
    END IF;

    IF OLD.CURRENT_IS_REGULAR = 1 THEN
        SET VAR_PRICE = OLD.CURRENT_REGULAR_PRICE;
    ELSE
        SET VAR_PRICE = OLD.CURRENT_INSTALLMENT_PRICE;
    END IF;

    SET VAR_TOTAL_FREIGHT_POSTAGE = VAR_FREIGHT_COST + VAR_POSTAGE_COST + VAR_PRICE;


    UPDATE SLS_BOOKING
    SET
    FREIGHT_COST = FREIGHT_COST - VAR_FREIGHT_COST
    ,POSTAGE_COST = POSTAGE_COST - VAR_POSTAGE_COST
    ,TOTAL_ITEM_QTY = VAR_TOTAL_ITEM_QTY
    ,TOTAL_PRICE = VAR_TOTAL_PRICE
    WHERE PK_NO = OLD.F_BOOKING_NO;
END $$


DELIMITER ;

/* Trigger structure for table `SLS_CHECK_OFFER` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_CHECK_OFFER_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_CHECK_OFFER_INSERT` BEFORE INSERT ON `SLS_CHECK_OFFER` FOR EACH ROW BEGIN

        IF NEW.IS_PROCESSED = 0 THEN
        SET NEW.REGULAR_BUNDLE_PRICE = NEW.REGULAR_PRICE;
        SET NEW.INSTALLMENT_BUNDLE_PRICE = NEW.INSTALLMENT_PRICE;
        END IF;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMERS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_CUSTOMERS_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_CUSTOMERS_INSERT` BEFORE INSERT ON `SLS_CUSTOMERS` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;
declare VAR_CUSTOMER_NO int(11) default 0;

SELECT
    IFNULL(max(CODE),100) AS SCODE,
    IFNULL(MAX(CUSTOMER_NO),10000) AS SCUSTOMER_NO
    INTO  VAR_CODE, VAR_CUSTOMER_NO
FROM SLS_CUSTOMERS;

	SET NEW.CODE = VAR_CODE+1 ;


   SET NEW.CUSTOMER_NO = VAR_CUSTOMER_NO+1;


END $$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMERS_ADDRESS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT` BEFORE INSERT ON `SLS_CUSTOMERS_ADDRESS` FOR EACH ROW BEGIN
declare PKCODE int(11) default 0;
declare CUST_CODE int(11) default 0;


select IFNULL(max(CODE),1) into CUST_CODE
from SLS_CUSTOMERS
where PK_NO = NEW.F_CUSTOMER_NO;

select IFNULL(max(CODE),1) into PKCODE
from SLS_CUSTOMERS_ADDRESS
where F_CUSTOMER_NO = NEW.F_CUSTOMER_NO;

	SET NEW.CODE = CONCAT(CUST_CODE,PKCODE+1) ;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_CUSTOMER_ADDRESS_TYPE` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_CUSTOMER_ADDRESS_TYPE_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_CUSTOMER_ADDRESS_TYPE_INSERT` BEFORE INSERT ON `SLS_CUSTOMER_ADDRESS_TYPE` FOR EACH ROW BEGIN
declare PKCODE int(2) default 0;
select IFNULL(max(CODE),10) into PKCODE
		from SLS_CUSTOMER_ADDRESS_TYPE;
		SET NEW.CODE = PKCODE+1 ;

END $$


DELIMITER ;

/* Trigger structure for table `SLS_NOTIFICATION` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_NOTIFICATION_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_NOTIFICATION_INSERT` BEFORE INSERT ON `SLS_NOTIFICATION` FOR EACH ROW BEGIN
    DECLARE VAR_MOBILE_NO VARCHAR(40) DEFAULT NULL;

    IF NEW.IS_RESELLER = 1 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_RESELLERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_RESELLERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_RESELLERS.F_COUNTRY_NO
        WHERE SLS_RESELLERS.PK_NO = NEW.RESELLER_NO;

    END IF;

    IF NEW.IS_RESELLER = 0 THEN

        SELECT
        CONCAT(SS_COUNTRY.DIAL_CODE,SLS_CUSTOMERS.MOBILE_NO) AS FULL_MOBILE_NO INTO VAR_MOBILE_NO
        FROM SLS_CUSTOMERS
        JOIN SS_COUNTRY ON SS_COUNTRY.PK_NO = SLS_CUSTOMERS.F_COUNTRY_NO
        WHERE SLS_CUSTOMERS.PK_NO = NEW.CUSTOMER_NO;


    END IF;

    SET NEW.MOBILE_NO = VAR_MOBILE_NO;



END $$


DELIMITER ;

/* Trigger structure for table `SLS_RESELLERS` */

DELIMITER $$

 DROP TRIGGER IF EXISTS   `BEFORE_SLS_RESELLERS_INSERT` $$

 CREATE  TRIGGER `BEFORE_SLS_RESELLERS_INSERT` BEFORE INSERT ON `SLS_RESELLERS` FOR EACH ROW BEGIN
declare VAR_CODE int(11) default 0;
declare VAR_RESELLER_NO int(11) default 0;

SELECT
    IFNULL(max(CODE),100) AS SCODE,
    IFNULL(MAX(RESELLER_NO),2000) AS SRESELLER_NO
    INTO  VAR_CODE, VAR_RESELLER_NO
FROM SLS_RESELLERS;

    SET NEW.CODE = VAR_CODE+1 ;


    SET NEW.RESELLER_NO = VAR_RESELLER_NO+1;


END $$


DELIMITER ;


